{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#bienvenidos-al-submodulo-javascript","title":"\ud83d\ude80 Bienvenidos al Subm\u00f3dulo JavaScript","text":"<p>\u00a1Bienvenidos a este apasionante viaje por el universo de JavaScript! Este curso est\u00e1 dise\u00f1ado para introducirte en el desarrollo y la programaci\u00f3n con uno de los lenguajes m\u00e1s poderosos y vers\u00e1tiles de la web. Tanto si eres un principiante como si ya tienes experiencia en programaci\u00f3n, este programa te proporcionar\u00e1 las competencias pr\u00e1cticas necesarias para destacar en la creaci\u00f3n de aplicaciones web din\u00e1micas e interactivas.</p>"},{"location":"#que-aprenderas-en-este-curso","title":"\u00bfQu\u00e9 aprender\u00e1s en este curso?","text":"<p>Este curso abarca una amplia gama de temas esenciales y avanzados, organizados en m\u00f3dulos pr\u00e1cticos:</p>"},{"location":"#fundamentos-de-javascript","title":"Fundamentos de JavaScript","text":"<ul> <li>Conceptos b\u00e1sicos: Aprender\u00e1s qu\u00e9 es JavaScript, su sintaxis, y su rol en el desarrollo web moderno.</li> <li>Manipulaci\u00f3n del DOM: Descubrir\u00e1s c\u00f3mo interactuar con elementos HTML y CSS para crear interfaces din\u00e1micas.</li> <li>Herramientas de desarrollo: Configurar\u00e1s entornos como Visual Studio Code, Node.js y npm para optimizar tu flujo de trabajo.</li> </ul>"},{"location":"#metodologia-del-curso","title":"Metodolog\u00eda del curso","text":"<p>El curso combina aprendizaje te\u00f3rico y pr\u00e1ctico para que desarrolles habilidades s\u00f3lidas:</p> <ul> <li>Clases te\u00f3ricas: Fundamentos claros sobre programaci\u00f3n, estructuras de datos y paradigmas de JavaScript.</li> <li>Ejercicios pr\u00e1cticos: Actividades guiadas para escribir c\u00f3digo, depurar errores y construir peque\u00f1as aplicaciones.</li> </ul>"},{"location":"#compromiso-de-el-sena","title":"Compromiso de El SENA","text":"<p>En El SENA, nuestro compromiso es tu desarrollo integral. Este curso no solo busca ense\u00f1arte las bases de JavaScript, sino tambi\u00e9n inspirarte a crear soluciones innovadoras que transformen la experiencia digital. Al finalizar este programa, tendr\u00e1s las competencias necesarias para desarrollar aplicaciones web interactivas, optimizar flujos de trabajo y contribuir a proyectos tecnol\u00f3gicos de vanguardia.</p>"},{"location":"#embarcate-en-esta-aventura-tecnologica","title":"\u00a1Emb\u00e1rcate en esta aventura tecnol\u00f3gica!","text":"<p>Estamos emocionados de acompa\u00f1arte en este proceso de aprendizaje. Con dedicaci\u00f3n y esfuerzo, pronto estar\u00e1s creando aplicaciones web funcionales, resolviendo problemas reales y participando en proyectos de desarrollo web innovadores.</p> <p>\u00a1Bienvenido al mundo de JavaScript!</p>"},{"location":"activities/p1/","title":"Actividad Pr\u00e1ctica 1: Uso de Props en Next.js (App Router)","text":"<p>Esta actividad te guiar\u00e1 paso a paso para entender y utilizar props en Next.js con el App Router, un concepto fundamental para pasar datos entre componentes en React. Crearemos una aplicaci\u00f3n simple que muestra informaci\u00f3n de usuarios, utilizando componentes de cliente y servidor. La actividad est\u00e1 dise\u00f1ada para principiantes, con explicaciones detalladas y ejemplos pr\u00e1cticos.</p>"},{"location":"activities/p1/#prerrequisitos","title":"Prerrequisitos","text":"<ul> <li>Conocimientos b\u00e1sicos de HTML, CSS y JavaScript.</li> <li>Node.js instalado (versi\u00f3n 18 o superior recomendada).</li> <li>Un editor de c\u00f3digo (como VS Code).</li> <li>Familiaridad b\u00e1sica con React y Next.js.</li> <li>Conocimiento b\u00e1sico de componentes de cliente y servidor en Next.js.</li> </ul>"},{"location":"activities/p1/#objetivos-de-la-actividad","title":"Objetivos de la actividad","text":"<ul> <li>Comprender c\u00f3mo funcionan las props en el contexto de Next.js.</li> <li>Crear componentes de cliente que usen props para mostrar datos din\u00e1micos.</li> <li>Practicar el paso de diferentes tipos de datos a trav\u00e9s de props (strings, n\u00fameros, objetos, funciones).</li> <li>Estructurar una aplicaci\u00f3n Next.js simple usando el App Router.</li> </ul>"},{"location":"activities/p1/#paso-1-configuracion-del-entorno","title":"Paso 1: Configuraci\u00f3n del entorno","text":"<ol> <li>Crea un fork de::  </li> </ol> <pre><code>https://github.com/jfinfosena/act_react_s1.git\n</code></pre> <ol> <li>Limpia el proyecto:</li> <li>En la carpeta <code>app</code>, elimina el contenido de <code>page.js</code> y reempl\u00e1zalo con:</li> </ol> <pre><code>export default function Home() {\n  return (\n    &lt;main className=\"container mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-4\"&gt;Actividad de Props en Next.js&lt;/h1&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre>"},{"location":"activities/p1/#paso-2-crear-un-componente-de-cliente-que-reciba-props","title":"Paso 2: Crear un componente de cliente que reciba props","text":"<ol> <li>Crea un componente <code>Usuario</code>:</li> <li>Crea una nueva carpeta <code>components</code> en la ra\u00edz del proyecto.</li> <li>Dentro de <code>components</code>, crea un archivo <code>Usuario.jsx</code>:</li> </ol> <pre><code>'use client';\n\nimport React from 'react';\n\nfunction Usuario(props) {\n  return (\n    &lt;div className=\"bg-gray-100 p-4 m-2 rounded-lg\"&gt;\n      &lt;h2 className=\"text-xl font-bold\"&gt;Nombre: {props.nombre}&lt;/h2&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Usuario;\n</code></pre> <p>Explicaci\u00f3n:    - A\u00f1adimos <code>'use client'</code> al inicio del archivo porque este componente usar\u00e1 interactividad del lado del cliente (m\u00e1s adelante a\u00f1adiremos un bot\u00f3n).    - El componente recibe <code>props</code> y muestra la prop <code>nombre</code>.    - Usamos Tailwind CSS para un dise\u00f1o b\u00e1sico.</p> <ol> <li>Usa el componente <code>Usuario</code> en la p\u00e1gina principal:</li> <li>Modifica <code>app/page.js</code>:</li> </ol> <pre><code>import Usuario from '../components/Usuario';\n\nexport default function Home() {\n  return (\n    &lt;main className=\"container mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-4\"&gt;Actividad de Props en Next.js&lt;/h1&gt;\n      &lt;Usuario nombre=\"Ana Garc\u00eda\" /&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n:    - Importamos el componente <code>Usuario</code> desde la carpeta <code>components</code>.    - Pasamos la prop <code>nombre</code> con el valor <code>\"Ana Garc\u00eda\"</code>.    - Al renderizar, el componente mostrar\u00e1 \"Nombre: Ana Garc\u00eda\".</p> <ol> <li>Prueba en el navegador:</li> <li>Guarda los cambios y verifica que el navegador muestre el texto \"Nombre: Ana Garc\u00eda\" con un estilo aplicado.</li> </ol>"},{"location":"activities/p1/#paso-3-pasar-multiples-props","title":"Paso 3: Pasar m\u00faltiples props","text":"<ol> <li>A\u00f1ade m\u00e1s props al componente <code>Usuario</code>:</li> <li>Modifica <code>components/Usuario.jsx</code> para recibir y mostrar m\u00e1s props, como <code>edad</code> y <code>ciudad</code>:</li> </ol> <pre><code>'use client';\n\nimport React from 'react';\n\nfunction Usuario(props) {\n  return (\n    &lt;div className=\"bg-gray-100 p-4 m-2 rounded-lg\"&gt;\n      &lt;h2 className=\"text-xl font-bold\"&gt;Nombre: {props.nombre}&lt;/h2&gt;\n      &lt;p&gt;Edad: {props.edad} a\u00f1os&lt;/p&gt;\n      &lt;p&gt;Ciudad: {props.ciudad}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Usuario;\n</code></pre> <ol> <li>Actualiza <code>page.js</code> para pasar las nuevas props:</li> <li>Modifica <code>app/page.js</code>:</li> </ol> <pre><code>import Usuario from '../components/Usuario';\n\nexport default function Home() {\n  return (\n    &lt;main className=\"container mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-4\"&gt;Actividad de Props en Next.js&lt;/h1&gt;\n      &lt;Usuario nombre=\"Ana Garc\u00eda\" edad={25} ciudad=\"Madrid\" /&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n:    - Pasamos tres props: <code>nombre</code>, <code>edad</code> y <code>ciudad</code>.    - <code>edad</code> es un n\u00famero, mientras que <code>nombre</code> y <code>ciudad</code> son strings, mostrando la flexibilidad de las props.</p> <ol> <li>Prueba en el navegador:</li> <li>Verifica que se muestre el nombre, edad y ciudad correctamente.</li> </ol>"},{"location":"activities/p1/#paso-4-pasar-un-objeto-como-prop","title":"Paso 4: Pasar un objeto como prop","text":"<ol> <li>Modifica <code>Usuario</code> para recibir un objeto:</li> <li>Actualiza <code>components/Usuario.jsx</code> para usar destructuring y recibir un objeto <code>usuario</code>:</li> </ol> <pre><code>'use client';\n\nimport React from 'react';\n\nfunction Usuario({ usuario }) {\n  return (\n    &lt;div className=\"bg-gray-100 p-4 m-2 rounded-lg\"&gt;\n      &lt;h2 className=\"text-xl font-bold\"&gt;Nombre: {usuario.nombre}&lt;/h2&gt;\n      &lt;p&gt;Edad: {usuario.edad} a\u00f1os&lt;/p&gt;\n      &lt;p&gt;Ciudad: {usuario.ciudad}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Usuario;\n</code></pre> <p>Explicaci\u00f3n:    - Usamos destructuring (<code>{ usuario }</code>) para acceder directamente al objeto <code>usuario</code>.    - Accedemos a las propiedades con <code>usuario.nombre</code>, <code>usuario.edad</code>, etc.</p> <ol> <li>Actualiza <code>page.js</code> para pasar un objeto:</li> <li>Modifica <code>app/page.js</code>:</li> </ol> <pre><code>import Usuario from '../components/Usuario';\n\nexport default function Home() {\n  const usuario = {\n    nombre: 'Ana Garc\u00eda',\n    edad: 25,\n    ciudad: 'Madrid',\n  };\n\n  return (\n    &lt;main className=\"container mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-4\"&gt;Actividad de Props en Next.js&lt;/h1&gt;\n      &lt;Usuario usuario={usuario} /&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n:    - Creamos un objeto <code>usuario</code> con las propiedades necesarias.    - Pasamos el objeto completo como una prop llamada <code>usuario</code>.</p> <ol> <li>Prueba en el navegador:</li> <li>El resultado debe ser id\u00e9ntico al paso anterior, pero usando un objeto.</li> </ol>"},{"location":"activities/p1/#paso-5-pasar-una-funcion-como-prop","title":"Paso 5: Pasar una funci\u00f3n como prop","text":"<ol> <li>A\u00f1ade un bot\u00f3n para saludar:</li> <li>Modifica <code>components/Usuario.jsx</code> para incluir un bot\u00f3n que ejecute una funci\u00f3n pasada como prop:</li> </ol> <pre><code>'use client';\n\nimport React from 'react';\n\nfunction Usuario({ usuario, saludar }) {\n  return (\n    &lt;div className=\"bg-gray-100 p-4 m-2 rounded-lg\"&gt;\n      &lt;h2 className=\"text-xl font-bold\"&gt;Nombre: {usuario.nombre}&lt;/h2&gt;\n      &lt;p&gt;Edad: {usuario.edad} a\u00f1os&lt;/p&gt;\n      &lt;p&gt;Ciudad: {usuario.ciudad}&lt;/p&gt;\n      &lt;button\n        className=\"bg-blue-500 text-white px-4 py-2 mt-2 rounded hover:bg-blue-600\"\n        onClick={() =&gt; saludar(usuario.nombre)}\n      &gt;\n        Saludar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Usuario;\n</code></pre> <p>Explicaci\u00f3n:    - A\u00f1adimos una prop <code>saludar</code> que ser\u00e1 una funci\u00f3n.    - Usamos un bot\u00f3n con <code>onClick</code> que ejecuta la funci\u00f3n <code>saludar</code> pasando el nombre del usuario.    - <code>'use client'</code> es necesario porque el evento <code>onClick</code> requiere interactividad del cliente.</p> <ol> <li>Define la funci\u00f3n en <code>page.js</code>:</li> <li>Actualiza <code>app/page.js</code>:</li> </ol> <pre><code>'use client';\n\nimport Usuario from '../components/Usuario';\n\nexport default function Home() {\n  const usuario = {\n    nombre: 'Ana Garc\u00eda',\n    edad: 25,\n    ciudad: 'Madrid',\n  };\n\n  const saludar = (nombre) =&gt; {\n    alert(`\u00a1Hola, ${nombre}!`);\n  };\n\n  return (\n    &lt;main className=\"container mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-4\"&gt;Actividad de Props en Next.js&lt;/h1&gt;\n      &lt;Usuario usuario={usuario} saludar={saludar} /&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n:    - A\u00f1adimos <code>'use client'</code> a <code>page.js</code> porque definimos una funci\u00f3n (<code>saludar</code>) que usa <code>alert</code>, una API del navegador.    - Pasamos la funci\u00f3n <code>saludar</code> como prop al componente <code>Usuario</code>.</p> <ol> <li>Prueba en el navegador:</li> <li>Haz clic en el bot\u00f3n \"Saludar\" y verifica que aparezca un <code>alert</code> con el mensaje \"\u00a1Hola, Ana Garc\u00eda!\".</li> </ol>"},{"location":"activities/p1/#paso-6-mostrar-multiples-usuarios","title":"Paso 6: Mostrar m\u00faltiples usuarios","text":"<ol> <li>Crea una lista de usuarios:</li> <li>Modifica <code>app/page.js</code> para renderizar m\u00faltiples componentes <code>Usuario</code> usando un array:</li> </ol> <pre><code>'use client';\n\nimport Usuario from '../components/Usuario';\n\nexport default function Home() {\n  const usuarios = [\n    { nombre: 'Ana Garc\u00eda', edad: 25, ciudad: 'Madrid' },\n    { nombre: 'Juan P\u00e9rez', edad: 30, ciudad: 'Barcelona' },\n    { nombre: 'Mar\u00eda L\u00f3pez', edad: 28, ciudad: 'Valencia' },\n  ];\n\n  const saludar = (nombre) =&gt; {\n    alert(`\u00a1Hola, ${nombre}!`);\n  };\n\n  return (\n    &lt;main className=\"container mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-4\"&gt;Actividad de Props en Next.js&lt;/h1&gt;\n      {usuarios.map((usuario, index) =&gt; (\n        &lt;Usuario key={index} usuario={usuario} saludar={saludar} /&gt;\n      ))}\n    &lt;/main&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n:    - Usamos <code>map</code> para iterar sobre el array <code>usuarios</code> y renderizar un componente <code>Usuario</code> por cada elemento.    - A\u00f1adimos la prop <code>key</code> para evitar advertencias de React (usamos <code>index</code> como clave, aunque en una aplicaci\u00f3n real deber\u00edas usar un identificador \u00fanico).</p> <ol> <li>Prueba en el navegador:</li> <li>Verifica que se muestren tres tarjetas de usuario con sus respectivos datos y botones de saludo.</li> </ol>"},{"location":"activities/p1/#paso-7-reflexion-y-buenas-practicas-en-nextjs","title":"Paso 7: Reflexi\u00f3n y buenas pr\u00e1cticas en Next.js","text":"<ul> <li>Props son de solo lectura: Al igual que en React, nunca modifiques las props directamente dentro de un componente.</li> <li>Componentes de cliente vs. servidor: En Next.js, usa <code>'use client'</code> para componentes que requieren interactividad (como eventos <code>onClick</code>). Los componentes de servidor no pueden usar props para funciones interactivas.</li> <li>Destructuring: Usar destructuring (<code>{ usuario, saludar }</code>) mejora la legibilidad.</li> <li>PropTypes (opcional): Para validar props, instala <code>prop-types</code> con <code>npm install prop-types</code> y actualiza <code>components/Usuario.jsx</code>:</li> </ul> <pre><code>'use client';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Usuario({ usuario, saludar }) {\n  return (\n    &lt;div className=\"bg-gray-100 p-4 m-2 rounded-lg\"&gt;\n      &lt;h2 className=\"text-xl font-bold\"&gt;Nombre: {usuario.nombre}&lt;/h2&gt;\n      &lt;p&gt;Edad: {usuario.edad} a\u00f1os&lt;/p&gt;\n      &lt;p&gt;Ciudad: {usuario.ciudad}&lt;/p&gt;\n      &lt;button\n        className=\"bg-blue-500 text-white px-4 py-2 mt-2 rounded hover:bg-blue-600\"\n        onClick={() =&gt; saludar(usuario.nombre)}\n      &gt;\n        Saludar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nUsuario.propTypes = {\n  usuario: PropTypes.shape({\n    nombre: PropTypes.string.isRequired,\n    edad: PropTypes.number.isRequired,\n    ciudad: PropTypes.string.isRequired,\n  }).isRequired,\n  saludar: PropTypes.func.isRequired,\n};\n\nexport default Usuario;\n</code></pre> <p>Explicaci\u00f3n:    - <code>PropTypes</code> valida que las props tengan el tipo y formato esperados.    - Si una prop falta o tiene un tipo incorrecto, aparecer\u00e1 una advertencia en la consola.</p> <ul> <li>Optimizaci\u00f3n en Next.js:</li> <li>Mant\u00e9n los componentes de servidor siempre que sea posible para mejorar el rendimiento (por ejemplo, si no necesitas interactividad, elimina <code>'use client'</code>).</li> <li>Usa la carpeta <code>app</code> para organizar rutas y la carpeta <code>components</code> para componentes reutilizables.</li> </ul>"},{"location":"activities/p2/","title":"Actividad Pr\u00e1ctica 2: Estilizado de Componentes en Next.js","text":""},{"location":"activities/p2/#instrucciones-iniciales","title":"Instrucciones Iniciales","text":""},{"location":"activities/p2/#fork-del-repositorio","title":"Fork del Repositorio","text":"<p>Antes de comenzar la actividad, debes realizar fork del repositorio donde trabajar\u00e1s:</p> <ol> <li> <p>Accede al repositorio base:</p> <ul> <li>Navega a: <code>https://github.com/jfinfosena/act_react_s2.git</code></li> <li>Examina la estructura del proyecto</li> <li>Lee el archivo README.md</li> </ul> </li> <li> <p>Realiza el Fork:</p> <ul> <li>Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha</li> <li>Selecciona tu cuenta personal como destino</li> <li>Espera a que se complete el proceso</li> </ul> </li> <li> <p>Clona tu fork localmente: <pre><code>git clone https://github.com/TU_USUARIO/act_react_s2.git\ncd act_react_s2\nnpm install\n</code></pre></p> </li> <li> <p>Verifica que el proyecto funciona: <pre><code>npm run dev\n</code></pre></p> </li> <li>Abre tu navegador en <code>http://localhost:3000</code></li> </ol>"},{"location":"activities/p2/#objetivo","title":"Objetivo","text":"<p>Aprender a aplicar diferentes m\u00e9todos de estilizado CSS en componentes de Next.js, incluyendo CSS Global, M\u00f3dulos CSS, Estilos en L\u00ednea y Tailwind CSS.</p>"},{"location":"activities/p2/#parte-1-css-global","title":"Parte 1: CSS Global","text":""},{"location":"activities/p2/#ejercicio-12-crear-componente-con-estilos-globales","title":"Ejercicio 1.2: Crear Componente con Estilos Globales","text":"<ol> <li> <p>Componente Tarjeta Global (<code>app/components/TarjetaGlobal.js</code>):</p> <ul> <li>Crear componente que reciba props: <code>titulo</code>, <code>contenido</code>, <code>color</code></li> <li>Usar clases CSS globales definidas en <code>globals.css</code></li> <li>Clases a crear: <code>.tarjeta-global</code>, <code>.titulo-global</code>, <code>.contenido-global</code></li> </ul> </li> <li> <p>Estilos en globals.css:</p> <ul> <li><code>.tarjeta-global</code>: borde, padding, border-radius, sombra</li> <li><code>.titulo-global</code>: tama\u00f1o de fuente, color, margin</li> <li><code>.contenido-global</code>: color de texto, line-height</li> <li>Incluir estados hover para interactividad</li> </ul> </li> </ol>"},{"location":"activities/p2/#parte-2-modulos-css","title":"Parte 2: M\u00f3dulos CSS","text":""},{"location":"activities/p2/#ejercicio-21-componente-con-css-modules","title":"Ejercicio 2.1: Componente con CSS Modules","text":"<ol> <li> <p>Crear componente Tarjeta con M\u00f3dulos:</p> <ul> <li>Crea <code>app/components/TarjetaModulo.js</code></li> <li>Crea <code>app/components/TarjetaModulo.module.css</code></li> <li>El componente debe recibir props: <code>nombre</code>, <code>descripcion</code>, <code>categoria</code></li> </ul> </li> <li> <p>Estilos en el m\u00f3dulo CSS:</p> <ul> <li>Clases: <code>tarjeta</code>, <code>encabezado</code>, <code>titulo</code>, <code>descripcion</code>, <code>categoria</code></li> <li>Cada clase debe tener estilos espec\u00edficos y \u00fanicos    </li> <li>Agregar transiciones suaves para hover</li> </ul> </li> </ol>"},{"location":"activities/p2/#ejercicio-22-multiples-variantes-con-modulos","title":"Ejercicio 2.2: M\u00faltiples Variantes con M\u00f3dulos","text":"<ol> <li> <p>Crear variantes de tarjetas:</p> <ul> <li>Implementar clases: <code>tarjetaPrimaria</code>, <code>tarjetaSecundaria</code>, <code>tarjetaExito</code></li> <li>Cada variante con esquema de colores diferente</li> <li>Usar composici\u00f3n de clases en el componente</li> </ul> </li> </ol>"},{"location":"activities/p2/#parte-3-estilos-en-linea","title":"Parte 3: Estilos en L\u00ednea","text":""},{"location":"activities/p2/#ejercicio-31-componente-con-estilos-dinamicos","title":"Ejercicio 3.1: Componente con Estilos Din\u00e1micos","text":"<ol> <li> <p>Crear TarjetaDinamica (<code>app/components/TarjetaDinamica.js</code>):</p> <ul> <li>Recibir props: <code>titulo</code>, <code>contenido</code>, <code>colorFondo</code>, <code>colorTexto</code>, <code>ancho</code></li> <li>Aplicar estilos en l\u00ednea usando el objeto <code>style</code></li> <li>Los estilos deben ser completamente din\u00e1micos basados en props</li> </ul> </li> <li> <p>Funcionalidad requerida:</p> <ul> <li>Cambio de color de fondo seg\u00fan prop <code>colorFondo</code></li> <li>Cambio de color de texto seg\u00fan prop <code>colorTexto</code></li> <li>Ancho variable seg\u00fan prop <code>ancho</code></li> <li>Padding y margin fijos en el objeto style</li> </ul> </li> </ol>"},{"location":"activities/p2/#ejercicio-32-estilos-condicionales-en-linea","title":"Ejercicio 3.2: Estilos Condicionales en L\u00ednea","text":"<ol> <li> <p>Implementar estados visuales:</p> <ul> <li>Agregar prop <code>activo</code> (boolean)</li> <li>Cambiar estilos cuando <code>activo</code> es true/false</li> <li>Usar operador ternario para estilos condicionales</li> </ul> </li> </ol>"},{"location":"activities/p2/#parte-4-tailwind-css","title":"Parte 4: Tailwind CSS","text":""},{"location":"activities/p2/#ejercicio-41-componente-con-tailwind-css","title":"Ejercicio 4.1: Componente con Tailwind CSS","text":"<ol> <li> <p>Crear TarjetaTailwind (<code>app/components/TarjetaTailwind.js</code>):</p> <ul> <li>Usar solo clases de Tailwind para el estilizado</li> <li>Recibir props: <code>titulo</code>, <code>descripcion</code>, <code>imagen</code>, <code>etiqueta</code></li> <li>Implementar dise\u00f1o tipo card moderno</li> </ul> </li> <li> <p>Clases de Tailwind a utilizar:</p> <ul> <li>Layout: <code>flex</code>, <code>flex-col</code>, <code>p-4</code>, <code>m-2</code>, <code>w-64</code></li> <li>Colores: <code>bg-white</code>, <code>text-gray-800</code>, <code>border-gray-200</code></li> <li>Efectos: <code>shadow-lg</code>, <code>rounded-lg</code>, <code>hover:shadow-xl</code></li> <li>Transiciones: <code>transition-all</code>, <code>duration-300</code></li> </ul> </li> </ol>"},{"location":"activities/p2/#parte-5-integracion-y-comparacion","title":"Parte 5: Integraci\u00f3n y Comparaci\u00f3n","text":""},{"location":"activities/p2/#ejercicio-51-pagina-de-demostracion","title":"Ejercicio 5.1: P\u00e1gina de Demostraci\u00f3n","text":"<ol> <li> <p>Crear p\u00e1gina principal (<code>app/page.js</code>):</p> <ul> <li>Mostrar los 4 tipos de tarjetas creadas</li> <li>Cada tarjeta debe demostrar su m\u00e9todo de estilizado</li> <li>Incluir t\u00edtulo descriptivo para cada secci\u00f3n</li> </ul> </li> </ol>"},{"location":"activities/p3/","title":"Actividad Pr\u00e1ctica 3: Enrutamiento en Next.js 13+ (App Router)","text":""},{"location":"activities/p3/#instrucciones-iniciales","title":"Instrucciones Iniciales","text":""},{"location":"activities/p3/#fork-del-repositorio","title":"Fork del Repositorio","text":"<p>Antes de comenzar la actividad, debes realizar fork del repositorio donde trabajar\u00e1s:</p> <ol> <li> <p>Accede al repositorio base:</p> <ul> <li>Navega a: <code>https://github.com/jfinfosena/act_react_s3.git</code></li> <li>Examina la estructura del proyecto</li> <li>Lee el archivo README.md</li> </ul> </li> <li> <p>Realiza el Fork:</p> <ul> <li>Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha</li> <li>Selecciona tu cuenta personal como destino</li> <li>Espera a que se complete el proceso</li> </ul> </li> <li> <p>Clona tu fork localmente: <pre><code>git clone https://github.com/TU_USUARIO/act_react_s3.git\ncd act_react_s3\nnpm install\n</code></pre></p> </li> <li> <p>Verifica que el proyecto funciona: <pre><code>npm run dev\n</code></pre></p> </li> <li>Abre tu navegador en <code>http://localhost:3000</code></li> </ol>"},{"location":"activities/p3/#objetivo","title":"Objetivo","text":"<p>Aprender a implementar y manejar el sistema de enrutamiento en Next.js 13+ utilizando el App Router, creando rutas b\u00e1sicas, din\u00e1micas, layouts y navegaci\u00f3n.</p>"},{"location":"activities/p3/#parte-1-estructura-basica-del-app-router","title":"Parte 1: Estructura B\u00e1sica del App Router","text":""},{"location":"activities/p3/#ejercicio-11-crear-la-pagina-de-inicio","title":"Ejercicio 1.1: Crear la P\u00e1gina de Inicio","text":"<ol> <li> <p>Crear el layout ra\u00edz:</p> <ul> <li>Crea el archivo <code>app/layout.js</code></li> <li>Implementa un layout que incluya:<ul> <li>Estructura HTML b\u00e1sica con <code>&lt;html&gt;</code> y <code>&lt;body&gt;</code></li> <li>Navegaci\u00f3n simple con enlaces: Inicio, Productos, Blog, Contacto</li> <li>Usar componente <code>Link</code> de Next.js para todos los enlaces    </li> </ul> </li> </ul> </li> <li> <p>P\u00e1gina de inicio (<code>app/page.js</code>):</p> <ul> <li>T\u00edtulo: \"P\u00e1gina de Inicio\"</li> <li>P\u00e1rrafo de bienvenida simple</li> <li>Enlaces a las dem\u00e1s secciones usando componente <code>Link</code></li> </ul> </li> </ol>"},{"location":"activities/p3/#ejercicio-12-crear-rutas-basicas","title":"Ejercicio 1.2: Crear Rutas B\u00e1sicas","text":"<ol> <li> <p>P\u00e1gina de Productos (<code>app/productos/page.js</code>):</p> <ul> <li>T\u00edtulo: \"Productos\"</li> <li>Lista simple de 3 productos: Laptop, Smartphone, Tablet</li> <li>Cada producto como enlace a su p\u00e1gina individual usando <code>Link</code></li> </ul> </li> <li> <p>P\u00e1gina de Blog (<code>app/blog/page.js</code>):</p> <ul> <li>T\u00edtulo: \"Blog\"</li> <li>Lista de 3 art\u00edculos con t\u00edtulos simples</li> <li>Cada art\u00edculo como enlace a su p\u00e1gina individual usando <code>Link</code></li> </ul> </li> <li> <p>P\u00e1gina de Contacto (<code>app/contacto/page.js</code>):</p> <ul> <li>T\u00edtulo: \"Contacto\"</li> <li>Informaci\u00f3n b\u00e1sica de contacto (texto simple)</li> <li>Sin formularios complejos</li> </ul> </li> </ol>"},{"location":"activities/p3/#parte-2-layouts-anidados","title":"Parte 2: Layouts Anidados","text":""},{"location":"activities/p3/#ejercicio-21-layout-para-productos","title":"Ejercicio 2.1: Layout para Productos","text":"<ol> <li> <p>Layout de productos (<code>app/productos/layout.js</code>):</p> <ul> <li>T\u00edtulo: \"Secci\u00f3n de Productos\"</li> <li>Navegaci\u00f3n secundaria simple con enlaces a categor\u00edas</li> <li>\u00c1rea para el contenido ({children})</li> </ul> </li> <li> <p>P\u00e1ginas de categor\u00edas:</p> <ul> <li><code>app/productos/electronicos/page.js</code>: mostrar 3 productos electr\u00f3nicos espec\u00edficos</li> <li><code>app/productos/ropa/page.js</code>: mostrar 3 productos de ropa espec\u00edficos</li> <li>Cada p\u00e1gina debe tener t\u00edtulo \"Productos &gt; [Categor\u00eda]\"</li> <li>Mostrar contador: \"X productos encontrados\"</li> </ul> </li> </ol>"},{"location":"activities/p3/#ejercicio-22-layout-para-blog","title":"Ejercicio 2.2: Layout para Blog","text":"<ol> <li> <p>Layout de blog (<code>app/blog/layout.js</code>):</p> <ul> <li>T\u00edtulo: \"Secci\u00f3n de Blog\"</li> <li>Navegaci\u00f3n secundaria simple</li> <li>\u00c1rea para el contenido ({children})</li> </ul> </li> </ol>"},{"location":"activities/p3/#parte-3-rutas-dinamicas","title":"Parte 3: Rutas Din\u00e1micas","text":""},{"location":"activities/p3/#ejercicio-31-paginas-de-producto-individual","title":"Ejercicio 3.1: P\u00e1ginas de Producto Individual","text":"<ol> <li> <p>Crear ruta din\u00e1mica:</p> <ul> <li>Crea <code>app/productos/[id]/page.js</code></li> <li>El componente debe:<ul> <li>Recibir el par\u00e1metro <code>id</code> desde <code>params</code></li> <li>Mostrar t\u00edtulo: \"Producto: [id]\"</li> <li>Descripci\u00f3n simple del producto</li> <li>Enlace para volver a la lista de productos</li> </ul> </li> </ul> </li> <li> <p>Enlaces din\u00e1micos en la p\u00e1gina de productos:</p> <ul> <li>Modifica <code>app/productos/page.js</code> para que cada producto sea clickeable</li> <li>Usar componente <code>Link</code> de Next.js para navegaci\u00f3n</li> <li>IDs espec\u00edficos a usar: \"1\", \"2\", \"3\"</li> <li>El enlace debe mostrar el nombre del producto como texto</li> </ul> </li> </ol>"},{"location":"activities/p3/#ejercicio-32-articulos-de-blog-dinamicos","title":"Ejercicio 3.2: Art\u00edculos de Blog Din\u00e1micos","text":"<ol> <li> <p>P\u00e1gina de art\u00edculo individual (<code>app/blog/[slug]/page.js</code>):</p> <ul> <li>Debe recibir y usar el par\u00e1metro <code>params.slug</code></li> <li>Mostrar t\u00edtulo: \"Art\u00edculo: [slug]\"</li> <li>Contenido simple del art\u00edculo</li> <li>Enlace para volver a la lista de art\u00edculos</li> </ul> </li> <li> <p>Enlaces a art\u00edculos desde la p\u00e1gina principal:</p> <ul> <li>Modifica <code>app/blog/page.js</code> para que cada art\u00edculo sea clickeable</li> <li>Slugs espec\u00edficos a usar: \"introduccion-nextjs\", \"react-server-components\", \"app-router-guia\"</li> <li>Usar componente <code>Link</code> para navegaci\u00f3n</li> </ul> </li> </ol>"},{"location":"activities/p3/#parte-4-rutas-de-captura-total","title":"Parte 4: Rutas de Captura Total","text":""},{"location":"activities/p3/#ejercicio-41-sistema-de-documentacion","title":"Ejercicio 4.1: Sistema de Documentaci\u00f3n","text":"<ol> <li> <p>Ruta catch-all (<code>app/docs/[...slug]/page.js</code>):</p> <ul> <li>Debe manejar el par\u00e1metro <code>params.slug</code> como array</li> <li>Mostrar los segmentos capturados en la p\u00e1gina</li> <li>T\u00edtulo: \"Documentaci\u00f3n: [segmentos]\"</li> <li>Rutas de ejemplo: <code>/docs/guia/instalacion</code>, <code>/docs/api/componentes</code></li> </ul> </li> <li> <p>Sistema de breadcrumbs:</p> <ul> <li>Mostrar navegaci\u00f3n: \"Docs &gt; Secci\u00f3n1 &gt; Secci\u00f3n2 &gt; ...\"</li> <li>Formato simple con separador \" &gt; \"</li> <li>Solo mostrar texto, sin enlaces complejos</li> </ul> </li> </ol> <p>Especificaciones para la p\u00e1gina de documentaci\u00f3n:</p> <ul> <li>Debe manejar el par\u00e1metro <code>params.slug</code> como array</li> <li>Crear breadcrumbs simples: \"Docs &gt; Secci\u00f3n1 &gt; Secci\u00f3n2 &gt; ...\"</li> <li>Mostrar contenido b\u00e1sico basado en la ruta</li> <li>Incluir t\u00edtulo principal que refleje la secci\u00f3n actual</li> <li>Manejar el caso cuando slug est\u00e1 vac\u00edo (p\u00e1gina principal de docs)</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"content/curso/","title":"Estructura del Curso: React B\u00e1sico (10 Clases x 6 horas)","text":"<p>Clase 1: Introducci\u00f3n a React y Configuraci\u00f3n del Entorno (6 horas)</p> <ul> <li>Bloque 1 (1.5h):<ul> <li>\u00bfQu\u00e9 es React? \u00bfPor qu\u00e9 usarlo? Conceptos clave (SPAs vs MPAs, Virtual DOM).</li> <li>Alternativas a React (Angular, Vue) - Breve comparaci\u00f3n.</li> <li>Prerrequisitos del curso (Node.js, npm/yarn/pnpm, editor de c\u00f3digo).</li> <li>Instalaci\u00f3n de Node.js y gestor de paquetes.</li> </ul> </li> <li>Bloque 2 (1.5h):<ul> <li>Configuraci\u00f3n del proyecto: Uso de Vite (recomendado) o Create React App.</li> <li>Estructura b\u00e1sica de un proyecto React generado.</li> <li>Archivos principales (<code>index.html</code>, <code>main.jsx</code>/<code>index.js</code>, <code>App.jsx</code>/<code>App.js</code>).</li> <li>Arrancar la aplicaci\u00f3n de desarrollo.</li> </ul> </li> <li>Bloque 3 (1.5h):<ul> <li>Tu primer componente: \"Hello World\".</li> <li>Entendiendo JSX: Sintaxis, reglas (un solo elemento ra\u00edz, <code>className</code>, <code>{}</code>).</li> <li>Incrustar expresiones JavaScript en JSX.</li> <li>Diferencias entre JSX y HTML.</li> </ul> </li> <li>Bloque 4 (1.5h):<ul> <li>Renderizado de elementos en el DOM (<code>ReactDOM.createRoot().render()</code>).</li> <li>Ejercicios pr\u00e1cticos: Crear y renderizar varios componentes b\u00e1sicos, practicar sintaxis JSX.</li> <li>Sesi\u00f3n de preguntas y respuestas.</li> </ul> </li> </ul> <p>Clase 2: Componentes y Propiedades (Props) (6 horas)</p> <ul> <li>Bloque 1 (1.5h):<ul> <li>\u00bfQu\u00e9 es un componente en React? Tipos de componentes (Funcionales vs Clases - enfoque en Funcionales).</li> <li>Creaci\u00f3n de componentes funcionales.</li> <li>Importaci\u00f3n y exportaci\u00f3n de componentes.</li> </ul> </li> <li>Bloque 2 (1.5h):<ul> <li>Composici\u00f3n de componentes: Anidar componentes.</li> <li>Propiedades (Props): Concepto y prop\u00f3sito.</li> <li>Pasar datos de un componente padre a un componente hijo a trav\u00e9s de props.</li> </ul> </li> <li>Bloque 3 (1.5h):<ul> <li>Destructuring de props.</li> <li><code>props.children</code>: Renderizar contenido anidado.</li> <li>Valores por defecto para las props.</li> <li>Validaci\u00f3n b\u00e1sica de props (usando PropTypes - opcional pero \u00fatil).</li> </ul> </li> <li>Bloque 4 (1.5h):<ul> <li>Ejercicios pr\u00e1cticos: Crear una estructura de componentes (ej. Layout b\u00e1sico, Card con t\u00edtulo y descripci\u00f3n pasados por props).</li> <li>Sesi\u00f3n de preguntas y respuestas.</li> </ul> </li> </ul> <p>Clase 3: Estado (State) con el Hook <code>useState</code> (6 horas)</p> <ul> <li>Bloque 1 (1.5h):<ul> <li>\u00bfQu\u00e9 es el estado en React? \u00bfPor qu\u00e9 es necesario?</li> <li>El Hook <code>useState</code>: Introducci\u00f3n y sintaxis.</li> <li>Declarar una variable de estado y su funci\u00f3n actualizadora.</li> </ul> </li> <li>Bloque 2 (1.5h):<ul> <li>Actualizar el estado: Uso de la funci\u00f3n actualizadora.</li> <li>Entendiendo la inmutabilidad del estado (objetos y arrays).</li> <li>C\u00f3mo actualizar correctamente objetos y arrays en el estado.</li> </ul> </li> <li>Bloque 3 (1.5h):<ul> <li>M\u00faltiples variables de estado en un componente.</li> <li>Actualizaciones de estado basadas en el estado previo (usando un callback en el setter).</li> </ul> </li> <li>Bloque 4 (1.5h):<ul> <li>Ejercicios pr\u00e1cticos: Crear componentes interactivos (ej. Contador simple, Toggle button, Mostrar/Ocultar un elemento).</li> <li>Sesi\u00f3n de preguntas y respuestas.</li> </ul> </li> </ul> <p>Clase 4: Manejo de Eventos (6 horas)</p> <ul> <li>Bloque 1 (1.5h):<ul> <li>Manejo de eventos en React (eventos sint\u00e9ticos).</li> <li>Diferencias con el manejo de eventos nativo de JavaScript.</li> <li>Eventos comunes: <code>onClick</code>, <code>onChange</code>, <code>onSubmit</code>.</li> </ul> </li> <li>Bloque 2 (1.5h):<ul> <li>Funciones manejadoras de eventos: C\u00f3mo definirlas.</li> <li>Pasar argumentos a las funciones manejadoras de eventos.</li> <li>Acceder al objeto del evento (<code>event</code>).</li> </ul> </li> <li>Bloque 3 (1.5h):<ul> <li>Combinar manejo de eventos con estado: Cambiar el estado en respuesta a una interacci\u00f3n del usuario.</li> <li>Prevenir el comportamiento por defecto del navegador (<code>event.preventDefault()</code>).</li> </ul> </li> <li>Bloque 4 (1.5h):<ul> <li>Ejercicios pr\u00e1cticos: Crear botones que cambian el estado, elementos clickeables, interacci\u00f3n b\u00e1sica entre componentes padre/hijo a trav\u00e9s de funciones pasadas como props.</li> <li>Sesi\u00f3n de preguntas y respuestas.</li> </ul> </li> </ul> <p>Clase 5: Renderizado Condicional y de Listas (6 horas)</p> <ul> <li>Bloque 1 (1.5h):<ul> <li>Renderizado condicional: Mostrar u ocultar elementos basado en condiciones.</li> <li>T\u00e9cnicas: <code>if</code>/<code>else</code> (fuera del return), operador ternario (<code>condition ? true : false</code>), operador l\u00f3gico <code>&amp;&amp;</code>.</li> </ul> </li> <li>Bloque 2 (1.5h):<ul> <li>Renderizado de listas de elementos.</li> <li>Uso del m\u00e9todo <code>map()</code> de arrays en JSX.</li> <li>Renderizar una lista de componentes.</li> </ul> </li> <li>Bloque 3 (1.5h):<ul> <li>La prop <code>key</code>: Por qu\u00e9 es necesaria y c\u00f3mo usarla correctamente.</li> <li>Reglas para elegir una buena <code>key</code>.</li> <li>Ejemplos de renderizado condicional dentro de listas.</li> </ul> </li> <li>Bloque 4 (1.5h):<ul> <li>Ejercicios pr\u00e1cticos: Mostrar diferentes mensajes seg\u00fan el estado, renderizar una lista de \u00edtems (ej. lista de tareas, lista de productos), filtrar \u00edtems en una lista usando renderizado condicional.</li> <li>Sesi\u00f3n de preguntas y respuestas.</li> </ul> </li> </ul> <p>Clase 6: Trabajando con Formularios Controlados (6 horas)</p> <ul> <li>Bloque 1 (1.5h):<ul> <li>Formularios en HTML vs Formularios en React.</li> <li>Componentes controlados vs no controlados (enfoque en controlados).</li> <li>\u00bfQu\u00e9 es un componente controlado?</li> </ul> </li> <li>Bloque 2 (1.5h):<ul> <li>Capturar el valor de un campo de entrada (<code>&lt;input&gt;</code>).</li> <li>Manejar el estado de un solo campo de entrada.</li> <li>Sincronizar el valor del input con el estado.</li> </ul> </li> <li>Bloque 3 (1.5h):<ul> <li>Manejar m\u00faltiples campos de entrada (ej. usando un objeto en el estado).</li> <li>Manejar otros tipos de entrada: <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>, <code>&lt;input type=\"checkbox\"&gt;</code>, <code>&lt;input type=\"radio\"&gt;</code>.</li> </ul> </li> <li>Bloque 4 (1.5h):<ul> <li>Manejo del env\u00edo del formulario (<code>onSubmit</code>).</li> <li>Validaci\u00f3n b\u00e1sica del formulario (client-side).</li> <li>Ejercicios pr\u00e1cticos: Crear un formulario de registro o contacto sencillo que capture los datos y los muestre/loguee al enviarlo.</li> <li>Sesi\u00f3n de preguntas y respuestas.</li> </ul> </li> </ul> <p>Clase 7: Efectos Secundarios con el Hook <code>useEffect</code> (6 horas)</p> <ul> <li>Bloque 1 (1.5h):<ul> <li>\u00bfQu\u00e9 son los efectos secundarios? (Data fetching, suscripciones, manipulaci\u00f3n manual del DOM, timers).</li> <li>El Hook <code>useEffect</code>: Prop\u00f3sito y sintaxis b\u00e1sica.</li> <li>Cu\u00e1ndo y por qu\u00e9 usar <code>useEffect</code>.</li> </ul> </li> <li>Bloque 2 (1.5h):<ul> <li>El array de dependencias de <code>useEffect</code>.</li> <li>Efecto que se ejecuta solo al montar el componente (array vac\u00edo <code>[]</code>).</li> <li>Efecto que se ejecuta en cada renderizado (sin array de dependencias - generalmente no recomendado).</li> </ul> </li> <li>Bloque 3 (1.5h):<ul> <li>Efecto que se ejecuta cuando cambian ciertas dependencias (array con variables).</li> <li>Funci\u00f3n de limpieza (cleanup function): \u00bfCu\u00e1ndo y c\u00f3mo usarla? (ej. limpiar timers, cancelar suscripciones).</li> </ul> </li> <li>Bloque 4 (1.5h):<ul> <li>Ejercicios pr\u00e1cticos: Usar <code>useEffect</code> para cambiar el t\u00edtulo de la p\u00e1gina, configurar/limpiar un timer, loguear el estado o props cuando cambian.</li> <li>Sesi\u00f3n de preguntas y respuestas.</li> </ul> </li> </ul> <p>Clase 8: Peticiones HTTP (Data Fetching) (6 horas)</p> <ul> <li>Bloque 1 (1.5h):<ul> <li>\u00bfC\u00f3mo obtener datos de una API en React?</li> <li>Realizar peticiones HTTP con la API nativa <code>fetch</code>.</li> <li>Alternativas: Librer\u00edas como Axios (breve menci\u00f3n).</li> </ul> </li> <li>Bloque 2 (1.5h):<ul> <li>Integrar peticiones HTTP con <code>useEffect</code>.</li> <li>Manejar el estado de \"carga\" (loading).</li> <li>Manejar el estado de \"error\".</li> </ul> </li> <li>Bloque 3 (1.5h):<ul> <li>Mostrar los datos obtenidos (usando renderizado de listas y condicional).</li> <li>Ejemplo pr\u00e1ctico: Obtener una lista de posts, usuarios o productos de una API p\u00fablica (ej. JSONPlaceholder).</li> </ul> </li> <li>Bloque 4 (1.5h):<ul> <li>Ejercicios pr\u00e1cticos: Construir un componente que fetchea datos de una API y los muestra, a\u00f1adir indicadores de carga y mensajes de error.</li> <li>Sesi\u00f3n de preguntas y respuestas.</li> </ul> </li> </ul> <p>Clase 9: Construcci\u00f3n de un Proyecto Peque\u00f1o (Parte 1) (6 horas)</p> <ul> <li>Bloque 1 (1.5h):<ul> <li>Introducci\u00f3n al proyecto: Definir un proyecto sencillo que integre la mayor\u00eda de los conceptos aprendidos (ej. una lista de tareas To-Do, una galer\u00eda de im\u00e1genes con b\u00fasqueda, un listado de productos simple con filtro). Elegir uno y definir el alcance.</li> <li>Dise\u00f1o de la estructura de componentes para el proyecto.</li> </ul> </li> <li>Bloque 2 (1.5h):<ul> <li>Configuraci\u00f3n inicial del proyecto.</li> <li>Implementar los componentes base (Layout, Input para a\u00f1adir, Lista para mostrar).</li> <li>Establecer el estado inicial de la aplicaci\u00f3n.</li> </ul> </li> <li>Bloque 3 (1.5h):<ul> <li>Implementar la funcionalidad principal (ej. a\u00f1adir una nueva tarea a la lista, mostrar los \u00edtems).</li> <li>Manejo del estado principal de la aplicaci\u00f3n.</li> <li>Paso de datos y funciones entre componentes padre e hijo.</li> </ul> </li> <li>Bloque 4 (1.5h):<ul> <li>Ejercicios pr\u00e1cticos: Trabajar en la implementaci\u00f3n del proyecto bajo supervisi\u00f3n.</li> <li>Resoluci\u00f3n de problemas comunes.</li> </ul> </li> </ul> <p>Clase 10: Construcci\u00f3n de un Proyecto Peque\u00f1o (Parte 2) y Pr\u00f3ximos Pasos (6 horas)</p> <ul> <li>Bloque 1 (1.5h):<ul> <li>Continuar la implementaci\u00f3n del proyecto.</li> <li>A\u00f1adir funcionalidades adicionales (ej. marcar tarea como completada, eliminar tarea, aplicar filtros, buscar).</li> <li>Refactorizaci\u00f3n b\u00e1sica del c\u00f3digo.</li> </ul> </li> <li>Bloque 2 (1.5h):<ul> <li>Posiblemente: Persistencia b\u00e1sica de datos (ej. usando <code>localStorage</code> - opcional si hay tiempo).</li> <li>Repaso general de los conceptos clave del curso (Componentes, Props, State, Events, Conditional/List Rendering, useEffect, Data Fetching).</li> </ul> </li> <li>Bloque 3 (1.5h):<ul> <li>Pr\u00f3ximos pasos en el aprendizaje de React:<ul> <li>React Router (navegaci\u00f3n entre p\u00e1ginas).</li> <li>Context API o Redux (gesti\u00f3n de estado global).</li> <li>M\u00e1s Hooks personalizados.</li> <li>Testing en React.</li> <li>Estilizaci\u00f3n avanzada (CSS Modules, Styled Components, Tailwind CSS).</li> <li>Despliegue de aplicaciones React.</li> </ul> </li> </ul> </li> <li>Bloque 4 (1.5h):<ul> <li>Sesi\u00f3n final de preguntas y respuestas.</li> <li>Presentaci\u00f3n o revisi\u00f3n de los proyectos completados por los estudiantes (si aplica).</li> <li>Recursos adicionales para seguir aprendiendo.</li> <li>Cierre del curso.</li> </ul> </li> </ul> <p>Crear un proyecto React desde cero requiere configurar muchas herramientas (Babel, Webpack, etc.). Afortunadamente, existen herramientas que nos preparan un proyecto base listo para usar:</p> <ul> <li>Create React App (CRA): Fue el est\u00e1ndar por mucho tiempo, muy fiable pero a veces lento.</li> <li>Vite: \u00a1La opci\u00f3n moderna y recomendada! Es extremadamente r\u00e1pido para iniciar el servidor de desarrollo y actualizar los cambios en tu c\u00f3digo gracias a tecnolog\u00edas como esbuild y los m\u00f3dulos ES nativos. Usaremos Vite.</li> </ul>"},{"location":"content/curso/#22-creando-el-proyecto-con-vite","title":"2.2. Creando el Proyecto con Vite","text":"<ol> <li>Abre tu terminal.</li> <li>Navega (usando <code>cd</code>) a la carpeta donde quieras guardar tus proyectos.</li> <li> <p>Ejecuta el siguiente comando (reemplaza <code>nombre-de-mi-app</code> con el nombre que quieras darle a tu proyecto):     <pre><code>npm create vite@latest nombre-de-mi-app --template react\n</code></pre></p> <ul> <li><code>npm create vite@latest</code>: Usa npm para ejecutar la \u00faltima versi\u00f3n del creador de proyectos Vite.</li> <li><code>nombre-de-mi-app</code>: El nombre de la carpeta (y proyecto) que se crear\u00e1.</li> <li><code>--template react</code>: Le dice a Vite que queremos una plantilla configurada para React (con JavaScript).</li> </ul> </li> <li> <p>Vite podr\u00eda hacerte preguntas (si no pusiste el nombre antes, o para elegir framework/variante \u2013 aseg\u00farate de elegir <code>React</code> y <code>JavaScript</code>).</p> </li> <li>Sigue las instrucciones que Vite te mostrar\u00e1 al final:     <pre><code>cd nombre-de-mi-app   # Entra a la carpeta del proyecto\nnpm install           # Instala las dependencias (React, etc.)\nnpm run dev           # \u00a1Arranca la aplicaci\u00f3n!\n</code></pre></li> </ol>"},{"location":"content/curso/#23-explorando-la-estructura-del-proyecto","title":"2.3. Explorando la Estructura del Proyecto","text":"<p>Abre la carpeta de tu proyecto (<code>nombre-de-mi-app</code>) en tu editor de c\u00f3digo (en VS Code, puedes escribir <code>code .</code> en la terminal dentro de la carpeta). Ver\u00e1s algo as\u00ed:</p> <ul> <li><code>node_modules/</code>: Carpeta con todas las librer\u00edas instaladas por <code>npm install</code>. \u00a1No la toques!</li> <li><code>public/</code>: Archivos est\u00e1ticos (como el favicon) que se copian directamente.</li> <li><code>src/</code>: \u00a1Aqu\u00ed vivir\u00e1s! Contiene tu c\u00f3digo fuente React (componentes, CSS, etc.).</li> <li><code>.gitignore</code>: Le dice a Git qu\u00e9 archivos ignorar (importante: <code>node_modules</code>).</li> <li><code>index.html</code>: El \u00fanico archivo HTML. Tu aplicaci\u00f3n React se \"montar\u00e1\" dentro del <code>&lt;div id=\"root\"&gt;</code> que hay aqu\u00ed.</li> <li><code>package.json</code>: Define tu proyecto: nombre, versi\u00f3n, scripts (como <code>dev</code>, <code>build</code>), y dependencias (las librer\u00edas que usa tu proyecto).</li> <li><code>package-lock.json</code>: Fija las versiones exactas de las dependencias instaladas.</li> <li><code>vite.config.js</code>: Configuraci\u00f3n espec\u00edfica de Vite (puedes ignorarla por ahora).</li> </ul>"},{"location":"content/curso/#24-archivos-clave-en-src","title":"2.4. Archivos Clave en <code>src/</code>","text":"<ul> <li><code>main.jsx</code>: El punto de entrada de tu aplicaci\u00f3n. Importa React, ReactDOM, tu componente principal (<code>App</code>), y le dice a ReactDOM d\u00f3nde renderizar tu aplicaci\u00f3n en el <code>index.html</code>. La extensi\u00f3n <code>.jsx</code> significa que contiene c\u00f3digo JSX.</li> <li><code>App.jsx</code>: Tu primer componente React. Es el componente ra\u00edz que se renderiza inicialmente. Aqu\u00ed empezar\u00e1s a construir tu interfaz.</li> <li><code>index.css</code>: Un archivo CSS para estilos globales b\u00e1sicos.</li> <li><code>assets/</code>: Una carpeta para guardar im\u00e1genes u otros recursos que importes en tus componentes.</li> </ul>"},{"location":"content/curso/#25-arrancando-la-aplicacion","title":"2.5. \u00a1Arrancando la Aplicaci\u00f3n!","text":"<ol> <li>Aseg\u00farate de estar en la carpeta ra\u00edz de tu proyecto en la terminal.</li> <li>Si no lo hiciste antes, instala las dependencias:     <pre><code>npm install\n</code></pre></li> <li>Ejecuta el servidor de desarrollo:     <pre><code>npm run dev\n</code></pre></li> <li>Vite iniciar\u00e1 un servidor local (probablemente en <code>http://localhost:5173</code> o similar) y deber\u00eda abrir tu navegador autom\u00e1ticamente en esa direcci\u00f3n. Ver\u00e1s la p\u00e1gina de bienvenida de React + Vite.</li> <li>\u00a1Felicidades! Tu entorno de desarrollo React est\u00e1 funcionando. Mant\u00e9n esta terminal abierta; detectar\u00e1 cambios en tu c\u00f3digo y actualizar\u00e1 el navegador autom\u00e1ticamente (Hot Module Replacement - HMR).</li> </ol>"},{"location":"content/curso/#3-jsx-escribiendo-ui-en-react","title":"3. JSX: Escribiendo UI en React","text":""},{"location":"content/curso/#31-tu-primer-componente-hola-mundo","title":"3.1. Tu Primer Componente: \"Hola Mundo\"","text":"<ol> <li>Abre el archivo <code>src/App.jsx</code> en tu editor.</li> <li>Ver\u00e1s una funci\u00f3n llamada <code>App</code> que devuelve una estructura que parece HTML. \u00a1Eso es JSX!</li> <li>Vamos a simplificarlo. Borra todo el contenido dentro del <code>return (...)</code> y reempl\u00e1zalo por esto:     <pre><code>import './App.css' // Puedes mantener o quitar los imports no usados por ahora\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;\u00a1Hola, Mundo React!&lt;/h1&gt;\n      &lt;p&gt;Mi primera aplicaci\u00f3n React est\u00e1 funcionando.&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre></li> <li>Guarda el archivo. \u00a1Mira c\u00f3mo tu navegador se actualiza solo mostrando tu nuevo mensaje!</li> </ol>"},{"location":"content/curso/#32-que-es-jsx-javascript-xml","title":"3.2. \u00bfQu\u00e9 es JSX? (JavaScript XML)","text":"<ul> <li>JSX es una extensi\u00f3n de sintaxis para JavaScript que te permite escribir estructuras similares a HTML dentro de tu c\u00f3digo JavaScript.</li> <li>No es HTML real, ni tampoco una simple cadena de texto.</li> <li>\u00bfPor qu\u00e9 usarlo? Hace que definir la estructura de tus componentes sea muy visual e intuitivo.</li> <li>Transpilaci\u00f3n: El navegador no entiende JSX directamente. Herramientas como Babel (que Vite usa internamente) lo convierten en llamadas a funciones <code>React.createElement()</code> que el navegador s\u00ed entiende. No necesitas preocuparte por <code>createElement</code> ahora, solo saber que JSX es una forma m\u00e1s c\u00f3moda de escribirlo.</li> </ul>"},{"location":"content/curso/#33-reglas-fundamentales-de-jsx","title":"3.3. Reglas Fundamentales de JSX","text":"<ol> <li>Devolver un Solo Elemento Ra\u00edz: Un componente siempre debe devolver un \u00fanico elemento JSX. Si necesitas devolver varios elementos juntos, envu\u00e9lvelos en una etiqueta contenedora (como <code>&lt;div&gt;</code>) o usa un Fragmento de React (<code>&lt;&gt; ...</code>). El Fragmento es \u00fatil porque no a\u00f1ade un <code>&lt;div&gt;</code> extra innecesario al DOM final.     <pre><code>// Correcto:\nreturn (\n  &lt;&gt;\n    &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n    &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\n  &lt;/&gt;\n)\n\n// INCORRECTO:\n// return (\n//   &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n//   &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\n// )\n</code></pre></li> <li><code>className</code> en lugar de <code>class</code>: Para a\u00f1adir clases CSS, usa el atributo <code>className</code>. (<code>class</code> es una palabra reservada en JavaScript).     <pre><code>&lt;div className=\"mi-clase\"&gt;Contenido&lt;/div&gt;\n</code></pre></li> <li>Atributos en <code>camelCase</code>: La mayor\u00eda de los atributos HTML se escriben en <code>camelCase</code> en JSX. Ejemplos: <code>onclick</code> -&gt; <code>onClick</code>, <code>tabindex</code> -&gt; <code>tabIndex</code>, <code>maxlength</code> -&gt; <code>maxLength</code>. Una excepci\u00f3n importante es <code>for</code> en las etiquetas <code>&lt;label&gt;</code>, que se convierte en <code>htmlFor</code>.     <pre><code>&lt;label htmlFor=\"miInput\"&gt;Etiqueta:&lt;/label&gt;\n&lt;input id=\"miInput\" onClick={handleClick} /&gt;\n</code></pre></li> <li>Cerrar Todas las Etiquetas: En JSX, toda etiqueta debe tener una etiqueta de cierre (<code>&lt;div&gt;&lt;/div&gt;</code>) o ser auto-cerrada si no tiene contenido (<code>&lt;img src=\"...\" alt=\"...\" /&gt;</code>, <code>&lt;input /&gt;</code>, <code>&lt;br /&gt;</code>).</li> </ol>"},{"location":"content/curso/#34-incrustando-javascript-en-jsx-con","title":"3.4. Incrustando JavaScript en JSX con <code>{}</code>","text":"<p>Puedes insertar cualquier expresi\u00f3n de JavaScript v\u00e1lida directamente dentro de tu JSX usando llaves <code>{}</code>.</p> <ul> <li>Variables: <pre><code>const nombre = \"Mundo\";\nreturn &lt;h1&gt;Hola, {nombre}!&lt;/h1&gt;; // Muestra: Hola, Mundo!\n</code></pre></li> <li>Operaciones: <pre><code>return &lt;p&gt;Resultado: {5 * 10}&lt;/p&gt;; // Muestra: Resultado: 50\n</code></pre></li> <li>Llamadas a Funciones: <pre><code>const getA\u00f1o = () =&gt; new Date().getFullYear();\nreturn &lt;p&gt;A\u00f1o actual: {getA\u00f1o()}&lt;/p&gt;; // Muestra: A\u00f1o actual: 2023 (o el a\u00f1o actual)\n</code></pre></li> <li>Valores Booleanos, <code>null</code>, <code>undefined</code>: Estos valores no renderizan nada visible, lo cual es \u00fatil para mostrar cosas condicionalmente (lo veremos m\u00e1s adelante). <code>0</code> (cero) s\u00ed se renderiza.</li> </ul>"},{"location":"content/curso/#35-diferencias-clave-jsx-vs-html-resumen","title":"3.5. Diferencias Clave JSX vs. HTML (Resumen)","text":"<ul> <li><code>class</code> =&gt; <code>className</code></li> <li><code>for</code> =&gt; <code>htmlFor</code></li> <li>Atributos =&gt; <code>camelCase</code> (ej. <code>onclick</code> =&gt; <code>onClick</code>)</li> <li>Estilos en l\u00ednea (<code>style</code>): Requieren un objeto JavaScript con claves camelCase.     <pre><code>&lt;div style={{ color: 'red', fontSize: '16px', backgroundColor: 'lightyellow' }}&gt;\n  Texto con estilo\n&lt;/div&gt;\n</code></pre></li> <li>Todas las etiquetas deben cerrarse (<code>&lt;br /&gt;</code>, <code>&lt;img /&gt;</code>, etc.).</li> <li>Comentarios: <code>{/* As\u00ed se escribe un comentario en JSX */}</code></li> </ul>"},{"location":"content/curso/#4-como-llega-react-al-navegador-el-renderizado","title":"4. \u00bfC\u00f3mo llega React al Navegador? El Renderizado","text":"<p>Echemos un \u00faltimo vistazo al archivo <code>src/main.jsx</code>. Es el pegamento que une tu c\u00f3digo React con el HTML de tu navegador:</p> <ol> <li><code>import ReactDOM from 'react-dom/client';</code>: Importa la parte de React que sabe c\u00f3mo hablar con el DOM del navegador.</li> <li><code>ReactDOM.createRoot(document.getElementById('root'))</code>: Encuentra el <code>&lt;div id=\"root\"&gt;</code> en tu <code>index.html</code> y crea una \"ra\u00edz\" de React en ese punto. Es donde tu aplicaci\u00f3n vivir\u00e1.</li> <li><code>.render(&lt;App /&gt;)</code> (o <code>&lt;React.StrictMode&gt;&lt;App /&gt;&lt;/React.StrictMode&gt;</code>) : Le dice a React que renderice (dibuje) tu componente <code>App</code> (y todo lo que este contenga) dentro de esa ra\u00edz.<ul> <li><code>&lt;React.StrictMode&gt;</code> es un ayudante que activa verificaciones adicionales solo en desarrollo para ayudarte a encontrar posibles problemas en tu c\u00f3digo. No afecta la aplicaci\u00f3n final (build de producci\u00f3n).</li> </ul> </li> </ol> <p>El Flujo Completo: El navegador carga <code>index.html</code> -&gt; <code>index.html</code> carga <code>main.jsx</code> -&gt; <code>main.jsx</code> usa <code>ReactDOM</code> para tomar tu componente <code>&lt;App /&gt;</code> y lo inserta dentro del <code>&lt;div id=\"root\"&gt;</code>.</p>"},{"location":"content/curso/#5-a-practicar-primeros-pasos-con-codigo","title":"5. \u00a1A Practicar! Primeros Pasos con C\u00f3digo","text":"<p>Ahora es tu turno de experimentar. Intenta hacer lo siguiente en tu proyecto:</p> <ul> <li> <p>Ejercicio 1: Modifica <code>App.jsx</code></p> <ul> <li>Cambia el contenido dentro del <code>return</code> de <code>App</code>. A\u00f1ade un t\u00edtulo (<code>&lt;h1&gt;</code>), un p\u00e1rrafo (<code>&lt;p&gt;</code>) y una lista desordenada (<code>&lt;ul&gt;</code>) con varios elementos (<code>&lt;li&gt;</code>).</li> <li>Crea una variable JavaScript (ej. <code>const titulo = \"Mi Lista de Tareas\";</code>) antes del <code>return</code> y \u00fasala dentro de un <code>&lt;h1&gt;</code> usando <code>{titulo}</code>.</li> <li>A\u00f1ade una <code>className</code> a alg\u00fan elemento (ej. <code>&lt;ul className=\"lista-bonita\"&gt;</code>) y define algunos estilos simples para esa clase en <code>src/App.css</code> o <code>src/index.css</code>.</li> <li>A\u00f1ade una imagen. Puedes descargar una, ponerla en <code>src/assets/</code>, importarla (<code>import miImagen from './assets/imagen.png';</code>) y usarla en una etiqueta <code>&lt;img src={miImagen} alt=\"Descripci\u00f3n\" /&gt;</code>. \u00a1Recuerda la barra de cierre <code>/</code> y el <code>alt</code>!</li> </ul> </li> <li> <p>Ejercicio 2: Crea un Nuevo Componente</p> <ul> <li>Crea un nuevo archivo en <code>src/</code>, ll\u00e1malo <code>Saludo.jsx</code>.</li> <li>Dentro de <code>Saludo.jsx</code>, define una funci\u00f3n simple que devuelva un elemento JSX, por ejemplo:     <pre><code>function Saludo() {\n  return &lt;h2&gt;\u00a1Componente de Saludo!&lt;/h2&gt;;\n}\nexport default Saludo; // \u00a1No olvides exportarlo!\n</code></pre></li> <li>Ahora, en <code>src/App.jsx</code>, importa tu nuevo componente al principio del archivo:     <pre><code>import Saludo from './Saludo';\n</code></pre></li> <li>Usa tu componente dentro del JSX de <code>App</code> como si fuera una etiqueta HTML: <code>&lt;Saludo /&gt;</code>.     <pre><code>function App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Mi Aplicaci\u00f3n&lt;/h1&gt;\n      &lt;Saludo /&gt; {/* &lt;-- Aqu\u00ed usas tu componente */}\n      &lt;p&gt;M\u00e1s contenido...&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></li> <li>Guarda ambos archivos y verifica que veas el saludo en tu navegador.</li> </ul> </li> </ul>"},{"location":"content/p1/","title":"Clase 2 Introducci\u00f3n a React y Configuraci\u00f3n del Entorno","text":""},{"location":"content/p1/#bienvenidoa-al-mundo-de-react","title":"\u00a1Bienvenido/a al mundo de React!","text":"<p>En esta primera clase, sentaremos las bases para tu viaje con React. Entenderemos qu\u00e9 es esta poderosa biblioteca, por qu\u00e9 es tan popular, y daremos los primeros pasos pr\u00e1cticos configurando nuestro entorno de desarrollo y creando nuestra primera (muy simple) aplicaci\u00f3n React.</p>"},{"location":"content/p1/#fundamentos-teoricos-y-contexto","title":"Fundamentos Te\u00f3ricos y Contexto","text":""},{"location":"content/p1/#que-es-react","title":"\u00bfQu\u00e9 es React?","text":"<ul> <li>React es una biblioteca (library) de JavaScript de c\u00f3digo abierto, creada y mantenida por Meta (Facebook) y una gran comunidad.</li> <li>Su objetivo principal es ayudarte a construir interfaces de usuario (UIs) de forma eficiente, especialmente para aplicaciones web complejas e interactivas.</li> <li>La idea central de React es dividir la interfaz en peque\u00f1as piezas reutilizables llamadas componentes. Piensa en ellos como bloques de LEGO: cada uno tiene su propia l\u00f3gica y apariencia, y los combinas para crear interfaces completas.</li> </ul>"},{"location":"content/p1/#por-que-usar-react-principales-beneficios","title":"\u00bfPor Qu\u00e9 Usar React? Principales Beneficios","text":"<ul> <li>Declarativo: En lugar de decirle al navegador c\u00f3mo actualizar la pantalla paso a paso (imperativo), le dices a React qu\u00e9 quieres mostrar basado en los datos actuales (el estado). React se encarga de hacer los cambios necesarios de manera eficiente. Esto hace el c\u00f3digo m\u00e1s predecible y f\u00e1cil de depurar.</li> <li>Basado en Componentes: Facilita la reutilizaci\u00f3n de c\u00f3digo (escribes un componente una vez y lo usas muchas veces), mejora la organizaci\u00f3n del proyecto y simplifica las pruebas.</li> <li>Rendimiento (Gracias al Virtual DOM):<ul> <li>React usa una copia virtual de la estructura de tu UI en memoria (el \"Virtual DOM\").</li> <li>Cuando los datos cambian, React compara la nueva versi\u00f3n del Virtual DOM con la anterior.</li> <li>Luego, calcula la forma m\u00e1s eficiente de actualizar el DOM real del navegador, minimizando operaciones costosas y haciendo que tu aplicaci\u00f3n se sienta m\u00e1s r\u00e1pida. No necesitas interactuar directamente con el Virtual DOM, \u00a1React lo maneja por ti!</li> </ul> </li> <li>Gran Ecosistema y Comunidad: Hay much\u00edsimas herramientas, librer\u00edas adicionales, tutoriales y una comunidad activa dispuesta a ayudar. Esto tambi\u00e9n significa que hay muchas oportunidades laborales para desarrolladores React.</li> </ul>"},{"location":"content/p1/#conceptos-clave-iniciales","title":"Conceptos Clave Iniciales","text":"<ul> <li>SPA (Single Page Application): Aplicaciones que cargan una sola p\u00e1gina HTML y luego actualizan el contenido din\u00e1micamente usando JavaScript, sin necesidad de recargar toda la p\u00e1gina al navegar. React es excelente para construir SPAs, lo que resulta en una experiencia de usuario m\u00e1s fluida. Contrasta con las MPAs (Multi-Page Applications) tradicionales, donde cada cambio de p\u00e1gina implica una recarga completa desde el servidor.</li> <li>Virtual DOM: (Repaso) Es la representaci\u00f3n interna que React usa para optimizar las actualizaciones del DOM real del navegador.</li> </ul>"},{"location":"content/p1/#alternativas-a-react","title":"Alternativas a React","text":"<p>Existen otros frameworks y bibliotecas populares para construir UIs:</p> <ul> <li>Angular: Un framework completo de Google, usa TypeScript y tiene una estructura m\u00e1s definida (\"opinionado\").</li> <li>Vue.js: Un framework progresivo, conocido por su facilidad de aprendizaje y excelente documentaci\u00f3n.</li> <li>Svelte: Un enfoque diferente; es un compilador que escribe JavaScript eficiente y desaparece en tiempo de ejecuci\u00f3n.</li> </ul> <p>No hay una opci\u00f3n \"mejor\" universalmente; la elecci\u00f3n depende del proyecto. React destaca por su flexibilidad, enfoque en componentes y gran ecosistema.</p>"},{"location":"content/p1/#prerrequisitos","title":"Prerrequisitos","text":"<p>Para seguir este curso, necesitas conocimientos s\u00f3lidos de:</p> <ul> <li>HTML y CSS: Fundamentales para estructurar y estilizar p\u00e1ginas web.</li> <li>JavaScript (Moderno - ES6+): \u00a1Esencial! Necesitas entender:<ul> <li>Variables: <code>let</code>, <code>const</code></li> <li>Funciones Flecha: <code>=&gt;</code></li> <li>M\u00e9todos de Array: <code>.map()</code>, <code>.filter()</code> (\u00a1<code>map</code> es crucial!)</li> <li>M\u00f3dulos: <code>import</code>/<code>export</code></li> <li>(Idealmente) Promesas, <code>async/await</code> (los usaremos m\u00e1s adelante).</li> </ul> </li> <li> <p>Node.js y npm:</p> <ul> <li>Node.js: Entorno para ejecutar JavaScript fuera del navegador. Lo necesitamos para las herramientas de desarrollo de React.</li> <li>npm (Node Package Manager): Gestor de paquetes que viene con Node.js. Lo usaremos para instalar React y otras librer\u00edas (dependencias).</li> </ul> </li> <li> <p>Un Editor de C\u00f3digo: VS Code es muy recomendado por sus extensiones \u00fatiles para React/JavaScript, pero puedes usar Sublime Text, Atom, WebStorm, etc.</p> </li> </ul>"},{"location":"content/p1/#instalacion-de-nodejs-y-npm","title":"Instalaci\u00f3n de Node.js y npm","text":"<ol> <li>Ve a https://nodejs.org/.</li> <li>Descarga e instala la versi\u00f3n LTS (Long Term Support) \u2013 es la m\u00e1s estable. Sigue los pasos del instalador.</li> <li>Abre tu terminal (Terminal en Mac/Linux, CMD/PowerShell/Git Bash en Windows).</li> <li>Verifica la instalaci\u00f3n ejecutando estos comandos (deber\u00edan mostrarte n\u00fameros de versi\u00f3n):     <pre><code>node -v\nnpm -v\n</code></pre>     Si ves las versiones, \u00a1est\u00e1s listo! Si tienes problemas, pide ayuda.</li> </ol>"},{"location":"content/p1/#creando-proyecto-react-con-vite","title":"Creando Proyecto React con Vite","text":""},{"location":"content/p1/#explicacion-paso-a-paso","title":"Explicaci\u00f3n paso a paso","text":"<ol> <li>Requisitos previos:</li> <li>Aseg\u00farate de tener Node.js instalado (versi\u00f3n 14.18+ o superior). Puedes verificarlo con:      <pre><code>node -v\n</code></pre></li> <li> <p>Tener un gestor de paquetes como npm (viene con Node.js) o pnpm (opcional, m\u00e1s r\u00e1pido).</p> </li> <li> <p>Crear un proyecto con Vite:    Vite ofrece plantillas preconfiguradas para React. Usa el siguiente comando para iniciar un proyecto:</p> </li> </ol> <pre><code>npm create vite@latest\n</code></pre> <ul> <li>Esto inicia un asistente interactivo.</li> <li>Nombre del proyecto: Ingresa un nombre (ejemplo: <code>mi-proyecto-react</code>).</li> <li>Framework: Selecciona <code>React</code>.</li> <li>Variante: Elige <code>JavaScript</code> o <code>TypeScript</code> (para este ejemplo, usaremos JavaScript).</li> </ul> <p>Alternativamente, puedes usar un solo comando para evitar el asistente:    <pre><code>npm create vite@latest mi-proyecto-react -- --template react\n</code></pre></p> <ol> <li> <p>Navegar al directorio del proyecto:    <pre><code>cd mi-proyecto-react\n</code></pre></p> </li> <li> <p>Instalar dependencias:    <pre><code>npm install\n</code></pre></p> </li> <li> <p>Iniciar el servidor de desarrollo:    <pre><code>npm run dev\n</code></pre></p> </li> <li>Esto inicia un servidor local (generalmente en <code>http://localhost:5173</code>).</li> <li> <p>Abre la URL en tu navegador para ver la aplicaci\u00f3n React predeterminada.</p> </li> <li> <p>Estructura del proyecto:    Una vez creado, el proyecto tendr\u00e1 una estructura similar a esta:    <pre><code>mi-proyecto-react/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 vite.svg\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 App.jsx\n\u2502   \u251c\u2500\u2500 main.jsx\n\u2502   \u251c\u2500\u2500 App.css\n\u2502   \u2514\u2500\u2500 index.css\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 vite.config.js\n</code></pre></p> </li> <li><code>src/main.jsx</code>: Punto de entrada que renderiza la aplicaci\u00f3n.</li> <li><code>src/App.jsx</code>: Componente principal de React.</li> <li> <p><code>vite.config.js</code>: Configuraci\u00f3n de Vite.</p> </li> <li> <p>Personalizar el proyecto:    Edita <code>src/App.jsx</code> para agregar tu propio c\u00f3digo. Por ejemplo, reemplaza su contenido con:</p> </li> </ol> <pre><code>import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;h1&gt;Contador con React y Vite&lt;/h1&gt;\n      &lt;p&gt;Has hecho clic {count} veces&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Incrementar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <ul> <li>Este c\u00f3digo crea un contador simple que incrementa un valor al hacer clic en un bot\u00f3n.</li> <li> <p>El servidor de Vite recargar\u00e1 autom\u00e1ticamente los cambios en el navegador.</p> </li> <li> <p>Construir para producci\u00f3n:    Cuando est\u00e9s listo para desplegar, genera una versi\u00f3n optimizada:    <pre><code>npm run build\n</code></pre></p> </li> <li> <p>Los archivos optimizados estar\u00e1n en la carpeta <code>dist/</code>.</p> </li> <li> <p>Previsualizar la build:    Para verificar la versi\u00f3n de producci\u00f3n localmente:    <pre><code>npm run preview\n</code></pre></p> </li> </ul>"},{"location":"content/p1/#ejemplo-completo","title":"Ejemplo completo","text":"<p>Supongamos que quieres crear un proyecto llamado <code>contador-app</code>. Ejecuta:</p> <pre><code>npm create vite@latest contador-app -- --template react\ncd contador-app\nnpm install\nnpm run dev\n</code></pre> <p>Luego, edita <code>src/App.jsx</code> con el c\u00f3digo del contador mostrado arriba. Abre <code>http://localhost:5173</code> en tu navegador y ver\u00e1s un contador funcional.</p>"},{"location":"content/p1/#url-oficial-de-vite","title":"URL oficial de Vite","text":"<p>La documentaci\u00f3n y recursos oficiales est\u00e1n disponibles en:</p> <ul> <li>https://vitejs.dev/</li> </ul>"},{"location":"content/p1/#ventajas-de-usar-vite-con-react","title":"Ventajas de usar Vite con React","text":"<ul> <li>R\u00e1pido: Vite usa ES Modules y un servidor de desarrollo ultrarr\u00e1pido.</li> <li>Configuraci\u00f3n m\u00ednima: Plantillas listas para usar.</li> <li>Hot Module Replacement (HMR): Actualizaciones en tiempo real sin recargar la p\u00e1gina.</li> <li>Optimizado para producci\u00f3n: Genera builds peque\u00f1as y eficientes.</li> </ul>"},{"location":"content/p1/#creando-proyecto-react-con-nextjs","title":"Creando Proyecto React con Next.js","text":""},{"location":"content/p1/#explicacion-paso-a-paso_1","title":"Explicaci\u00f3n paso a paso","text":"<ol> <li>Requisitos previos:</li> <li>Aseg\u00farate de tener Node.js instalado (versi\u00f3n 18.17 o superior). Verif\u00edcalo con:      <pre><code>node -v\n</code></pre></li> <li> <p>Usa npm (incluido con Node.js) o pnpm (opcional, m\u00e1s r\u00e1pido).</p> </li> <li> <p>Crear un proyecto con Next.js:    Next.js proporciona un comando para inicializar un proyecto con una configuraci\u00f3n predeterminada. Ejecuta:</p> </li> </ol> <pre><code>npx create-next-app@latest\n</code></pre> <ul> <li>Esto inicia un asistente interactivo:<ul> <li>Nombre del proyecto: Ingresa un nombre (ejemplo: <code>mi-proyecto-next</code>).</li> <li>TypeScript: Elige si usar TypeScript (para este ejemplo, usaremos JavaScript).</li> <li>ESLint: Selecciona <code>Yes</code> para activar linting.</li> <li>Tailwind CSS: Opcional (elige <code>No</code> para mantenerlo simple).</li> <li>src directory: Elige <code>No</code> para usar la estructura est\u00e1ndar.</li> <li>App Router: Selecciona <code>Yes</code> para usar el nuevo App Router (recomendado).</li> <li>Customize default import alias: Elige <code>No</code> para simplicidad.</li> </ul> </li> </ul> <p>Alternativamente, puedes usar un solo comando para evitar el asistente:    <pre><code>npx create-next-app@latest mi-proyecto-next --javascript --eslint --no-tailwind --no-src-dir --app --import-alias \"@/*\"\n</code></pre></p> <ol> <li> <p>Navegar al directorio del proyecto:    <pre><code>cd mi-proyecto-next\n</code></pre></p> </li> <li> <p>Iniciar el servidor de desarrollo:    <pre><code>npm run dev\n</code></pre></p> </li> <li>Esto inicia el servidor en <code>http://localhost:3000</code>.</li> <li> <p>Abre la URL en tu navegador para ver la p\u00e1gina predeterminada de Next.js.</p> </li> <li> <p>Estructura del proyecto:    Con el App Router, la estructura ser\u00e1 similar a:    <pre><code>mi-proyecto-next/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 next.svg\n\u2502   \u2514\u2500\u2500 vercel.svg\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 globals.css\n\u2502   \u251c\u2500\u2500 layout.jsx\n\u2502   \u251c\u2500\u2500 page.jsx\n\u2502   \u2514\u2500\u2500 favicon.ico\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 next.config.mjs\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 .eslintrc.json\n</code></pre></p> </li> <li><code>app/page.jsx</code>: P\u00e1gina principal de la aplicaci\u00f3n.</li> <li><code>app/layout.jsx</code>: Layout ra\u00edz que envuelve todas las p\u00e1ginas.</li> <li> <p><code>next.config.mjs</code>: Configuraci\u00f3n de Next.js.</p> </li> <li> <p>Personalizar el proyecto:    Edita <code>app/page.jsx</code> para crear una p\u00e1gina con un contador simple. Reemplaza su contenido con:</p> </li> </ol> <pre><code>'use client'; // Indica que este componente se renderiza en el cliente\n\nimport { useState } from 'react';\nimport styles from './page.module.css';\n\nexport default function Home() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;main className={styles.main}&gt;\n      &lt;h1&gt;Contador con Next.js&lt;/h1&gt;\n      &lt;p&gt;Has hecho clic {count} veces&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Incrementar&lt;/button&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre> <ul> <li><code>'use client'</code>: Necesario para componentes que usan hooks como <code>useState</code> en el App Router, ya que Next.js renderiza por defecto en el servidor.</li> <li> <p><code>styles.main</code>: Usa los estilos CSS Modules generados autom\u00e1ticamente en <code>page.module.css</code>.</p> </li> <li> <p>Ajustar los estilos (opcional):    En <code>app/page.module.css</code>, puedes modificar o agregar estilos, por ejemplo:    <pre><code>.main {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  gap: 1rem;\n}\n</code></pre></p> </li> <li> <p>Construir para producci\u00f3n:    Para generar una versi\u00f3n optimizada:    <pre><code>npm run build\n</code></pre></p> </li> <li> <p>Los archivos optimizados se generan en la carpeta <code>.next/</code>.</p> </li> <li> <p>Iniciar la aplicaci\u00f3n en producci\u00f3n:    Previsualiza la build localmente:    <pre><code>npm run start\n</code></pre></p> </li> </ul>"},{"location":"content/p1/#ejemplo-completo_1","title":"Ejemplo completo","text":"<p>Para crear un proyecto llamado <code>contador-next-app</code>, ejecuta:</p> <pre><code>npx create-next-app@latest contador-next-app --javascript --eslint --no-tailwind --no-src-dir --app --import-alias \"@/*\"\ncd contador-next-app\nnpm run dev\n</code></pre> <p>Edita <code>app/page.jsx</code> con el c\u00f3digo del contador mostrado arriba. Abre <code>http://localhost:3000</code> en tu navegador y ver\u00e1s un contador funcional.</p>"},{"location":"content/p1/#url-oficial-de-nextjs","title":"URL oficial de Next.js","text":"<p>La documentaci\u00f3n y recursos oficiales est\u00e1n disponibles en:</p> <ul> <li>https://nextjs.org/</li> </ul>"},{"location":"content/p1/#ventajas-de-usar-nextjs","title":"Ventajas de usar Next.js","text":"<ul> <li>Renderizado h\u00edbrido: Soporta SSR, SSG y CSR (renderizado del lado del cliente).</li> <li>Optimizaci\u00f3n autom\u00e1tica: Compresi\u00f3n de im\u00e1genes, precarga de recursos y m\u00e1s.</li> <li>App Router: Estructura moderna para manejar rutas y layouts.</li> <li>API Routes: Crea endpoints API f\u00e1cilmente dentro del proyecto.</li> <li>Ecosistema robusto: Integraci\u00f3n con Vercel, Tailwind CSS, y m\u00e1s.</li> </ul>"},{"location":"content/p1/#diferencias-con-vite","title":"Diferencias con Vite","text":"<ul> <li>Next.js es un framework completo con enrutamiento, renderizado del servidor y optimizaciones integradas, mientras que Vite es una herramienta de construcci\u00f3n m\u00e1s ligera enfocada en velocidad.</li> <li>Next.js es ideal para aplicaciones que requieren SEO o renderizado del servidor; Vite es mejor para aplicaciones cliente ligeras.</li> </ul>"},{"location":"content/p1/#extensiones-de-vs-code-especificas-para-react","title":"Extensiones de VS Code Espec\u00edficas para React","text":"<ol> <li> <p>ES7+ React/Redux/React-Native snippets</p> <ul> <li>Descripci\u00f3n: Proporciona snippets para React, Redux, React Native y GraphQL, incluyendo componentes funcionales, hooks y boilerplate com\u00fan.</li> <li>Por qu\u00e9 usarla: Acelera la escritura de c\u00f3digo React (ej. <code>rafce</code> para un componente funcional con exportaci\u00f3n). Ideal para proyectos con Vite o Next.js.</li> </ul> </li> <li> <p>Simple React Snippets</p> <ul> <li>Descripci\u00f3n: Ofrece snippets minimalistas para React, como importaciones, componentes funcionales y PropTypes, sin abarcar Redux o React Native.</li> <li>Por qu\u00e9 usarla: Es m\u00e1s ligero que ES7+ Snippets, ideal para principiantes o proyectos React puros donde no necesitas snippets adicionales.</li> </ul> </li> <li> <p>Auto Rename Tag</p> <ul> <li>Descripci\u00f3n: Renombra autom\u00e1ticamente etiquetas JSX/HTML emparejadas al editar una, evitando errores en el c\u00f3digo.</li> <li>Por qu\u00e9 usarla: Simplifica la edici\u00f3n de JSX en React, especialmente en componentes complejos con muchas etiquetas anidadas, com\u00fan en Vite y Next.js.</li> </ul> </li> <li> <p>VSCode React Refactor</p> <ul> <li>Descripci\u00f3n: Facilita la refactorizaci\u00f3n de c\u00f3digo JSX, permitiendo extraer fragmentos a funciones o archivos separados.</li> <li>Por qu\u00e9 usarla: Mantiene el c\u00f3digo React organizado, especialmente en proyectos grandes con Next.js (App Router) o Vite, donde los componentes crecen r\u00e1pido.   </li> </ul> </li> </ol>"},{"location":"content/p1/#que-es-jsx","title":"\u00bfQu\u00e9 es JSX?","text":"<p>JSX (JavaScript XML) es una extensi\u00f3n de sintaxis para JavaScript que permite escribir c\u00f3digo similar a HTML dentro de archivos JavaScript. Es una caracter\u00edstica clave de React, utilizada para describir la interfaz de usuario (UI) de manera declarativa. Aunque parece HTML, JSX es en realidad az\u00facar sint\u00e1ctico que se transforma en llamadas a funciones JavaScript (espec\u00edficamente, a <code>React.createElement</code>).</p> <ul> <li>Creado por: Facebook, como parte de React.</li> <li>Prop\u00f3sito: Facilitar la creaci\u00f3n de componentes de UI combinando l\u00f3gica (JavaScript) y estructura (HTML-like) en un solo lugar.</li> <li>No es HTML: JSX es una abstracci\u00f3n que se compila a JavaScript puro, lo que lo hace m\u00e1s flexible y potente.</li> </ul>"},{"location":"content/p1/#como-funciona-jsx","title":"\u00bfC\u00f3mo funciona JSX?","text":"<p>JSX permite escribir estructuras de UI que se asemejan a HTML, pero bajo el cap\u00f3, se convierten en objetos JavaScript que React usa para construir el DOM virtual. Aqu\u00ed est\u00e1 el proceso:</p> <ol> <li> <p>Escribir JSX:    <pre><code>const element = &lt;h1&gt;Hola, React!&lt;/h1&gt;;\n</code></pre></p> </li> <li> <p>Compilaci\u00f3n con Babel:    JSX no es interpretado directamente por los navegadores. Herramientas como Babel (usadas autom\u00e1ticamente en Vite y Next.js) lo transforman en JavaScript:    <pre><code>const element = React.createElement(\"h1\", null, \"Hola, React!\");\n</code></pre></p> </li> <li> <p>Renderizado:    React toma estas llamadas a <code>React.createElement</code> para crear un DOM virtual (una representaci\u00f3n ligera del DOM real). Luego, React compara el DOM virtual con el DOM real y actualiza solo las partes que cambiaron (reconciliaci\u00f3n).</p> </li> <li> <p>Integraci\u00f3n en componentes:    JSX se usa dentro de componentes React para definir su estructura. Por ejemplo:    <pre><code>function Welcome() {\n  return &lt;h1&gt;Bienvenido a React&lt;/h1&gt;;\n}\n</code></pre></p> </li> </ol>"},{"location":"content/p1/#caracteristicas-principales-de-jsx","title":"Caracter\u00edsticas principales de JSX","text":"<ol> <li> <p>Sintaxis similar a HTML:</p> <ul> <li>Usa etiquetas como <code>&lt;div&gt;</code>, <code>&lt;h1&gt;</code>, o componentes personalizados (<code>&lt;MyComponent /&gt;</code>).</li> <li>Soporta atributos como <code>className</code>, <code>onClick</code>, etc.</li> </ul> </li> <li> <p>Expresiones JavaScript:</p> <ul> <li>Puedes insertar c\u00f3digo JavaScript dentro de JSX usando llaves <code>{}</code>:     <pre><code>const name = \"Juan\";\nconst element = &lt;h1&gt;Hola, {name}!&lt;/h1&gt;;\n</code></pre></li> </ul> </li> <li> <p>Componentes como etiquetas:</p> <ul> <li>Los componentes React (funcionales o de clase) se usan como etiquetas JSX:     <pre><code>function Greeting() {\nreturn &lt;h1&gt;\u00a1Hola!&lt;/h1&gt;;\n}\nconst element = &lt;Greeting /&gt;;\n</code></pre></li> </ul> </li> <li> <p>No es un template engine:</p> <ul> <li>A diferencia de Handlebars o Pug, JSX es JavaScript puro, lo que permite usar toda la potencia de JS (map, filter, etc.) dentro de la UI.</li> </ul> </li> <li> <p>Seguridad integrada:</p> <ul> <li>JSX escapa autom\u00e1ticamente el contenido para prevenir ataques XSS (Cross-Site Scripting). Por ejemplo:     <pre><code>const userInput = \"&lt;script&gt;alert('hack')&lt;/script&gt;\";\nreturn &lt;div&gt;{userInput}&lt;/div&gt;; // Se renderiza como texto, no como script\n</code></pre></li> </ul> </li> </ol>"},{"location":"content/p1/#reglas-de-jsx","title":"Reglas de JSX","text":"<p>Para usar JSX correctamente, debes seguir estas reglas:</p> <ol> <li> <p>Siempre cerrar etiquetas:</p> <ul> <li>Todas las etiquetas deben cerrarse, incluso las vac\u00edas:     <pre><code>&lt;img src=\"image.jpg\" alt=\"example\" /&gt; // Correcto\n&lt;img src=\"image.jpg\"&gt; // Incorrecto\n</code></pre></li> </ul> </li> <li> <p>Un solo elemento ra\u00edz:</p> <ul> <li>JSX debe devolver un solo elemento ra\u00edz. Si necesitas m\u00faltiples elementos, envu\u00e9lvelos en un <code>&lt;div&gt;</code> o un Fragment (<code>&lt;&gt;</code>):     <pre><code>return (\n&lt;&gt;\n    &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n    &lt;p&gt;Descripci\u00f3n&lt;/p&gt;\n&lt;/&gt;\n);\n</code></pre></li> </ul> </li> <li> <p>Usar <code>className</code> en lugar de <code>class</code>:</p> <ul> <li>En JSX, los atributos HTML que coinciden con palabras reservadas de JavaScript se renombran:     <pre><code>&lt;div className=\"container\"&gt;Contenido&lt;/div&gt;\n</code></pre></li> <li>Otros ejemplos: <code>htmlFor</code> en lugar de <code>for</code>, <code>onClick</code> en lugar de <code>onclick</code>.</li> </ul> </li> <li> <p>CamelCase para eventos y props:</p> <ul> <li>Los eventos y propiedades personalizadas usan camelCase:     <pre><code>&lt;button onClick={handleClick}&gt;Clic&lt;/button&gt;\n</code></pre></li> </ul> </li> <li> <p>Expresiones en llaves <code>{}</code>:</p> <ul> <li>Solo se permiten expresiones JavaScript (no bloques como <code>if</code> o <code>for</code>) dentro de <code>{}</code>:     <pre><code>&lt;p&gt;{2 + 2}&lt;/p&gt; // Correcto\n&lt;p&gt;{if (true) return \"Hola\"}&lt;/p&gt; // Incorrecto\n</code></pre></li> </ul> </li> <li> <p>Componentes comienzan con may\u00fascula:</p> <ul> <li>Los componentes personalizados deben empezar con may\u00fascula para diferenciarlos de etiquetas HTML:     <pre><code>&lt;MyComponent /&gt; // Componente\n&lt;mycomponent /&gt; // Error: se interpreta como HTML\n</code></pre></li> </ul> </li> </ol>"},{"location":"content/p1/#ejemplo-practico-de-jsx-en-react","title":"Ejemplo pr\u00e1ctico de JSX en React","text":"<p>A continuaci\u00f3n, un ejemplo completo que puedes usar en tus proyectos con Vite o Next.js. Este ejemplo crea un componente con un contador, usando varias caracter\u00edsticas de JSX.</p>"},{"location":"content/p1/#codigo","title":"C\u00f3digo","text":"<p>Crea o edita <code>src/App.jsx</code> (en Vite) o <code>app/page.jsx</code> (en Next.js con App Router):</p> <pre><code>'use client'; // Solo para Next.js (App Router)\n\nimport { useState } from 'react';\nimport './App.css'; // En Vite\n// o import styles from './page.module.css'; // En Next.js\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const isHigh = count &gt; 5;\n\n  // Lista din\u00e1mica con map\n  const items = ['React', 'JSX', 'Vite/Next.js'];\n  const listItems = items.map((item, index) =&gt; (\n    &lt;li key={index}&gt;{item}&lt;/li&gt;\n  ));\n\n  // Manejo de eventos\n  const handleIncrement = () =&gt; setCount(count + 1);\n\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;h1&gt;Contador con JSX&lt;/h1&gt;\n      &lt;p&gt;Conteo: {count}&lt;/p&gt;\n      &lt;button onClick={handleIncrement}&gt;Incrementar&lt;/button&gt;\n      {/* Renderizado condicional */}\n      {isHigh ? (\n        &lt;p&gt;\u00a1El conteo es alto!&lt;/p&gt;\n      ) : (\n        &lt;p&gt;El conteo es bajo&lt;/p&gt;\n      )}\n      {/* Lista din\u00e1mica */}\n      &lt;h2&gt;Tecnolog\u00edas usadas:&lt;/h2&gt;\n      &lt;ul&gt;{listItems}&lt;/ul&gt;\n      {/* Componente reutilizable */}\n      &lt;Greeting name=\"Usuario\" /&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Componente reutilizable\nfunction Greeting({ name }) {\n  return &lt;p&gt;\u00a1Hola, {name}!&lt;/p&gt;;\n}\n\nexport default App;\n</code></pre>"},{"location":"content/p1/#explicacion-del-ejemplo","title":"Explicaci\u00f3n del ejemplo","text":"<ul> <li>Estructura JSX: Usa etiquetas como <code>&lt;div&gt;</code>, <code>&lt;h1&gt;</code>, <code>&lt;button&gt;</code>, y el componente personalizado <code>&lt;Greeting /&gt;</code>.</li> <li>Expresiones: <code>{count}</code> muestra el estado, <code>{listItems}</code> renderiza una lista din\u00e1mica.</li> <li>Eventos: <code>onClick={handleIncrement}</code> maneja clics.</li> <li>Renderizado condicional: <code>{isHigh ? ... : ...}</code> muestra un mensaje seg\u00fan el estado.</li> <li>Lista din\u00e1mica: <code>items.map</code> genera <code>&lt;li&gt;</code> con una <code>key</code> para optimizar el renderizado.</li> <li>Props: El componente <code>Greeting</code> recibe <code>name</code> como prop.</li> <li>Estilos: Usa <code>className</code> para aplicar estilos desde <code>App.css</code> (Vite) o <code>page.module.css</code> (Next.js).</li> </ul>"},{"location":"content/p1/#como-probarlo","title":"C\u00f3mo probarlo","text":"<ol> <li> <p>En Vite:</p> <ul> <li>Crea un proyecto con <code>npm create vite@latest</code> (como en tu primer pregunta).</li> <li>Reemplaza <code>src/App.jsx</code> con el c\u00f3digo anterior.</li> <li>Ejecuta <code>npm run dev</code> y abre <code>http://localhost:5173</code>.</li> </ul> </li> <li> <p>En Next.js:</p> <ul> <li>Crea un proyecto con <code>npx create-next-app@latest</code> (como en tu segunda pregunta).</li> <li>Reemplaza <code>app/page.jsx</code> con el c\u00f3digo, asegur\u00e1ndote de a\u00f1adir <code>'use client'</code> al inicio.</li> <li>Ejecuta <code>npm run dev</code> y abre <code>http://localhost:3000</code>.</li> </ul> </li> </ol>"},{"location":"content/p1/#jsx-en-vite-vs-nextjs","title":"JSX en Vite vs. Next.js","text":"<ul> <li> <p>Vite:</p> <ul> <li>JSX se usa principalmente para renderizado del lado del cliente (CSR).</li> <li>La configuraci\u00f3n de Babel est\u00e1 incluida en Vite, por lo que no necesitas configurarlo manualmente.</li> <li>Ideal para aplicaciones ligeras donde el SEO no es cr\u00edtico.</li> </ul> </li> <li> <p>Next.js:</p> <ul> <li>JSX se usa en componentes que pueden renderizarse en el servidor (SSR) o est\u00e1ticamente (SSG).</li> <li>En el App Router (como en tu proyecto), los componentes con hooks como <code>useState</code> requieren <code>'use client'</code> para indicar que son client-side.</li> <li>Next.js optimiza el renderizado de JSX para SEO y rendimiento.</li> </ul> </li> </ul>"},{"location":"content/p1/#ventajas-de-jsx","title":"Ventajas de JSX","text":"<ol> <li>Declarativo: Describe c\u00f3mo debe verse la UI sin preocuparte por los detalles de manipulaci\u00f3n del DOM.</li> <li>Integraci\u00f3n con JavaScript: Combina l\u00f3gica y UI en un solo lugar, permitiendo usar funciones, bucles, etc.</li> <li>Reutilizaci\u00f3n: Los componentes JSX son modulares y reutilizables.</li> <li>Ecosistema: Compatible con herramientas como Vite, Next.js, y extensiones de VS Code (como las mencionadas en tu pregunta anterior: ES7+ Snippets, Auto Rename Tag).</li> </ol>"},{"location":"content/p1/#limitaciones-de-jsx","title":"Limitaciones de JSX","text":"<ol> <li>Curva de aprendizaje: La mezcla de HTML y JavaScript puede ser confusa al principio.</li> <li>Dependencia de herramientas: Necesitas un transpilador como Babel, aunque Vite/Next.js lo manejan por ti.</li> <li>Restricciones sint\u00e1cticas: Reglas como el elemento ra\u00edz \u00fanico o <code>className</code> requieren atenci\u00f3n.</li> </ol>"},{"location":"content/p1/#consejos-para-trabajar-con-jsx","title":"Consejos para trabajar con JSX","text":"<ol> <li> <p>Usa extensiones de VS Code:</p> <ul> <li>Como mencionaste en tu \u00faltima pregunta, extensiones como ES7+ React Snippets (<code>rafce</code>) y Auto Rename Tag facilitan la escritura y edici\u00f3n de JSX.</li> <li>VSCode React Refactor es \u00fatil para reorganizar JSX en componentes grandes.</li> </ul> </li> <li> <p>Fragments para evitar <code>&lt;div&gt;</code> innecesarios:     <pre><code>return (\n    &lt;&gt;\n    &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n    &lt;p&gt;Texto&lt;/p&gt;\n    &lt;/&gt;\n);\n</code></pre></p> </li> <li> <p>Claves en listas:</p> <ul> <li>Siempre asigna una <code>key</code> \u00fanica en elementos de listas para optimizar el renderizado:     <pre><code>{items.map(item =&gt; &lt;li key={item.id}&gt;{item.name}&lt;/li&gt;)}\n</code></pre></li> </ul> </li> <li> <p>Evita inline styles complejos:</p> <ul> <li>Usa <code>className</code> con CSS externo o CSS Modules (como en Next.js) en lugar de:     <pre><code>&lt;div style={{ backgroundColor: 'blue', padding: '10px' }} /&gt;\n</code></pre></li> </ul> </li> <li> <p>Depuraci\u00f3n:</p> <ul> <li>Usa Console Ninja (extensi\u00f3n mencionada anteriormente) para inspeccionar valores en JSX directamente en VS Code.</li> </ul> </li> </ol>"},{"location":"content/p1/#actividad-basica-para-principiantes-tu-primer-componente-interactivo-en-nextjs","title":"Actividad B\u00e1sica para Principiantes: Tu Primer Componente Interactivo en Next.js","text":"<p>Esta actividad te guiar\u00e1 paso a paso para poner en marcha un proyecto Next.js y modificar su p\u00e1gina principal usando JSX para crear un contador simple, aplicando reglas clave mencionadas en las fuentes.</p> <p>Objetivo: Aprender a: 1.  Crear un proyecto Next.js utilizando el comando recomendado. 2.  Identificar d\u00f3nde escribir c\u00f3digo para la p\u00e1gina principal en el App Router. 3.  Utilizar JSX para definir la estructura de la interfaz. 4.  Manejar el estado de un componente con <code>useState</code> (necesario para interactividad). 5.  Responder a eventos de usuario (como clics de bot\u00f3n). 6.  Insertar expresiones JavaScript dentro de JSX usando <code>{}</code>.</p> <p>Pasos:</p> <ol> <li> <p>Verificar los Prerrequisitos:</p> <ul> <li>Aseg\u00farate de tener Node.js instalado. Las fuentes recomiendan la versi\u00f3n LTS, idealmente 18.17+ o superior para Next.js. Puedes verificarlo en tu terminal con <code>node -v</code>.</li> <li>npm (Node Package Manager) viene con Node.js. Verif\u00edcalo con <code>npm -v</code>.</li> </ul> </li> <li> <p>Crear el Proyecto Next.js:</p> <ul> <li>Abre tu terminal o l\u00ednea de comandos.</li> <li>Usa el comando proporcionado en las fuentes para crear un nuevo proyecto. Vamos a usar opciones simples para principiantes, enfoc\u00e1ndonos en JavaScript y el App Router:     <pre><code>npx create-next-app@latest mi-primer-contador --javascript --eslint --no-tailwind --no-src-dir --app --import-alias \"@/*\"\n</code></pre>     Este comando iniciar\u00e1 el proceso para crear un proyecto Next.js llamado <code>mi-primer-contador</code>. Seleccionamos JavaScript, activamos ESLint (recomendado), omitimos Tailwind y la carpeta <code>src</code>, y usamos el nuevo App Router, que es la estructura recomendada.</li> </ul> </li> <li> <p>Navegar al Directorio del Proyecto:</p> <ul> <li>Entra en la carpeta del proyecto que acabas de crear:     <pre><code>cd mi-primer-contador\n</code></pre></li> </ul> </li> <li> <p>Iniciar el Servidor de Desarrollo:</p> <ul> <li>Ejecuta el comando para iniciar la aplicaci\u00f3n Next.js en modo desarrollo:     <pre><code>npm run dev\n</code></pre></li> <li>Esto iniciar\u00e1 un servidor local, accesible por defecto en <code>http://localhost:3000</code>. \u00c1brelo en tu navegador. Ver\u00e1s la p\u00e1gina de inicio predeterminada de Next.js.</li> </ul> </li> <li> <p>Identificar el Archivo Principal:</p> <ul> <li>Con el App Router, la p\u00e1gina principal que ves en <code>http://localhost:3000</code> corresponde al archivo <code>app/page.jsx</code> dentro de tu proyecto. Aqu\u00ed es donde escribiremos nuestro componente usando JSX.</li> </ul> </li> <li> <p>Implementar el Componente Contador Simple:</p> <ul> <li>Abre el archivo <code>app/page.jsx</code> en tu editor de c\u00f3digo (VS Code es recomendado, y las extensiones mencionadas en las fuentes pueden ser \u00fatiles).</li> <li>Reemplaza el contenido existente con el c\u00f3digo de un contador simple, adaptado del ejemplo pr\u00e1ctico de las fuentes, y que usa los conceptos b\u00e1sicos de JSX y React:     <pre><code>'use client'; // Necesario para usar hooks como useState en el App Router\n\nimport { useState } from 'react'; // Importamos el hook useState para el estado\n\nexport default function Home() {\n  // 1. Declarar el estado del contador usando useState. Empieza en 0.\n  const [count, setCount] = useState(0);\n\n  // 2. Funci\u00f3n para actualizar el estado cuando se haga clic en el bot\u00f3n.\n  const handleIncrement = () =&gt; {\n    setCount(count + 1); // Incrementa el valor del estado\n  };\n\n  // 3. Estructura de la interfaz usando JSX.\n  return (\n    // JSX debe devolver un solo elemento ra\u00edz. Usamos un div simple.\n    &lt;div&gt;\n      {/* Usamos etiquetas HTML como h1 y p */}\n      &lt;h1&gt;Mi Primer Contador con Next.js&lt;/h1&gt;\n\n      {/* Insertamos la variable 'count' (el estado) usando llaves {} */}\n      &lt;p&gt;El contador est\u00e1 en: {count}&lt;/p&gt;\n\n      {/* Bot\u00f3n que llama a handleIncrement cuando se hace clic (evento onClick con camelCase) */}\n      &lt;button onClick={handleIncrement}&gt;\n        Incrementar\n      &lt;/button&gt;\n\n      {/* Un peque\u00f1o ejemplo de expresi\u00f3n JavaScript en JSX */}\n      &lt;p&gt;El doble del contador es: {count * 2}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></li> <li>Conceptos clave de JSX y React en este c\u00f3digo (basado en las fuentes):<ul> <li><code>'use client'</code>: Esta directiva es crucial en el App Router de Next.js para indicar que este componente se ejecutar\u00e1 en el navegador (lado del cliente), lo cual es necesario para usar funcionalidades interactivas como el <code>useState</code>. Por defecto, los componentes en <code>app</code> intentan renderizarse en el servidor.</li> <li><code>import { useState } from 'react'</code>: As\u00ed traemos la herramienta de React para manejar el estado dentro de un componente funcional.</li> <li><code>const [count, setCount] = useState(0);</code>: Declara una variable de estado (<code>count</code>) y una funci\u00f3n para actualizarla (<code>setCount</code>), inicializ\u00e1ndola en 0.</li> <li>Sintaxis similar a HTML: Ves etiquetas como <code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, <code>&lt;button&gt;</code>. Recuerda que son JSX, no HTML puro.</li> <li>Expresiones JavaScript <code>{}</code>: Puedes insertar variables (<code>{count}</code>), resultados de operaciones (<code>{count * 2}</code>), o llamadas a funciones dentro de las llaves en tu JSX. Solo se permiten expresiones.</li> <li>Atributos y Eventos: Atributos est\u00e1ndar como <code>className</code> (en lugar de <code>class</code>) y manejadores de eventos como <code>onClick</code> (en camelCase) se usan en las etiquetas JSX.</li> <li>Elemento Ra\u00edz \u00danico: El <code>return</code> de tu componente JSX debe devolver una \u00fanica etiqueta que contenga todo lo dem\u00e1s (en este caso, el <code>&lt;div&gt;</code> principal).</li> <li><code>handleIncrement</code>: Esta es una funci\u00f3n de JavaScript que define la l\u00f3gica para actualizar el estado (<code>setCount</code>) cuando ocurre el evento asociado (<code>onClick</code>).</li> </ul> </li> </ul> </li> <li> <p>Verificar el Resultado:</p> <ul> <li>Como iniciaste el servidor con <code>npm run dev</code>, Next.js detectar\u00e1 autom\u00e1ticamente los cambios en <code>app/page.jsx</code> y recargar\u00e1 la p\u00e1gina en tu navegador.</li> <li>Vuelve a <code>http://localhost:3000</code>. Deber\u00edas ver tu nuevo componente: el t\u00edtulo, el texto mostrando \"El contador est\u00e1 en: 0\", el bot\u00f3n \"Incrementar\", y la l\u00ednea mostrando \"El doble...\".</li> <li>Haz clic en el bot\u00f3n \"Incrementar\". Observa c\u00f3mo el n\u00famero junto a \"El contador est\u00e1 en:\" y \"El doble del contador es:\" se actualizan sin que la p\u00e1gina completa se recargue. Esto es React trabajando eficientemente gracias al Virtual DOM y a tu componente interactuando con su estado.</li> </ul> </li> <li> <p>Explorar (Opcional):</p> <ul> <li>Experimenta cambiando el texto o agregando m\u00e1s elementos HTML simples.</li> <li>Intenta agregar una l\u00ednea que muestre el triple del contador <code>&lt;h3&gt;El triple es: {count * 3}&lt;/h3&gt;</code> dentro del <code>div</code> principal.</li> <li>Si instalaste las extensiones de VS Code, \u00fasalas para ver c\u00f3mo te ayudan a escribir c\u00f3digo m\u00e1s r\u00e1pido (por ejemplo, escribiendo <code>rafce</code> y presionando Tab para crear una estructura de componente) o a renombrar etiquetas.</li> </ul> </li> </ol> <p>Al completar esta actividad b\u00e1sica, habr\u00e1s dado tus primeros pasos en el desarrollo con Next.js y React, entendiendo c\u00f3mo configurar un proyecto simple y c\u00f3mo JSX te permite construir interfaces de usuario de manera declarativa e interactiva, aplicando las reglas y conceptos introducidos en las fuentes.</p>"},{"location":"content/p2/","title":"Clase 3 Componente en React","text":""},{"location":"content/p2/#1-que-es-un-componente-en-react","title":"1. \u00bfQu\u00e9 es un componente en React?","text":"<p>Un componente en React es como un bloque de Lego. Cada bloque tiene una funci\u00f3n espec\u00edfica (mostrar un bot\u00f3n, una lista, un formulario, etc.), y puedes combinarlos para construir interfaces de usuario completas. Los componentes son reutilizables, lo que significa que puedes usar el mismo componente en diferentes partes de tu aplicaci\u00f3n, y son modulares, lo que facilita mantener y organizar el c\u00f3digo.</p> <p>Piensa en una p\u00e1gina web como una casa: - La casa completa es tu aplicaci\u00f3n. - Cada habitaci\u00f3n (cocina, sala, ba\u00f1o) es un componente. - Dentro de cada habitaci\u00f3n, los muebles (mesa, sillas, l\u00e1mpara) son componentes m\u00e1s peque\u00f1os.</p> <p>En React, los componentes pueden ser desde algo tan simple como un bot\u00f3n hasta algo complejo como un formulario completo o una p\u00e1gina entera.</p>"},{"location":"content/p2/#2-tipos-de-componentes-en-react","title":"2. Tipos de componentes en React","text":"<p>Hay dos tipos principales de componentes en React:</p>"},{"location":"content/p2/#a-componentes-funcionales","title":"a) Componentes funcionales","text":"<p>Son la forma moderna y m\u00e1s sencilla de crear componentes. Se escriben como funciones de JavaScript que devuelven JSX (una sintaxis que mezcla HTML con JavaScript). Desde la introducci\u00f3n de los Hooks en React 16.8, los componentes funcionales son los m\u00e1s usados.</p> <p>Ejemplo de un componente funcional:</p> <pre><code>function Saludo() {\n  return &lt;h1&gt;\u00a1Hola, mundo!&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"content/p2/#b-componentes-de-clase","title":"b) Componentes de clase","text":"<p>Son la forma antigua de crear componentes, usando clases de JavaScript. Aunque a\u00fan funcionan, no son tan comunes hoy porque los componentes funcionales son m\u00e1s simples y los Hooks reemplazan las funcionalidades que antes requer\u00edan clases.</p> <p>Ejemplo de un componente de clase:</p> <pre><code>import React from 'react';\n\nclass Saludo extends React.Component {\n  render() {\n    return &lt;h1&gt;\u00a1Hola, mundo!&lt;/h1&gt;;\n  }\n}\n</code></pre> <p>En esta explicaci\u00f3n, nos enfocaremos en los componentes funcionales, ya que son los recomendados para proyectos nuevos.</p>"},{"location":"content/p2/#3-creando-un-componente-funcional","title":"3. Creando un componente funcional","text":"<p>Vamos a crear un componente paso a paso. Supongamos que queremos un componente que muestre un saludo personalizado.</p>"},{"location":"content/p2/#paso-1-crear-el-componente","title":"Paso 1: Crear el componente","text":"<p>Un componente funcional es simplemente una funci\u00f3n de JavaScript que devuelve JSX.</p> <pre><code>function Saludo() {\n  return &lt;h1&gt;\u00a1Hola, mundo!&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"content/p2/#paso-2-exportar-el-componente","title":"Paso 2: Exportar el componente","text":"<p>Para usar el componente en otros archivos, debes exportarlo.</p> <pre><code>export default function Saludo() {\n  return &lt;h1&gt;\u00a1Hola, mundo!&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"content/p2/#paso-3-importar-y-usar-el-componente","title":"Paso 3: Importar y usar el componente","text":"<p>En otro archivo (por ejemplo, <code>App.jsx</code>), puedes importar y usar el componente como si fuera una etiqueta HTML.</p> <pre><code>import Saludo from './Saludo';\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;Saludo /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Cuando el navegador renderice esto, ver\u00e1s: \u00a1Hola, mundo! en la pantalla.</p>"},{"location":"content/p2/#4-que-es-jsx","title":"4. \u00bfQu\u00e9 es JSX?","text":"<p>JSX es una extensi\u00f3n de JavaScript que permite escribir c\u00f3digo que parece HTML dentro de archivos JavaScript. Es como una mezcla de HTML y JavaScript que React usa para definir la estructura de los componentes.</p> <p>Por ejemplo:</p> <pre><code>const elemento = &lt;h1&gt;\u00a1Hola, mundo!&lt;/h1&gt;;\n</code></pre> <p>Aunque parece HTML, en realidad JSX se convierte en llamadas a funciones de JavaScript. Por ejemplo, el c\u00f3digo anterior se transforma en:</p> <pre><code>const elemento = React.createElement('h1', null, '\u00a1Hola, mundo!');\n</code></pre> <p>No necesitas entender esto a fondo, solo saber que JSX hace que escribir interfaces sea m\u00e1s f\u00e1cil y legible.</p>"},{"location":"content/p2/#reglas-basicas-de-jsx","title":"Reglas b\u00e1sicas de JSX:","text":"<ol> <li>Siempre debe haber un elemento padre: Si devuelves varios elementos, envu\u00e9lvelos en un <code>&lt;div&gt;</code> o en un Fragment (<code>&lt;&gt;</code>).    <pre><code>return (\n  &lt;&gt;\n    &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n    &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\n  &lt;/&gt;\n);\n</code></pre></li> <li>Atributos como en HTML, pero con camelCase: Por ejemplo, en vez de <code>class</code>, usas <code>className</code>.    <pre><code>&lt;div className=\"contenedor\"&gt;Contenido&lt;/div&gt;\n</code></pre></li> <li>C\u00f3digo JavaScript dentro de llaves <code>{}</code>: Puedes insertar variables o expresiones dentro de JSX usando llaves.    <pre><code>const nombre = \"Juan\";\nreturn &lt;h1&gt;\u00a1Hola, {nombre}!&lt;/h1&gt;;\n</code></pre></li> </ol>"},{"location":"content/p2/#5-props-hacer-componentes-dinamicos","title":"5. Props: Hacer componentes din\u00e1micos","text":"<p>Las props (propiedades) son como los par\u00e1metros de una funci\u00f3n. Permiten pasar datos a un componente para que sea din\u00e1mico y reutilizable.</p>"},{"location":"content/p2/#ejemplo-con-props","title":"Ejemplo con props:","text":"<pre><code>function Saludo(props) {\n  return &lt;h1&gt;\u00a1Hola, {props.nombre}!&lt;/h1&gt;;\n}\n</code></pre> <p>Usamos el componente as\u00ed:</p> <pre><code>&lt;Saludo nombre=\"Juan\" /&gt;\n&lt;Saludo nombre=\"Mar\u00eda\" /&gt;\n</code></pre> <p>Esto renderizar\u00e1: - \u00a1Hola, Juan! - \u00a1Hola, Mar\u00eda!</p>"},{"location":"content/p2/#desestructuracion-de-props","title":"Desestructuraci\u00f3n de props","text":"<p>Para que el c\u00f3digo sea m\u00e1s limpio, puedes desestructurar las props directamente en los par\u00e1metros de la funci\u00f3n:</p> <pre><code>function Saludo({ nombre }) {\n  return &lt;h1&gt;\u00a1Hola, {nombre}!&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"content/p2/#props-multiples","title":"Props m\u00faltiples","text":"<p>Puedes pasar tantas props como quieras, como si fueran atributos HTML:</p> <pre><code>function Saludo({ nombre, edad }) {\n  return &lt;h1&gt;\u00a1Hola, {nombre}! Tienes {edad} a\u00f1os.&lt;/h1&gt;;\n}\n</code></pre> <p>Uso:</p> <pre><code>&lt;Saludo nombre=\"Juan\" edad={25} /&gt;\n</code></pre>"},{"location":"content/p2/#6-estado-state-en-componentes","title":"6. Estado (State) en componentes","text":"<p>El estado es una forma de almacenar datos que pueden cambiar con el tiempo dentro de un componente. Por ejemplo, si quieres contar cu\u00e1ntas veces alguien hace clic en un bot\u00f3n, necesitas un estado para almacenar ese n\u00famero.</p> <p>En componentes funcionales, usamos el Hook <code>useState</code> para manejar el estado.</p>"},{"location":"content/p2/#ejemplo-con-usestate","title":"Ejemplo con <code>useState</code>:","text":"<pre><code>import { useState } from 'react';\n\nfunction Contador() {\n  const [contador, setContador] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Has hecho clic {contador} veces&lt;/p&gt;\n      &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;\n        Haz clic\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p2/#explicacion","title":"Explicaci\u00f3n:","text":"<ol> <li><code>useState(0)</code>: Crea una variable de estado (<code>contador</code>) con un valor inicial de <code>0</code> y una funci\u00f3n (<code>setContador</code>) para actualizarla.</li> <li>Evento <code>onClick</code>: Cuando haces clic en el bot\u00f3n, llamas a <code>setContador</code> para incrementar el valor de <code>contador</code>.</li> <li>React re-renderiza: Cada vez que el estado cambia, React actualiza el componente para reflejar el nuevo valor.</li> </ol>"},{"location":"content/p2/#7-manejo-de-eventos","title":"7. Manejo de eventos","text":"<p>En React, los eventos (como clics, cambios en un input, etc.) se manejan con atributos que empiezan con <code>on</code>, como <code>onClick</code>, <code>onChange</code>, etc. Los valores de estos atributos son funciones.</p> <p>Ejemplo con un formulario:</p> <pre><code>import { useState } from 'react';\n\nfunction Formulario() {\n  const [nombre, setNombre] = useState('');\n\n  const manejarCambio = (evento) =&gt; {\n    setNombre(evento.target.value);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=\"text\"\n        value={nombre}\n        onChange={manejarCambio}\n        placeholder=\"Escribe tu nombre\"\n      /&gt;\n      &lt;p&gt;Hola, {nombre}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p2/#explicacion_1","title":"Explicaci\u00f3n:","text":"<ul> <li><code>onChange</code>: Se dispara cada vez que el usuario escribe en el input.</li> <li><code>evento.target.value</code>: Obtiene el valor actual del input.</li> <li><code>setNombre</code>: Actualiza el estado con el nuevo valor.</li> </ul>"},{"location":"content/p2/#8-componentes-anidados-y-composicion","title":"8. Componentes anidados y composici\u00f3n","text":"<p>Los componentes pueden contener otros componentes, lo que permite crear interfaces complejas. Esto se llama composici\u00f3n.</p> <p>Ejemplo:</p> <pre><code>function Boton() {\n  return &lt;button&gt;Haz clic&lt;/button&gt;;\n}\n\nfunction Tarjeta() {\n  return (\n    &lt;div className=\"tarjeta\"&gt;\n      &lt;h2&gt;T\u00edtulo de la tarjeta&lt;/h2&gt;\n      &lt;Boton /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;Tarjeta /&gt;\n      &lt;Tarjeta /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>En este ejemplo: - <code>Boton</code> es un componente peque\u00f1o. - <code>Tarjeta</code> usa <code>Boton</code> dentro de su JSX. - <code>App</code> usa <code>Tarjeta</code> dos veces, mostrando dos tarjetas con botones.</p>"},{"location":"content/p2/#9-props-children","title":"9. Props children","text":"<p>A veces, quieres que un componente act\u00fae como un \"contenedor\" que envuelva otros componentes o contenido. Para eso, usas la prop especial <code>children</code>.</p> <p>Ejemplo:</p> <pre><code>function Contenedor({ children }) {\n  return &lt;div className=\"contenedor\"&gt;{children}&lt;/div&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;Contenedor&gt;\n      &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n      &lt;p&gt;Este es el contenido dentro del contenedor.&lt;/p&gt;\n    &lt;/Contenedor&gt;\n  );\n}\n</code></pre> <p>Aqu\u00ed, <code>Contenedor</code> renderiza todo lo que se coloque entre sus etiquetas de apertura y cierre.</p>"},{"location":"content/p2/#10-ciclo-de-vida-en-componentes-funcionales","title":"10. Ciclo de vida en componentes funcionales","text":"<p>Aunque los componentes funcionales no tienen m\u00e9todos de ciclo de vida como los componentes de clase, puedes simularlos con el Hook <code>useEffect</code>.</p>"},{"location":"content/p2/#ejemplo-con-useeffect","title":"Ejemplo con <code>useEffect</code>:","text":"<pre><code>import { useState, useEffect } from 'react';\n\nfunction Temporizador() {\n  const [segundos, setSegundos] = useState(0);\n\n  useEffect(() =&gt; {\n    const intervalo = setInterval(() =&gt; {\n      setSegundos((prev) =&gt; prev + 1);\n    }, 1000);\n\n    return () =&gt; clearInterval(intervalo); // Limpieza\n  }, []); // [] significa que se ejecuta solo al montar el componente\n\n  return &lt;p&gt;Han pasado {segundos} segundos&lt;/p&gt;;\n}\n</code></pre>"},{"location":"content/p2/#explicacion_2","title":"Explicaci\u00f3n:","text":"<ul> <li><code>useEffect</code>: Ejecuta c\u00f3digo cuando el componente se monta, actualiza o desmonta.</li> <li><code>[]</code>: Indica que el efecto solo se ejecuta una vez (al montar).</li> <li>Funci\u00f3n de limpieza: El <code>return</code> dentro de <code>useEffect</code> limpia el intervalo cuando el componente se desmonta, evitando problemas de memoria.</li> </ul>"},{"location":"content/p2/#11-buenas-practicas-para-componentes","title":"11. Buenas pr\u00e1cticas para componentes","text":"<ol> <li>Nombra los componentes con may\u00fascula inicial: Por ejemplo, <code>Saludo</code>, no <code>saludo</code>.</li> <li>Mant\u00e9n los componentes peque\u00f1os y enfocados: Un componente debe hacer una sola cosa bien.</li> <li>Usa nombres descriptivos: <code>BotonPrimario</code> es mejor que <code>Boton1</code>.</li> <li>Reutiliza componentes: Si algo se repite, convi\u00e9rtelo en un componente.</li> <li>Evita l\u00f3gica compleja dentro de JSX: Mueve la l\u00f3gica a funciones o Hooks.</li> </ol>"},{"location":"content/p2/#12-ejemplo-completo-lista-de-tareas","title":"12. Ejemplo completo: Lista de tareas","text":"<p>Vamos a combinar todo en un ejemplo pr\u00e1ctico: una lista de tareas.</p> <pre><code>import { useState } from 'react';\n\nfunction Tarea({ texto, completada }) {\n  return (\n    &lt;li style={{ textDecoration: completada ? 'line-through' : 'none' }}&gt;\n      {texto}\n    &lt;/li&gt;\n  );\n}\n\nfunction ListaTareas() {\n  const [tareas, setTareas] = useState([\n    { texto: 'Aprender React', completada: false },\n    { texto: 'Hacer la compra', completada: true },\n  ]);\n  const [nuevaTarea, setNuevaTarea] = useState('');\n\n  const agregarTarea = () =&gt; {\n    if (nuevaTarea.trim()) {\n      setTareas([...tareas, { texto: nuevaTarea, completada: false }]);\n      setNuevaTarea('');\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Lista de tareas&lt;/h2&gt;\n      &lt;input\n        type=\"text\"\n        value={nuevaTarea}\n        onChange={(e) =&gt; setNuevaTarea(e.target.value)}\n        placeholder=\"Nueva tarea\"\n      /&gt;\n      &lt;button onClick={agregarTarea}&gt;Agregar&lt;/button&gt;\n      &lt;ul&gt;\n        {tareas.map((tarea, index) =&gt; (\n          &lt;Tarea key={index} texto={tarea.texto} completada={tarea.completada} /&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction App() {\n  return &lt;ListaTareas /&gt;;\n}\n\nexport default App;\n</code></pre>"},{"location":"content/p2/#explicacion_3","title":"Explicaci\u00f3n:","text":"<ul> <li><code>Tarea</code>: Un componente que muestra una tarea con estilo condicional (tachado si est\u00e1 completada).</li> <li><code>ListaTareas</code>: Maneja el estado de las tareas y el formulario para agregar nuevas.</li> <li><code>.map</code>: Renderiza una lista de componentes <code>Tarea</code> bas\u00e1ndose en el array <code>tareas</code>.</li> <li><code>key</code>: Cada elemento en una lista necesita una prop <code>key</code> \u00fanica para que React pueda optimizar los cambios.</li> </ul>"},{"location":"content/p2/#tutorial-de-nextjs-app","title":"Tutorial de Next.js (App)","text":""},{"location":"content/p2/#requisitos-previos","title":"Requisitos previos","text":"<ul> <li>Node.js: Aseg\u00farate de tener Node.js instalado (versi\u00f3n 18 o superior recomendada). Desc\u00e1rgalo desde nodejs.org.</li> <li>Editor de c\u00f3digo: Usa Visual Studio Code o cualquier editor de tu preferencia.</li> <li>Conocimientos b\u00e1sicos de JavaScript y React.</li> </ul>"},{"location":"content/p2/#paso-1-crear-un-proyecto-de-nextjs","title":"Paso 1: Crear un proyecto de Next.js","text":"<ol> <li>Abre una terminal y ejecuta el siguiente comando para crear un nuevo proyecto de Next.js:    <pre><code>npx create-next-app@latest mi-proyecto-next\n</code></pre></li> <li>Responde las preguntas que aparecer\u00e1n:</li> <li>\u00bfQuieres usar TypeScript? No (para mantenerlo simple, pero puedes elegir S\u00ed si prefieres).</li> <li>\u00bfUsar ESLint? S\u00ed.</li> <li>\u00bfUsar Tailwind CSS? S\u00ed (opcional, facilita los estilos).</li> <li>\u00bfUsar <code>src/</code> directory? No (para mantener la estructura simple).</li> <li>\u00bfUsar App Router? S\u00ed (es la opci\u00f3n recomendada).</li> <li> <p>\u00bfImport alias? Selecciona la opci\u00f3n predeterminada.</p> </li> <li> <p>Navega al directorio del proyecto:    <pre><code>cd mi-proyecto-next\n</code></pre></p> </li> <li> <p>Inicia el servidor de desarrollo:    <pre><code>npm run dev\n</code></pre>    Abre tu navegador en <code>http://localhost:3000</code> y ver\u00e1s la p\u00e1gina inicial de Next.js.</p> </li> </ol>"},{"location":"content/p2/#paso-2-entender-la-estructura-del-proyecto","title":"Paso 2: Entender la estructura del proyecto","text":"<p>Next.js con App Router utiliza la carpeta <code>app/</code> para definir las rutas y componentes de tu aplicaci\u00f3n. Aqu\u00ed est\u00e1 la estructura b\u00e1sica:</p> <pre><code>mi-proyecto-next/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 layout.js       # Dise\u00f1o global de la aplicaci\u00f3n\n\u2502   \u251c\u2500\u2500 page.js         # P\u00e1gina principal (ruta ra\u00edz: /)\n\u2502   \u251c\u2500\u2500 globals.css     # Estilos globales\n\u251c\u2500\u2500 public/             # Archivos est\u00e1ticos (im\u00e1genes, fuentes, etc.)\n\u251c\u2500\u2500 package.json        # Depend\uff0c\u5feb# Dependencias y configuraci\u00f3n del proyecto\n</code></pre> <ul> <li>app/layout.js: Define el dise\u00f1o global (HTML base, navegaci\u00f3n, etc.).</li> <li>app/page.js: Componente que renderiza la p\u00e1gina principal (<code>/</code>).</li> <li>public/: Carpeta para archivos est\u00e1ticos como im\u00e1genes.</li> </ul>"},{"location":"content/p2/#paso-3-crear-una-pagina-simple","title":"Paso 3: Crear una p\u00e1gina simple","text":"<ol> <li>Abre <code>app/page.js</code> y reemplaza su contenido con lo siguiente:    <pre><code>export default function Home() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;\u00a1Bienvenido a mi aplicaci\u00f3n Next.js!&lt;/h1&gt;\n      &lt;p&gt;Este es un tutorial b\u00e1sico para aprender Next.js con App Router.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></li> <li>Guarda el archivo. El navegador se actualizar\u00e1 autom\u00e1ticamente (gracias a la recarga en caliente) y ver\u00e1s tu nueva p\u00e1gina en <code>http://localhost:3000</code>.</li> </ol>"},{"location":"content/p2/#paso-4-agregar-una-nueva-ruta","title":"Paso 4: Agregar una nueva ruta","text":"<p>Con App Router, las rutas se crean autom\u00e1ticamente seg\u00fan la estructura de carpetas en <code>app/</code>.</p> <ol> <li>Crea una nueva carpeta dentro de <code>app/</code> llamada <code>acerca</code>.</li> <li>Dentro de <code>app/acerca/</code>, crea un archivo <code>page.js</code> con el siguiente contenido:    <pre><code>export default function Acerca() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Acerca de Nosotros&lt;/h1&gt;\n      &lt;p&gt;Esta es la p\u00e1gina de informaci\u00f3n sobre nuestra aplicaci\u00f3n.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></li> <li>Guarda y visita <code>http://localhost:3000/acerca</code>. Ver\u00e1s la nueva p\u00e1gina.</li> </ol>"},{"location":"content/p2/#paso-5-agregar-estilos-con-tailwind-css","title":"Paso 5: Agregar estilos con Tailwind CSS","text":"<p>Si seleccionaste Tailwind CSS al crear el proyecto, puedes usarlo para estilizar tus componentes.</p> <ol> <li>Modifica <code>app/page.js</code> para agregar clases de Tailwind:    <pre><code>export default function Home() {\n  return (\n    &lt;div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\"&gt;\n      &lt;h1 className=\"text-4xl font-bold text-blue-600\"&gt;\u00a1Bienvenido a mi aplicaci\u00f3n Next.js!&lt;/h1&gt;\n      &lt;p className=\"mt-4 text-lg text-gray-700\"&gt;\n        Este es un tutorial b\u00e1sico para aprender Next.js con App Router.\n      &lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></li> <li>Guarda y observa c\u00f3mo la p\u00e1gina ahora tiene un dise\u00f1o m\u00e1s atractivo.</li> </ol>"},{"location":"content/p2/#paso-6-agregar-un-componente-reutilizable","title":"Paso 6: Agregar un componente reutilizable","text":"<ol> <li>Crea una carpeta <code>components/</code> en la ra\u00edz del proyecto.</li> <li>Dentro de <code>components/</code>, crea un archivo <code>Navbar.js</code>:    <pre><code>export default function Navbar() {\n  return (\n    &lt;nav className=\"bg-blue-600 p-4\"&gt;\n      &lt;ul className=\"flex space-x-4 text-white\"&gt;\n        &lt;li&gt;&lt;a href=\"/\"&gt;Inicio&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"/acerca\"&gt;Acerca&lt;/a&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/nav&gt;\n  );\n}\n</code></pre></li> <li>Modifica <code>app/layout.js</code> para incluir el componente <code>Navbar</code>:    <pre><code>import Navbar from '../components/Navbar';\nimport './globals.css';\n\nexport const metadata = {\n  title: 'Mi App Next.js',\n  description: 'Tutorial b\u00e1sico de Next.js',\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    &lt;html lang=\"es\"&gt;\n      &lt;body&gt;\n        &lt;Navbar /&gt;\n        {children}\n      &lt;/body&gt;\n    &lt;/html&gt;\n  );\n}\n</code></pre></li> <li>Guarda y verifica que la barra de navegaci\u00f3n aparece en todas las p\u00e1ginas.</li> </ol>"},{"location":"content/p2/#paso-7-agregar-datos-dinamicos-api-simple","title":"Paso 7: Agregar datos din\u00e1micos (API simple)","text":"<p>Next.js permite crear rutas de API en la carpeta <code>app/api/</code>.</p> <ol> <li>Crea una carpeta <code>app/api/hola/</code> y dentro un archivo <code>route.js</code>:    <pre><code>export async function GET() {\n  return Response.json({ mensaje: \"\u00a1Hola desde la API de Next.js!\" });\n}\n</code></pre></li> <li> <p>Abre el navegador o usa una herramienta como Postman para visitar <code>http://localhost:3000/api/hola</code>. Ver\u00e1s el JSON: <code>{\"mensaje\": \"\u00a1Hola desde la API de Next.js!\"}</code>.</p> </li> <li> <p>Para mostrar estos datos en la p\u00e1gina principal, modifica <code>app/page.js</code>:    <pre><code>export default async function Home() {\n  const res = await fetch('http://localhost:3000/api/hola');\n  const data = await res.json();\n\n  return (\n    &lt;div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\"&gt;\n      &lt;h1 className=\"text-4xl font-bold text-blue-600\"&gt;\u00a1Bienvenido a mi aplicaci\u00f3n Next.js!&lt;/h1&gt;\n      &lt;p className=\"mt-4 text-lg text-gray-700\"&gt;{data.mensaje}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></p> </li> <li>Guarda y verifica que el mensaje de la API aparece en la p\u00e1gina principal.</li> </ol>"},{"location":"content/p3/","title":"Clase 4 Crear Componentes en React con Next.js (JavaScript) y Estilizar con CSS","text":""},{"location":"content/p3/#que-son-las-props-en-react","title":"\u00bfQu\u00e9 son las props en React?","text":"<p>Las props (propiedades) son un mecanismo en React para pasar datos de un componente padre a un componente hijo. Son inmutables desde el componente hijo, lo que significa que el hijo no puede modificar las props directamente. Las props permiten que los componentes sean reutilizables y din\u00e1micos.</p> <ul> <li>Caracter\u00edsticas principales:</li> <li>Son un objeto (<code>props</code>) que contiene los datos pasados al componente.</li> <li>Pueden incluir cualquier tipo de dato: cadenas, n\u00fameros, objetos, arreglos, funciones, componentes, etc.</li> <li>Son unidireccionales (del padre al hijo).</li> <li>Son opcionales, pero se pueden establecer valores por defecto.</li> </ul>"},{"location":"content/p3/#formas-de-usar-props-en-react","title":"Formas de usar props en React","text":""},{"location":"content/p3/#1-pasar-props-basicas-cadenas-numeros-booleanos","title":"1. Pasar props b\u00e1sicas (cadenas, n\u00fameros, booleanos)","text":"<p>Las props m\u00e1s simples son valores primitivos como cadenas, n\u00fameros o booleanos.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Saludo(props) {\n  return &lt;h1&gt;Hola, {props.nombre}!&lt;/h1&gt;;\n}\n\n// Componente padre\nfunction App() {\n  return &lt;Saludo nombre=\"Juan\" /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>El componente padre <code>App</code> pasa la prop <code>nombre</code> con el valor <code>\"Juan\"</code>.</li> <li>El componente hijo <code>Saludo</code> accede a la prop a trav\u00e9s del objeto <code>props</code> (<code>props.nombre</code>).</li> <li>En el renderizado, se muestra \"Hola, Juan!\".</li> </ul> <p>Salida: <pre><code>Hola, Juan!\n</code></pre></p>"},{"location":"content/p3/#2-desestructuracion-de-props","title":"2. Desestructuraci\u00f3n de props","text":"<p>En componentes funcionales, puedes desestructurar las props directamente en los par\u00e1metros para escribir un c\u00f3digo m\u00e1s limpio.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo con desestructuraci\u00f3n\nfunction Saludo({ nombre, edad }) {\n  return &lt;h1&gt;Hola, {nombre}. Tienes {edad} a\u00f1os.&lt;/h1&gt;;\n}\n\n// Componente padre\nfunction App() {\n  return &lt;Saludo nombre=\"Ana\" edad={25} /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>En lugar de usar <code>props.nombre</code> y <code>props.edad</code>, desestructuramos <code>{ nombre, edad }</code> en los par\u00e1metros.</li> <li>Esto hace que el c\u00f3digo sea m\u00e1s legible y evita repetir <code>props.</code>.</li> </ul> <p>Salida: <pre><code>Hola, Ana. Tienes 25 a\u00f1os.\n</code></pre></p>"},{"location":"content/p3/#3-pasar-objetos-o-arreglos-como-props","title":"3. Pasar objetos o arreglos como props","text":"<p>Puedes pasar estructuras de datos m\u00e1s complejas, como objetos o arreglos, como props.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Perfil({ usuario }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{usuario.nombre}&lt;/h2&gt;\n      &lt;p&gt;Hobbies: {usuario.hobbies.join(\", \")}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Componente padre\nfunction App() {\n  const usuario = {\n    nombre: \"Mar\u00eda\",\n    hobbies: [\"leer\", \"caminar\", \"programar\"],\n  };\n  return &lt;Perfil usuario={usuario} /&gt;;\n}\n</code></pre> <p>chatbot Explicaci\u00f3n:</p> <ul> <li>La prop <code>usuario</code> es un objeto que contiene <code>nombre</code> y <code>hobbies</code>.</li> <li>En el componente hijo, accedemos a las propiedades del objeto con <code>usuario.nombre</code> y <code>usuario.hobbies</code>.</li> <li>Usamos <code>join(\", \")</code> para convertir el arreglo de hobbies en una cadena separada por comas.</li> </ul> <p>Salida: <pre><code>Mar\u00eda\nHobbies: leer, caminar, programar\n</code></pre></p>"},{"location":"content/p3/#4-pasar-funciones-como-props","title":"4. Pasar funciones como props","text":"<p>Puedes pasar funciones como props para permitir que el componente hijo ejecute l\u00f3gica definida en el componente padre.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Boton({ onClick, texto }) {\n  return &lt;button onClick={onClick}&gt;{texto}&lt;/button&gt;;\n}\n\n// Componente padre\nfunction App() {\n  const manejarClick = () =&gt; {\n    alert(\"\u00a1Bot\u00f3n clicado!\");\n  };\n\n  return &lt;Boton onClick={manejarClick} texto=\"Clic aqu\u00ed\" /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La prop <code>onClick</code> es una funci\u00f3n que se pasa desde el componente padre.</li> <li>Cuando el usuario hace clic en el bot\u00f3n, se ejecuta la funci\u00f3n <code>manejarClick</code> definida en el componente padre.</li> </ul> <p>Salida: Un bot\u00f3n con el texto \"Clic aqu\u00ed\" que muestra una alerta al hacer clic.</p>"},{"location":"content/p3/#5-pasar-componentes-como-props-render-props","title":"5. Pasar componentes como props (Render Props)","text":"<p>Puedes pasar un componente como prop, lo que permite renderizar contenido din\u00e1mico en el componente hijo.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Contenedor({ contenido }) {\n  return &lt;div&gt;{contenido}&lt;/div&gt;;\n}\n\n// Componente padre\nfunction App() {\n  const ContenidoDinamico = &lt;h1&gt;\u00a1Este es un componente din\u00e1mico!&lt;/h1&gt;;\n  return &lt;Contenedor contenido={ContenidoDinamico} /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n: - La prop <code>contenido</code> es un elemento JSX que se renderiza directamente en el componente hijo. - Esto es \u00fatil para patrones como \"render props\", donde el hijo decide c\u00f3mo renderizar contenido pasado por el padre.</p> <p>Salida: <pre><code>\u00a1Este es un componente din\u00e1mico!\n</code></pre></p>"},{"location":"content/p3/#6-props-con-children","title":"6. Props con children","text":"<p>La prop especial <code>children</code> permite pasar contenido entre las etiquetas de apertura y cierre de un componente.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Caja({ children }) {\n  return &lt;div style={{ border: \"1px solid black\", padding: \"10px\" }}&gt;{children}&lt;/div&gt;;\n}\n\n// Componente padre\nfunction App() {\n  return (\n    &lt;Caja&gt;\n      &lt;h1&gt;T\u00edtulo dentro de la caja&lt;/h1&gt;\n      &lt;p&gt;Este es un p\u00e1rrafo.&lt;/p&gt;\n    &lt;/Caja&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Todo lo que se coloca entre <code>&lt;Caja&gt;</code> y <code>&lt;/Caja&gt;</code> se pasa como la prop <code>children</code>.</li> <li>El componente hijo renderiza <code>children</code> donde desee.</li> </ul> <p>Salida: Un <code>div</code> con borde que contiene un t\u00edtulo y un p\u00e1rrafo.</p>"},{"location":"content/p3/#7-valores-por-defecto-con-defaultprops","title":"7. Valores por defecto con defaultProps","text":"<p>Puedes definir valores por defecto para las props usando <code>defaultProps</code> en componentes funcionales o de clase.</p> <p>Ejemplo (Componente funcional):</p> <pre><code>// Componente hijo\nfunction Saludo({ nombre }) {\n  return &lt;h1&gt;Hola, {nombre}!&lt;/h1&gt;;\n}\n\nSaludo.defaultProps = {\n  nombre: \"Invitado\",\n};\n\n// Componente padre\nfunction App() {\n  return &lt;Saludo /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Si no se pasa la prop <code>nombre</code>, se usa el valor por defecto <code>\"Invitado\"</code>.</li> <li>Esto es \u00fatil para evitar errores cuando las props no se proporcionan.</li> </ul> <p>Salida: <pre><code>Hola, Invitado!\n</code></pre></p>"},{"location":"content/p3/#8-validacion-de-props-con-proptypes","title":"8. Validaci\u00f3n de props con PropTypes","text":"<p>Para asegurar que las props tengan el tipo y formato correctos, puedes usar la librer\u00eda <code>prop-types</code>.</p> <p>Instalaci\u00f3n: <pre><code>npm install prop-types\n</code></pre></p> <p>Ejemplo:</p> <pre><code>import PropTypes from 'prop-types';\n\n// Componente hijo\nfunction Perfil({ nombre, edad, activo }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Edad: {edad}&lt;/p&gt;\n      &lt;p&gt;{activo ? \"Activo\" : \"Inactivo\"}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nPerfil.propTypes = {\n  nombre: PropTypes.string.isRequired,\n  edad: PropTypes.number.isRequired,\n  activo: PropTypes.bool,\n};\n\nPerfil.defaultProps = {\n  activo: false,\n};\n\n// Componente padre\nfunction App() {\n  return &lt;Perfil nombre=\"Carlos\" edad={30} /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>PropTypes.string.isRequired</code> asegura que <code>nombre</code> sea una cadena y sea obligatorio.</li> <li><code>PropTypes.number.isRequired</code> asegura que <code>edad</code> sea un n\u00famero y obligatorio.</li> <li><code>PropTypes.bool</code> indica que <code>activo</code> debe ser un booleano, pero es opcional.</li> <li>Si no se pasa <code>activo</code>, se usa el valor por defecto <code>false</code>.</li> </ul> <p>Salida: <pre><code>Carlos\nEdad: 30\nInactivo\n</code></pre></p>"},{"location":"content/p3/#9-props-en-componentes-de-clase","title":"9. Props en componentes de clase","text":"<p>Aunque los componentes funcionales son m\u00e1s comunes, las props tambi\u00e9n funcionan en componentes de clase.</p> <p>Ejemplo:</p> <pre><code>import React from 'react';\n\nclass Saludo extends React.Component {\n  render() {\n    return &lt;h1&gt;Hola, {this.props.nombre}!&lt;/h1&gt;;\n  }\n}\n\n// Componente padre\nfunction App() {\n  return &lt;Saludo nombre=\"Sof\u00eda\" /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>En componentes de clase, las props se acceden con <code>this.props</code>.</li> <li>El resto del comportamiento es id\u00e9ntico a los componentes funcionales.</li> </ul> <p>Salida: <pre><code>Hola, Sof\u00eda!\n</code></pre></p>"},{"location":"content/p3/#10-props-con-funciones-de-renderizado-render-props-pattern","title":"10. Props con funciones de renderizado (Render Props Pattern)","text":"<p>El patr\u00f3n de \"render props\" consiste en pasar una funci\u00f3n como prop que el componente hijo usa para renderizar contenido.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction RenderProp({ render }) {\n  const datos = { nombre: \"Luc\u00eda\", edad: 28 };\n  return &lt;div&gt;{render(datos)}&lt;/div&gt;;\n}\n\n// Componente padre\nfunction App() {\n  return (\n    &lt;RenderProp\n      render={(datos) =&gt; (\n        &lt;h1&gt;\n          {datos.nombre} tiene {datos.edad} a\u00f1os\n        &lt;/h1&gt;\n      )}\n    /&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La prop <code>render</code> es una funci\u00f3n que recibe datos del componente hijo y devuelve JSX.</li> <li>Esto permite que el componente padre controle c\u00f3mo se renderizan los datos del hijo.</li> </ul> <p>Salida: <pre><code>Luc\u00eda tiene 28 a\u00f1os\n</code></pre></p>"},{"location":"content/p3/#11-pasar-multiples-props-con-el-operador-spread","title":"11. Pasar m\u00faltiples props con el operador spread","text":"<p>El operador spread (<code>...</code>) permite pasar m\u00faltiples props de forma concisa.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Perfil({ nombre, edad, ciudad }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Edad: {edad}&lt;/p&gt;\n      &lt;p&gt;Ciudad: {ciudad}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Componente padre\nfunction App() {\n  const props = { nombre: \"Pedro\", edad: 35, ciudad: \"Madrid\" };\n  return &lt;Perfil {...props} /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n: - El operador spread (<code>...props</code>) descompone el objeto <code>props</code> en props individuales. - Es equivalente a escribir <code>&lt;Perfil nombre=\"Pedro\" edad={35} ciudad=\"Madrid\" /&gt;</code>.</p> <p>Salida: <pre><code>Pedro\nEdad: 35\nCiudad: Madrid\n</code></pre></p>"},{"location":"content/p3/#12-props-condicionales","title":"12. Props condicionales","text":"<p>Puedes pasar props condicionalmente usando operadores ternarios o l\u00f3gicos.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Boton({ texto, deshabilitado }) {\n  return &lt;button disabled={deshabilitado}&gt;{texto}&lt;/button&gt;;\n}\n\n// Componente padre\nfunction App() {\n  const estaDeshabilitado = true;\n  return &lt;Boton texto=\"Enviar\" deshabilitado={estaDeshabilitado} /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La prop <code>deshabilitado</code> se pasa condicionalmente seg\u00fan el estado o l\u00f3gica del componente padre.</li> <li>Esto permite controlar el comportamiento del componente hijo din\u00e1micamente.</li> </ul> <p>Salida: Un bot\u00f3n con el texto \"Enviar\" que est\u00e1 deshabilitado.</p>"},{"location":"content/p3/#13-props-con-hooks-y-estado","title":"13. Props con hooks y estado","text":"<p>Puedes combinar props con el estado interno del componente usando hooks como <code>useState</code>.</p> <p>Ejemplo:</p> <pre><code>import { useState } from 'react';\n\n// Componente hijo\nfunction Contador({ incremento }) {\n  const [cuenta, setCuenta] = useState(0);\n\n  const manejarClick = () =&gt; {\n    setCuenta(cuenta + incremento);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Cuenta: {cuenta}&lt;/p&gt;\n      &lt;button onClick={manejarClick}&gt;Incrementar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Componente padre\nfunction App() {\n  return &lt;Contador incremento={2} /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La prop <code>incremento</code> determina cu\u00e1nto se incrementa el contador cada vez que se hace clic.</li> <li>El componente hijo usa <code>useState</code> para manejar su propio estado, pero la prop influye en la l\u00f3gica.</li> </ul> <p>Salida: Un contador que empieza en 0 y aumenta en 2 con cada clic.</p>"},{"location":"content/p3/#buenas-practicas-con-props","title":"Buenas pr\u00e1cticas con props","text":"<ol> <li>Nombres descriptivos: Usa nombres claros para las props (e.g., <code>nombre</code> en lugar de <code>n</code>).</li> <li>Validaci\u00f3n con PropTypes: Siempre valida las props en componentes reutilizables.</li> <li>Evita modificar props: Las props son inmutables; usa el estado para datos que cambian.</li> <li>Desestructura cuando sea posible: Mejora la legibilidad del c\u00f3digo.</li> <li>Evita pasar demasiadas props: Si un componente recibe muchas props, considera usar un objeto o el patr\u00f3n de composici\u00f3n.</li> </ol>"},{"location":"content/p3/#props-en-react-con-typescript","title":"Props en React con TypeScript","text":""},{"location":"content/p3/#introduccion","title":"Introducci\u00f3n","text":"<p>En React, los props son el mecanismo principal para pasar datos de un componente padre a un componente hijo. Con TypeScript, se puede a\u00f1adir tipado est\u00e1tico para mejorar la seguridad y mantenibilidad del c\u00f3digo, asegurando que los props tengan el tipo correcto y evitando errores en tiempo de ejecuci\u00f3n. </p> <p>TypeScript permite definir interfaces o tipos para los props, proporcionando autocompletado, validaci\u00f3n de tipos y mejor documentaci\u00f3n. A continuaci\u00f3n, se presentan ejemplos pr\u00e1cticos en formato MkDocs Material, en espa\u00f1ol.</p>"},{"location":"content/p3/#configuracion-basica","title":"Configuraci\u00f3n B\u00e1sica","text":"<p>Para usar React con TypeScript, aseg\u00farate de tener un proyecto configurado con las siguientes dependencias:</p> <pre><code>npm install typescript @types/react @types/react-dom\n</code></pre> <p>Los archivos de componentes deben tener la extensi\u00f3n <code>.tsx</code>.</p>"},{"location":"content/p3/#definicion-de-props-con-typescript","title":"Definici\u00f3n de Props con TypeScript","text":"<p>Sin usar <code>React.FC</code>, definimos los props mediante una interfaz y tipamos expl\u00edcitamente los par\u00e1metros de la funci\u00f3n del componente.</p>"},{"location":"content/p3/#ejemplo-1-componente-con-props-basicos","title":"Ejemplo 1: Componente con Props B\u00e1sicos","text":"<p>Un componente que muestra el nombre y la edad de una persona.</p> <pre><code>// Definimos la interfaz para los props\ninterface PersonaProps {\n  nombre: string;\n  edad: number;\n}\n\n// Componente funcional con props tipadas\nfunction Persona({ nombre, edad }: PersonaProps) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Edad: {edad}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Uso del componente\nfunction App() {\n  return &lt;Persona nombre=\"Ana\" edad={25} /&gt;;\n}\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n: - La interfaz <code>PersonaProps</code> define las propiedades <code>nombre</code> (string) y <code>edad</code> (number). - En lugar de <code>React.FC</code>, tipamos los props directamente en la desestructuraci\u00f3n de la funci\u00f3n (<code>{ nombre, edad }: PersonaProps</code>). - TypeScript asegura que al usar el componente <code>Persona</code>, se pasen las props con los tipos correctos.</p>"},{"location":"content/p3/#props-opcionales","title":"Props Opcionales","text":"<p>Las props opcionales se marcan con <code>?</code> en la interfaz.</p>"},{"location":"content/p3/#ejemplo-2-props-opcionales","title":"Ejemplo 2: Props Opcionales","text":"<pre><code>interface SaludoProps {\n  mensaje: string;\n  nombre?: string; // Prop opcional\n}\n\nfunction Saludo({ mensaje, nombre }: SaludoProps) {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{mensaje}&lt;/h1&gt;\n      {nombre &amp;&amp; &lt;p&gt;Dirigido a: {nombre}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Saludo mensaje=\"\u00a1Hola, mundo!\" /&gt;\n      &lt;Saludo mensaje=\"\u00a1Bienvenido!\" nombre=\"Carlos\" /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n: - La prop <code>nombre</code> es opcional (<code>nombre?: string</code>). - Usamos una condici\u00f3n (<code>nombre &amp;&amp; ...</code>) para manejar el caso en que <code>nombre</code> no se pase.</p>"},{"location":"content/p3/#props-con-valores-por-defecto","title":"Props con Valores por Defecto","text":"<p>Los valores por defecto se asignan mediante desestructuraci\u00f3n en los par\u00e1metros de la funci\u00f3n.</p>"},{"location":"content/p3/#ejemplo-3-props-con-valores-por-defecto","title":"Ejemplo 3: Props con Valores por Defecto","text":"<pre><code>interface BotonProps {\n  texto: string;\n  color?: string;\n}\n\nfunction Boton({ texto, color = \"azul\" }: BotonProps) {\n  return &lt;button style={{ backgroundColor: color }}&gt;{texto}&lt;/button&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Boton texto=\"Clic aqu\u00ed\" /&gt; {/* Usa color por defecto: azul */}\n      &lt;Boton texto=\"Enviar\" color=\"verde\" /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n: - La prop <code>color</code> es opcional y tiene un valor por defecto de <code>\"azul\"</code> en la desestructuraci\u00f3n. - Esto elimina la necesidad de verificar si <code>color</code> existe en el componente.</p>"},{"location":"content/p3/#props-con-tipos-complejos","title":"Props con Tipos Complejos","text":"<p>TypeScript permite definir props con estructuras m\u00e1s complejas, como objetos, arrays o funciones.</p>"},{"location":"content/p3/#ejemplo-4-props-con-objetos-y-funciones","title":"Ejemplo 4: Props con Objetos y Funciones","text":"<pre><code>interface Producto {\n  id: number;\n  nombre: string;\n  precio: number;\n}\n\ninterface CarritoProps {\n  productos: Producto[];\n  onEliminar: (id: number) =&gt; void;\n}\n\nfunction Carrito({ productos, onEliminar }: CarritoProps) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Carrito de Compras&lt;/h2&gt;\n      &lt;ul&gt;\n        {productos.map((producto) =&gt; (\n          &lt;li key={producto.id}&gt;\n            {producto.nombre} - ${producto.precio}\n            &lt;button onClick={() =&gt; onEliminar(producto.id)}&gt;Eliminar&lt;/button&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction App() {\n  const productosEjemplo: Producto[] = [\n    { id: 1, nombre: \"Laptop\", precio: 1000 },\n    { id: 2, nombre: \"Tel\u00e9fono\", precio: 500 },\n  ];\n\n  const handleEliminar = (id: number) =&gt; {\n    console.log(`Eliminando producto con ID: ${id}`);\n  };\n\n  return &lt;Carrito productos={productosEjemplo} onEliminar={handleEliminar} /&gt;;\n}\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n: - La interfaz <code>Producto</code> define la estructura de un objeto producto. - <code>CarritoProps</code> incluye un array de productos (<code>productos</code>) y una funci\u00f3n (<code>onEliminar</code>). - TypeScript garantiza que la funci\u00f3n <code>onEliminar</code> y los elementos de <code>productos</code> cumplan con los tipos definidos.</p>"},{"location":"content/p3/#props-de-componentes-como-props-children","title":"Props de Componentes como Props (Children)","text":"<p>Los componentes pueden recibir otros componentes o elementos como props a trav\u00e9s de <code>children</code>.</p>"},{"location":"content/p3/#ejemplo-5-usando-children","title":"Ejemplo 5: Usando Children","text":"<pre><code>interface ContenedorProps {\n  children: React.ReactNode;\n  titulo: string;\n}\n\nfunction Contenedor({ children, titulo }: ContenedorProps) {\n  return (\n    &lt;div className=\"contenedor\"&gt;\n      &lt;h2&gt;{titulo}&lt;/h2&gt;\n      {children}\n    &lt;/div&gt;\n  );\n}\n\nfunction App() {\n  return (\n    &lt;Contenedor titulo=\"Mi Contenedor\"&gt;\n      &lt;p&gt;Este es el contenido dentro del contenedor.&lt;/p&gt;\n      &lt;button&gt;Acci\u00f3n&lt;/button&gt;\n    &lt;/Contenedor&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n: - La prop <code>children</code> usa el tipo <code>React.ReactNode</code>, que permite pasar cualquier contenido React v\u00e1lido. - El componente <code>Contenedor</code> renderiza el t\u00edtulo y el contenido pasado como <code>children</code>.</p>"},{"location":"content/p4/","title":"Clase 5 Agregar CSS a Componentes en Next.js","text":"<p>Info</p> <p>Este tutorial explica de forma sencilla las maneras de agregar estilos CSS a componentes en Next.js, excluyendo Styled-Components. Incluye ejemplos pr\u00e1cticos y est\u00e1 optimizado para MkDocs Material, con una estructura clara y ejemplos de componentes funcionales.</p>"},{"location":"content/p4/#introduccion","title":"Introducci\u00f3n","text":"<p>En Next.js, hay varias formas de aplicar estilos CSS a tus componentes React. Este tutorial cubre los m\u00e9todos m\u00e1s comunes (excepto CSS-in-JS con Styled-Components), con ejemplos simples para que puedas entender y aplicar cada uno. Los ejemplos usan componentes funcionales y se centran en una tarjeta de usuario estilizada.</p> <p>Note</p> <p>Aseg\u00farate de tener una aplicaci\u00f3n Next.js configurada (<code>npx create-next-app@latest</code>). Los ejemplos asumen que est\u00e1s usando la carpeta <code>app</code> (App Router) de Next.js.</p>"},{"location":"content/p4/#1-css-global-archivo-css-en-appglobalscss","title":"1. CSS Global (Archivo CSS en <code>/app/globals.css</code>)","text":"<p>Explicaci\u00f3n: Los estilos globales se definen en un archivo CSS general (como <code>globals.css</code>) y afectan a toda la aplicaci\u00f3n. \u00datil para estilos base o temas generales.</p> <p>Pasos:</p> <ol> <li>Usa el archivo <code>/app/globals.css</code> (creado por defecto en Next.js).</li> <li>Importa <code>globals.css</code> en el archivo <code>layout.js</code> (ya est\u00e1 importado por defecto).</li> <li>Aplica clases a tus componentes.</li> </ol> <p>Ejemplo:</p>"},{"location":"content/p4/#archivo-appglobalscss","title":"Archivo: <code>app/globals.css</code>","text":"<pre><code>.tarjeta {\n  border: 1px solid #ccc;\n  padding: 16px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  text-align: center;\n}\n\n.tarjeta h2 {\n  color: #007bff;\n}\n\n.tarjeta button {\n  padding: 8px 16px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.tarjeta button:hover {\n  background-color: #0056b3;\n}\n</code></pre>"},{"location":"content/p4/#archivo-apppagejsx","title":"Archivo: <code>app/page.jsx</code>","text":"<pre><code>export default function Home() {\n  return (\n    &lt;div className=\"tarjeta\"&gt;\n      &lt;h2&gt;Usuario&lt;/h2&gt;\n      &lt;p&gt;\u00a1Bienvenido a Next.js!&lt;/p&gt;\n      &lt;button&gt;Saludar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Tip</p> <p>Los estilos globales son ideales para temas generales, pero evita usarlos para estilos espec\u00edficos para no sobrecargar el archivo.</p>"},{"location":"content/p4/#2-modulos-css-archivos-modulecss","title":"2. M\u00f3dulos CSS (Archivos <code>.module.css</code>)","text":"<p>Explicaci\u00f3n: Los m\u00f3dulos CSS permiten estilos locales y evitan conflictos al generar nombres de clases \u00fanicos. Cada componente tiene su propio archivo <code>.module.css</code>.</p> <p>Pasos: 1. Crea un archivo CSS con la extensi\u00f3n <code>.module.css</code> (ejemplo: <code>Tarjeta.module.css</code>). 2. Importa el m\u00f3dulo en tu componente y usa las clases como propiedades de un objeto.</p> <p>Ejemplo:</p>"},{"location":"content/p4/#archivo-appcomponentstarjetamodulecss","title":"Archivo: <code>app/components/Tarjeta.module.css</code>","text":"<pre><code>.tarjeta {\n  border: 1px solid #ddd;\n  padding: 20px;\n  border-radius: 10px;\n  background-color: #f0f4f8;\n  text-align: center;\n}\n\n.titulo {\n  color: #28a745;\n  font-size: 1.5rem;\n}\n\n.boton {\n  padding: 10px 20px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.boton:hover {\n  background-color: #218838;\n}\n</code></pre>"},{"location":"content/p4/#archivo-appcomponentstarjetajsx","title":"Archivo: <code>app/components/Tarjeta.jsx</code>","text":"<pre><code>import styles from './Tarjeta.module.css';\n\nexport default function Tarjeta({ nombre }) {\n  return (\n    &lt;div className={styles.tarjeta}&gt;\n      &lt;h2 className={styles.titulo}&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Componente con m\u00f3dulo CSS&lt;/p&gt;\n      &lt;button className={styles.boton}&gt;Saludar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p4/#archivo-apppagejsx_1","title":"Archivo: <code>app/page.jsx</code>","text":"<pre><code>import Tarjeta from './components/Tarjeta';\n\nexport default function Home() {\n  return &lt;Tarjeta nombre=\"Ana\" /&gt;;\n}\n</code></pre> <p>Note</p> <p>Los m\u00f3dulos CSS son ideales para componentes reutilizables, ya que los estilos son locales y no afectan a otros componentes.</p>"},{"location":"content/p4/#3-estilos-en-linea-inline-css","title":"3. Estilos en L\u00ednea (Inline CSS)","text":"<p>Explicaci\u00f3n: Los estilos en l\u00ednea se aplican directamente en los elementos JSX usando el atributo <code>style</code> con un objeto JavaScript. \u00datil para estilos din\u00e1micos, pero menos escalable.</p> <p>Ejemplo:</p>"},{"location":"content/p4/#archivo-appcomponentstarjetajsx_1","title":"Archivo: <code>app/components/Tarjeta.jsx</code>","text":"<pre><code>export default function Tarjeta({ nombre }) {\n  const tarjetaEstilo = {\n    border: '1px solid #aaa',\n    padding: '16px',\n    borderRadius: '8px',\n    backgroundColor: '#f9f9f9',\n    textAlign: 'center',\n  };\n\n  const botonEstilo = {\n    padding: '8px 16px',\n    backgroundColor: '#dc3545',\n    color: 'white',\n    border: 'none',\n    borderRadius: '4px',\n    cursor: 'pointer',\n  };\n\n  return (\n    &lt;div style={tarjetaEstilo}&gt;\n      &lt;h2 style={{ color: '#dc3545' }}&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Estilos en l\u00ednea&lt;/p&gt;\n      &lt;button style={botonEstilo}&gt;Saludar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Warning</p> <p>Los estilos en l\u00ednea no admiten pseudoclases como <code>:hover</code>. \u00dasalos solo para casos simples o din\u00e1micos.</p>"},{"location":"content/p4/#4-tailwind-css-integrado-en-nextjs","title":"4. Tailwind CSS (Integrado en Next.js)","text":"<p>Explicaci\u00f3n: Tailwind CSS es una biblioteca de utilidad que permite estilizar directamente en el JSX con clases predefinidas. Next.js tiene soporte nativo para Tailwind.</p> <p>Pasos: 1. Instala Tailwind: <code>npm install -D tailwindcss postcss autoprefixer</code>, luego ejecuta <code>npx tailwindcss init -p</code>. 2. Configura <code>tailwind.config.js</code> y a\u00f1ade las directivas en <code>app/globals.css</code>. 3. Usa clases de Tailwind en tus componentes.</p> <p>Ejemplo:</p>"},{"location":"content/p4/#archivo-tailwindconfigjs","title":"Archivo: <code>tailwind.config.js</code>","text":"<pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx}',\n    './pages/**/*.{js,ts,jsx,tsx}',\n    './components/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n</code></pre>"},{"location":"content/p4/#archivo-appglobalscss_1","title":"Archivo: <code>app/globals.css</code>","text":"<pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre>"},{"location":"content/p4/#archivo-appcomponentstarjetajsx_2","title":"Archivo: <code>app/components/Tarjeta.jsx</code>","text":"<pre><code>export default function Tarjeta({ nombre }) {\n  return (\n    &lt;div className=\"border border-gray-300 p-4 rounded-lg bg-gray-50 text-center\"&gt;\n      &lt;h2 className=\"text-2xl text-blue-600\"&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Estilizado con Tailwind CSS&lt;/p&gt;\n      &lt;button className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"&gt;\n        Saludar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Tip</p> <p>Tailwind es ideal para desarrollo r\u00e1pido y consistente. Usa la documentaci\u00f3n oficial para explorar todas las clases disponibles.</p>"},{"location":"content/p4/#ejemplo-completo-con-todos-los-metodos","title":"Ejemplo Completo con Todos los M\u00e9todos","text":""},{"location":"content/p4/#archivo-appcomponentstarjetajsx_3","title":"Archivo: <code>app/components/Tarjeta.jsx</code>","text":"<pre><code>import styles from './Tarjeta.module.css';\n\nexport default function Tarjeta({ nombre, metodo }) {\n  if (metodo === 'global') {\n    return (\n      &lt;div className=\"tarjeta\"&gt;\n        &lt;h2&gt;{nombre}&lt;/h2&gt;\n        &lt;p&gt;Estilos Globales&lt;/p&gt;\n        &lt;button&gt;Saludar&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  if (metodo === 'modulo') {\n    return (\n      &lt;div className={styles.tarjeta}&gt;\n        &lt;h2 className={styles.titulo}&gt;{nombre}&lt;/h2&gt;\n        &lt;p&gt;Estilos con M\u00f3dulo CSS&lt;/p&gt;\n        &lt;button className={styles.boton}&gt;Saludar&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  if (metodo === 'inline') {\n    return (\n      &lt;div\n        style={{\n          border: '1px solid #aaa',\n          padding: '16px',\n          borderRadius: '8px',\n          backgroundColor: '#f9f9f9',\n          textAlign: 'center',\n        }}\n      &gt;\n        &lt;h2 style={{ color: '#dc3545' }}&gt;{nombre}&lt;/h2&gt;\n        &lt;p&gt;Estilos en L\u00ednea&lt;/p&gt;\n        &lt;button\n          style={{\n            padding: '8px 16px',\n            backgroundColor: '#dc3545',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n          }}\n        &gt;\n          Saludar\n        &lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  return (\n    &lt;div className=\"border border-gray-300 p-4 rounded-lg bg-gray-50 text-center\"&gt;\n      &lt;h2 className=\"text-2xl text-blue-600\"&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Estilizado con Tailwind CSS&lt;/p&gt;\n      &lt;button className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"&gt;\n        Saludar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p4/#archivo-apppagejsx_2","title":"Archivo: <code>app/page.jsx</code>","text":"<pre><code>import Tarjeta from './components/Tarjeta';\n\nexport default function Home() {\n  return (\n    &lt;div className=\"flex flex-wrap gap-4 p-4\"&gt;\n      &lt;Tarjeta nombre=\"Ana\" metodo=\"global\" /&gt;\n      &lt;Tarjeta nombre=\"Carlos\" metodo=\"modulo\" /&gt;\n      &lt;Tarjeta nombre=\"Mar\u00eda\" metodo=\"inline\" /&gt;\n      &lt;Tarjeta nombre=\"Luis\" metodo=\"tailwind\" /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p4/#archivo-appcomponentstarjetamodulecss_1","title":"Archivo: <code>app/components/Tarjeta.module.css</code>","text":"<pre><code>.tarjeta {\n  border: 1px solid #ddd;\n  padding: 20px;\n  border-radius: 10px;\n  background-color: #f0f4f8;\n  text-align: center;\n}\n\n.titulo {\n  color: #28a745;\n  font-size: 1.5rem;\n}\n\n.boton {\n  padding: 10px 20px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.boton:hover {\n  background-color: #218838;\n}\n</code></pre>"},{"location":"content/p4/#archivo-appglobalscss_2","title":"Archivo: <code>app/globals.css</code>","text":"<pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.tarjeta {\n  border: 1px solid #ccc;\n  padding: 16px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  text-align: center;\n}\n\n.tarjeta h2 {\n  color: #007bff;\n}\n\n.tarjeta button {\n  padding: 8px 16px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.tarjeta button:hover {\n  background-color: #0056b3;\n}\n</code></pre>"},{"location":"content/p4/#conclusion","title":"Conclusi\u00f3n","text":"<ul> <li>CSS Global: \u00datil para estilos generales, pero puede causar conflictos si no se organiza bien.</li> <li>M\u00f3dulos CSS: Ideal para estilos locales y reutilizables, con nombres de clases \u00fanicos.</li> <li>Estilos en L\u00ednea: Bueno para casos din\u00e1micos, pero limitado para pseudoclases como <code>:hover</code>.</li> <li>Tailwind CSS: R\u00e1pido y consistente, perfecto para proyectos que priorizan velocidad de desarrollo.</li> </ul> <p>Tip</p> <p>Para proyectos grandes, combina M\u00f3dulos CSS o Tailwind para mantener los estilos organizados y escalables. Evita estilos en l\u00ednea para componentes complejos.</p>"},{"location":"content/p4/#actividad-creacion-de-componentes-funcionales-y-estilizado-en-nextjs","title":"Actividad: Creaci\u00f3n de Componentes Funcionales y Estilizado en Next.js","text":"<p>Info</p> <p>Esta actividad est\u00e1 dise\u00f1ada para que los estudiantes practiquen la creaci\u00f3n de componentes funcionales en React (usando Next.js) en todas sus formas y apliquen diferentes m\u00e9todos de estilizado CSS (global, m\u00f3dulos CSS, en l\u00ednea y Tailwind CSS). La actividad fomenta la creatividad y el aprendizaje pr\u00e1ctico.</p>"},{"location":"content/p4/#objetivos","title":"Objetivos","text":"<ul> <li>Crear componentes funcionales en React usando todas las formas de declaraci\u00f3n (funci\u00f3n declarativa, expresada, arrow function, etc.).</li> <li>Aplicar estilos a los componentes usando CSS global, m\u00f3dulos CSS, estilos en l\u00ednea y Tailwind CSS.</li> <li>Reforzar la comprensi\u00f3n de la exportaci\u00f3n e importaci\u00f3n de componentes en Next.js.</li> <li>Desarrollar habilidades de organizaci\u00f3n de c\u00f3digo y documentaci\u00f3n.</li> </ul>"},{"location":"content/p4/#renderizado-dinamico-de-arreglos-locales-en-react","title":"Renderizado Din\u00e1mico de Arreglos Locales en React","text":""},{"location":"content/p4/#introduccion_1","title":"Introducci\u00f3n","text":"<p>En React, el renderizado din\u00e1mico es una t\u00e9cnica fundamental para mostrar datos de manera eficiente, especialmente cuando se trabaja con colecciones de datos como arreglos. Este proceso implica transformar un arreglo de datos en elementos JSX que se renderizan en la interfaz de usuario. Para lograr esto, se utilizan herramientas como el m\u00e9todo <code>.map</code>, fragmentos (<code>&lt;&gt;</code>) y las claves (<code>key</code>) para optimizar el rendimiento y garantizar un renderizado correcto.</p> <p>En este art\u00edculo, exploraremos en detalle c\u00f3mo renderizar din\u00e1micamente arreglos locales en componentes de React, con ejemplos pr\u00e1cticos y explicaciones paso a paso. Tambi\u00e9n proporcionaremos un ejemplo completo en formato de c\u00f3digo que puedes integrar en un proyecto con MkDocs Material.</p>"},{"location":"content/p4/#conceptos-clave","title":"Conceptos Clave","text":""},{"location":"content/p4/#1-renderizado-de-listas-con-map","title":"1. Renderizado de Listas con <code>.map</code>","text":"<p>El m\u00e9todo <code>.map</code> de JavaScript es una herramienta poderosa para iterar sobre un arreglo y transformarlo en una lista de elementos JSX. En React, <code>.map</code> se utiliza com\u00fanmente para generar componentes din\u00e1micos a partir de un arreglo de datos.</p> <p>\u00bfPor qu\u00e9 usar <code>.map</code>? - Permite iterar sobre un arreglo y devolver un nuevo arreglo de elementos JSX. - Es declarativo, lo que se alinea con la filosof\u00eda de React. - Simplifica la generaci\u00f3n de listas din\u00e1micas sin necesidad de bucles tradicionales como <code>for</code> o <code>while</code>.</p> <p>Ejemplo B\u00e1sico: Supongamos que tenemos un arreglo de nombres y queremos renderizar una lista (<code>&lt;ul&gt;</code>) con cada nombre como un elemento (<code>&lt;li&gt;</code>).</p> <pre><code>const nombres = ['Ana', 'Juan', 'Mar\u00eda'];\n\nfunction ListaNombres() {\n  return (\n    &lt;ul&gt;\n      {nombres.map((nombre, index) =&gt; (\n        &lt;li key={index}&gt;{nombre}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n: - <code>nombres.map</code> recorre el arreglo <code>nombres</code> y por cada elemento devuelve un <code>&lt;li&gt;</code> con el nombre. - El atributo <code>key={index}</code> asigna una clave \u00fanica a cada elemento (m\u00e1s detalles sobre <code>key</code> m\u00e1s adelante). - El resultado es una lista HTML con los nombres: Ana, Juan, Mar\u00eda.</p>"},{"location":"content/p4/#2-uso-de-fragmentos","title":"2. Uso de Fragmentos (<code>&lt;&gt;</code>)","text":"<p>En React, cada componente debe devolver un solo elemento JSX. Cuando renderizamos listas con <code>.map</code>, a menudo necesitamos envolver los elementos generados en un contenedor, como un <code>&lt;div&gt;</code>. Sin embargo, esto puede agregar elementos innecesarios al DOM. Los fragmentos (<code>&lt;&gt;</code> o <code>&lt;React.Fragment&gt;</code>) resuelven este problema al permitir agrupar elementos sin introducir nodos adicionales en el DOM.</p> <p>Ejemplo con Fragmentos: <pre><code>function ListaConFragmentos() {\n  const items = ['Item 1', 'Item 2', 'Item 3'];\n\n  return (\n    &lt;&gt;\n      {items.map((item, index) =&gt; (\n        &lt;p key={index}&gt;{item}&lt;/p&gt;\n      ))}\n    &lt;/&gt;\n  );\n}\n</code></pre></p> <p>Explicaci\u00f3n: - Los fragmentos (<code>&lt;&gt;...</code>) envuelven los elementos <code>&lt;p&gt;</code> sin agregar un <code>&lt;div&gt;</code> extra al DOM. - Esto es \u00fatil para mantener el DOM limpio y evitar estilos no deseados causados por contenedores adicionales.</p>"},{"location":"content/p4/#3-claves-key-en-listas","title":"3. Claves (<code>key</code>) en Listas","text":"<p>React utiliza el atributo <code>key</code> para identificar de manera \u00fanica cada elemento en una lista renderizada din\u00e1micamente. Esto permite a React optimizar las actualizaciones del DOM al comparar elementos entre renderizados.</p> <p>Importancia de <code>key</code>: - Ayuda a React a determinar qu\u00e9 elementos han cambiado, se han agregado o eliminado. - Mejora el rendimiento al evitar re-renderizados innecesarios. - Debe ser \u00fanico dentro de la lista y estable (es decir, no debe cambiar entre renderizados).</p> <p>Buenas Pr\u00e1cticas para <code>key</code>: - Usa un identificador \u00fanico del dato, como un ID de base de datos, en lugar de \u00edndices (<code>index</code>) si es posible. - Los \u00edndices pueden causar problemas si los elementos del arreglo cambian de orden o se eliminan.</p> <p>Ejemplo con Claves \u00danicas: Supongamos que tenemos un arreglo de objetos con IDs \u00fanicos:</p> <pre><code>const usuarios = [\n  { id: 1, nombre: 'Ana' },\n  { id: 2, nombre: 'Juan' },\n  { id: 3, nombre: 'Mar\u00eda' }\n];\n\nfunction ListaUsuarios() {\n  return (\n    &lt;ul&gt;\n      {usuarios.map((usuario) =&gt; (\n        &lt;li key={usuario.id}&gt;{usuario.nombre}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n: - <code>key={usuario.id}</code> utiliza el ID \u00fanico del objeto <code>usuario</code> como clave. - Esto asegura que React pueda rastrear cada elemento incluso si el orden del arreglo cambia.</p>"},{"location":"content/p4/#ejemplo-completo-aplicacion-de-lista-de-tareas","title":"Ejemplo Completo: Aplicaci\u00f3n de Lista de Tareas","text":"<p>A continuaci\u00f3n, presentamos un ejemplo completo de una aplicaci\u00f3n de lista de tareas que utiliza <code>.map</code>, fragmentos y claves. Este ejemplo incluye un componente React que renderiza una lista din\u00e1mica de tareas con la capacidad de agregar y eliminar tareas.</p>"},{"location":"content/p4/#codigo-del-ejemplo","title":"C\u00f3digo del Ejemplo","text":"<pre><code>import React, { useState } from 'react';\n\nfunction ListaTareas() {\n  const [tareas, setTareas] = useState([\n    { id: 1, texto: 'Aprender React' },\n    { id: 2, texto: 'Construir una app' },\n    { id: 3, texto: 'Estudiar JavaScript' }\n  ]);\n  const [nuevaTarea, setNuevaTarea] = useState('');\n\n  const agregarTarea = () =&gt; {\n    if (nuevaTarea.trim() === '') return;\n    const nueva = {\n      id: tareas.length + 1,\n      texto: nuevaTarea\n    };\n    setTareas([...tareas, nueva]);\n    setNuevaTarea('');\n  };\n\n  const eliminarTarea = (id) =&gt; {\n    setTareas(tareas.filter((tarea) =&gt; tarea.id !== id));\n  };\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Lista de Tareas&lt;/h1&gt;\n      &lt;div&gt;\n        &lt;input\n          type=\"text\"\n          value={nuevaTarea}\n          onChange={(e) =&gt; setNuevaTarea(e.target.value)}\n          placeholder=\"Nueva tarea\"\n        /&gt;\n        &lt;button onClick={agregarTarea}&gt;Agregar&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;ul&gt;\n        {tareas.map((tarea) =&gt; (\n          &lt;li key={tarea.id}&gt;\n            {tarea.texto}\n            &lt;button onClick={() =&gt; eliminarTarea(tarea.id)}&gt;Eliminar&lt;/button&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default ListaTareas;\n</code></pre>"},{"location":"content/p4/#explicacion-del-ejemplo","title":"Explicaci\u00f3n del Ejemplo","text":"<ol> <li>Estado Local (<code>useState</code>):</li> <li><code>tareas</code> almacena el arreglo de tareas, inicializado con tres tareas de ejemplo.</li> <li> <p><code>nuevaTarea</code> almacena el texto ingresado en el campo de entrada.</p> </li> <li> <p>Renderizado Din\u00e1mico con <code>.map</code>:</p> </li> <li>El m\u00e9todo <code>tareas.map</code> genera un elemento <code>&lt;li&gt;</code> por cada tarea en el arreglo.</li> <li> <p>Cada <code>&lt;li&gt;</code> incluye el texto de la tarea y un bot\u00f3n para eliminarla.</p> </li> <li> <p>Fragmentos (<code>&lt;&gt;</code>):</p> </li> <li>El componente devuelve un fragmento que contiene el t\u00edtulo (<code>&lt;h1&gt;</code>), el formulario de entrada y la lista de tareas.</li> <li> <p>Esto evita agregar un <code>&lt;div&gt;</code> innecesario al DOM.</p> </li> <li> <p>Claves (<code>key</code>):</p> </li> <li> <p>Cada tarea utiliza su <code>id</code> como clave (<code>key={tarea.id}</code>) para garantizar un seguimiento eficiente por parte de React.</p> </li> <li> <p>Interactividad:</p> </li> <li>La funci\u00f3n <code>agregarTarea</code> a\u00f1ade una nueva tarea al arreglo.</li> <li>La funci\u00f3n <code>eliminarTarea</code> filtra las tareas para eliminar la seleccionada seg\u00fan su <code>id</code>.</li> </ol>"},{"location":"content/p4/#configuracion-para-mkdocs-material","title":"Configuraci\u00f3n para MkDocs Material","text":"<p>Para integrar este contenido en un proyecto con MkDocs Material, aseg\u00farate de tener un proyecto MkDocs configurado. A continuaci\u00f3n, se explica c\u00f3mo incluir el ejemplo en tu documentaci\u00f3n.</p>"},{"location":"content/p4/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<pre><code>mkdocs-project/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 renderizado_dinamico_react.md\n\u251c\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"content/p4/#configuracion-de-mkdocsyml","title":"Configuraci\u00f3n de <code>mkdocs.yml</code>","text":"<p>Aseg\u00farate de que tu archivo <code>mkdocs.yml</code> incluya el tema Material y habilite el resaltado de c\u00f3digo para JSX:</p> <pre><code>site_name: Gu\u00eda de React\ntheme:\n  name: material\n  features:\n    - content.code.copy\nmarkdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.superfences\n  - pymdownx.tabbed\n</code></pre>"},{"location":"content/p4/#guardar-el-contenido","title":"Guardar el Contenido","text":"<p>Guarda el contenido de este art\u00edculo en <code>docs/renderizado_dinamico_react.md</code>. Luego, ejecuta <code>mkdocs serve</code> para visualizar la documentaci\u00f3n localmente.</p>"},{"location":"content/p4/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<ol> <li>Usa Claves \u00danicas y Estables:</li> <li>Evita usar \u00edndices como claves si los elementos del arreglo pueden cambiar de orden o eliminarse.</li> <li> <p>Prefiere identificadores \u00fanicos como IDs generados por una base de datos o una librer\u00eda como <code>uuid</code>.</p> </li> <li> <p>Minimiza Elementos en el DOM:</p> </li> <li> <p>Usa fragmentos (<code>&lt;&gt;</code>) en lugar de <code>&lt;div&gt;</code> innecesarios para mantener el DOM limpio.</p> </li> <li> <p>Optimiza el Rendimiento:</p> </li> <li>Si la lista es grande, considera usar t\u00e9cnicas como paginaci\u00f3n o virtualizaci\u00f3n (por ejemplo, con <code>react-window</code>).</li> <li> <p>Evita realizar operaciones costosas dentro de <code>.map</code>.</p> </li> <li> <p>Valida los Datos:</p> </li> <li>Aseg\u00farate de que los datos del arreglo sean v\u00e1lidos antes de renderizarlos para evitar errores.</li> </ol>"},{"location":"content/p5/","title":"Clase 6 Enrutamiento en Next.js 13+ (App Router)","text":"<p>Este tutorial explica de manera detallada c\u00f3mo funciona el enrutamiento en Next.js 13 o superior utilizando el App Router (directorio <code>app</code>). </p>"},{"location":"content/p5/#introduccion-al-app-router","title":"Introducci\u00f3n al App Router","text":"<p>El App Router, introducido en Next.js 13, es un sistema de enrutamiento basado en archivos que aprovecha los React Server Components para ofrecer un enrutamiento m\u00e1s flexible y potente. A diferencia del Pages Router (basado en el directorio <code>pages</code>), el App Router utiliza el directorio <code>app</code> y permite crear dise\u00f1os compartidos, manejar rutas din\u00e1micas, rutas paralelas, interceptaci\u00f3n de rutas, y m\u00e1s.</p> <p>El enrutamiento en el App Router se basa en la estructura de carpetas y archivos dentro del directorio <code>app</code>. Cada carpeta representa un segmento de ruta, y los archivos espec\u00edficos (como <code>page.js</code>) definen la interfaz de usuario para esa ruta.</p>"},{"location":"content/p5/#conceptos-fundamentales","title":"Conceptos Fundamentales","text":"<p>Antes de profundizar, es importante entender algunos t\u00e9rminos clave utilizados en el App Router:</p> <ul> <li>\u00c1rbol: Representa la estructura jer\u00e1rquica de las rutas, similar a un \u00e1rbol de componentes o carpetas.</li> <li>Segmento de ruta: Cada carpeta dentro de <code>app</code> representa un segmento de la URL (por ejemplo, <code>/dashboard/settings</code> tiene los segmentos <code>dashboard</code> y <code>settings</code>).</li> <li>Ra\u00edz: La carpeta <code>app</code> es la ra\u00edz del \u00e1rbol de enrutamiento.</li> <li>Hoja: El \u00faltimo segmento de una ruta, que suele contener un archivo <code>page.js</code> para renderizar la interfaz de usuario.</li> <li>Ruta URL: La parte de la URL despu\u00e9s del dominio, compuesta por segmentos (por ejemplo, <code>/dashboard/settings</code>).</li> </ul> <p>El App Router utiliza convenciones espec\u00edficas de nombres de archivos para definir comportamientos en las rutas, como <code>page.js</code> para p\u00e1ginas, <code>layout.js</code> para dise\u00f1os, y otros archivos especiales que veremos m\u00e1s adelante.</p>"},{"location":"content/p5/#estructura-basica-del-enrutamiento","title":"Estructura B\u00e1sica del Enrutamiento","text":"<p>El enrutamiento en Next.js 13+ se define autom\u00e1ticamente seg\u00fan la estructura de carpetas dentro del directorio <code>app</code>. A continuaci\u00f3n, se explica c\u00f3mo crear rutas b\u00e1sicas.</p>"},{"location":"content/p5/#crear-una-ruta-basica","title":"Crear una Ruta B\u00e1sica","text":"<p>Para crear una p\u00e1gina, a\u00f1ade un archivo <code>page.js</code> dentro del directorio <code>app</code>. Este archivo define el contenido principal de la ruta.</p> <p>Por ejemplo, para crear la p\u00e1gina de inicio (<code>/</code>):</p> <pre><code>app/\n\u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/page.js</code>:</p> <pre><code>export default function Home() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Bienvenido a mi aplicaci\u00f3n Next.js&lt;/h1&gt;\n      &lt;p&gt;Esta es la p\u00e1gina de inicio.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Este archivo <code>page.js</code> se asigna autom\u00e1ticamente a la ruta ra\u00edz (<code>/</code>). Cuando un usuario visita <code>http://localhost:3000/</code>, ver\u00e1 el contenido definido en este archivo.</p>"},{"location":"content/p5/#rutas-anidadas","title":"Rutas Anidadas","text":"<p>Para crear rutas anidadas, simplemente crea carpetas dentro de <code>app</code> y a\u00f1ade un archivo <code>page.js</code> en cada una. Por ejemplo, para crear la ruta <code>/dashboard/settings</code>:</p> <pre><code>app/\n\u2514\u2500\u2500 dashboard/\n    \u2514\u2500\u2500 settings/\n        \u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/dashboard/settings/page.js</code>:</p> <pre><code>export default function Settings() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Configuraciones&lt;/h1&gt;\n      &lt;p&gt;Esta es la p\u00e1gina de configuraciones.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Al visitar <code>http://localhost:3000/dashboard/settings</code>, se renderizar\u00e1 el contenido de <code>page.js</code> en la carpeta <code>settings</code>. La estructura de carpetas define autom\u00e1ticamente la jerarqu\u00eda de la URL.</p>"},{"location":"content/p5/#disenos-layouts","title":"Dise\u00f1os (Layouts)","text":"<p>Los layouts son componentes que envuelven el contenido de las p\u00e1ginas y permiten compartir elementos comunes, como barras de navegaci\u00f3n o pies de p\u00e1gina, entre varias rutas. Se definen con un archivo <code>layout.js</code>.</p>"},{"location":"content/p5/#layout-raiz","title":"Layout Ra\u00edz","text":"<p>El layout ra\u00edz es obligatorio y se define en <code>app/layout.js</code>. Este layout envuelve todas las p\u00e1ginas de la aplicaci\u00f3n.</p> <p>Contenido de <code>app/layout.js</code>:</p> <pre><code>export default function RootLayout({ children }) {\n  return (\n    &lt;html lang=\"es\"&gt;\n      &lt;body&gt;\n        &lt;header&gt;\n          &lt;h1&gt;Mi Aplicaci\u00f3n&lt;/h1&gt;\n          &lt;nav&gt;\n            &lt;a href=\"/\"&gt;Inicio&lt;/a&gt; | &lt;a href=\"/dashboard\"&gt;Dashboard&lt;/a&gt;\n          &lt;/nav&gt;\n        &lt;/header&gt;\n        &lt;main&gt;{children}&lt;/main&gt;\n        &lt;footer&gt;\n          &lt;p&gt;\u00a9 2025 Mi Aplicaci\u00f3n&lt;/p&gt;\n        &lt;/footer&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  );\n}\n</code></pre> <ul> <li>El par\u00e1metro <code>children</code> contiene el contenido de las p\u00e1ginas hijas (por ejemplo, el contenido de <code>page.js</code>).</li> <li>Este layout se aplica a todas las rutas de la aplicaci\u00f3n.</li> </ul>"},{"location":"content/p5/#layouts-anidados","title":"Layouts Anidados","text":"<p>Puedes definir layouts anidados para rutas espec\u00edficas creando un archivo <code>layout.js</code> dentro de una carpeta. Por ejemplo, para aplicar un layout solo a las rutas bajo <code>/dashboard</code>:</p> <pre><code>app/\n\u2514\u2500\u2500 dashboard/\n    \u2514\u2500\u2500 layout.js\n    \u2514\u2500\u2500 page.js\n    \u2514\u2500\u2500 settings/\n        \u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/dashboard/layout.js</code>:</p> <pre><code>export default function DashboardLayout({ children }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Panel de Control&lt;/h2&gt;\n      &lt;nav&gt;\n        &lt;a href=\"/dashboard\"&gt;Inicio del Dashboard&lt;/a&gt; | &lt;a href=\"/dashboard/settings\"&gt;Configuraciones&lt;/a&gt;\n      &lt;/nav&gt;\n      &lt;main&gt;{children}&lt;/main&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li>Este layout envuelve todas las p\u00e1ginas dentro de la carpeta <code>dashboard</code> (por ejemplo, <code>/dashboard</code> y <code>/dashboard/settings</code>).</li> <li>El layout ra\u00edz (<code>app/layout.js</code>) seguir\u00e1 envolviendo este layout anidado, creando una jerarqu\u00eda.</li> </ul>"},{"location":"content/p5/#rutas-dinamicas","title":"Rutas Din\u00e1micas","text":"<p>Las rutas din\u00e1micas permiten manejar URLs con par\u00e1metros variables, como <code>/products/[id]</code>. En el App Router, las rutas din\u00e1micas se crean usando corchetes (<code>[]</code>) en los nombres de las carpetas.</p>"},{"location":"content/p5/#ejemplo-de-ruta-dinamica","title":"Ejemplo de Ruta Din\u00e1mica","text":"<p>Para crear una ruta din\u00e1mica como <code>/products/[id]</code>:</p> <pre><code>app/\n\u2514\u2500\u2500 products/\n    \u2514\u2500\u2500 [id]/\n        \u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/products/[id]/page.js</code>:</p> <pre><code>export default function Product({ params }) {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Producto {params.id}&lt;/h1&gt;\n      &lt;p&gt;Esta es la p\u00e1gina del producto con ID: {params.id}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li>La carpeta <code>[id]</code> indica que el segmento de la URL es din\u00e1mico.</li> <li>El par\u00e1metro <code>params</code> contiene los valores din\u00e1micos (por ejemplo, <code>{ id: \"123\" }</code> para la URL <code>/products/123</code>).</li> </ul>"},{"location":"content/p5/#rutas-dinamicas-anidadas","title":"Rutas Din\u00e1micas Anidadas","text":"<p>Puedes anidar rutas din\u00e1micas. Por ejemplo, para <code>/users/[userId]/posts/[postId]</code>:</p> <pre><code>app/\n\u2514\u2500\u2500 users/\n    \u2514\u2500\u2500 [userId]/\n        \u2514\u2500\u2500 posts/\n            \u2514\u2500\u2500 [postId]/\n                \u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/users/[userId]/posts/[postId]/page.js</code>:</p> <pre><code>export default function Post({ params }) {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Post {params.postId} del usuario {params.userId}&lt;/h1&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li>Para la URL <code>/users/1/posts/42</code>, <code>params</code> ser\u00e1 <code>{ userId: \"1\", postId: \"42\" }</code>.</li> </ul>"},{"location":"content/p5/#rutas-de-captura-total-catch-all-routes","title":"Rutas de Captura Total (Catch-All Routes)","text":"<p>Las rutas de captura total permiten manejar m\u00faltiples segmentos de URL. Se definen usando <code>[...slug]</code>.</p> <p>Por ejemplo, para capturar todas las rutas bajo <code>/blog</code>:</p> <pre><code>app/\n\u2514\u2500\u2500 blog/\n    \u2514\u2500\u2500 [...slug]/\n        \u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/blog/[...slug]/page.js</code>:</p> <pre><code>export default function BlogPost({ params }) {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Blog&lt;/h1&gt;\n      &lt;p&gt;Segmentos: {params.slug.join('/')}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li>Para la URL <code>/blog/2023/octubre/mi-post</code>, <code>params.slug</code> ser\u00e1 <code>[\"2023\", \"octubre\", \"mi-post\"]</code>.</li> <li>\u00datil para manejar estructuras de URL profundas o indeterminadas.</li> </ul>"},{"location":"content/p5/#archivos-especiales","title":"Archivos Especiales","text":"<p>El App Router utiliza archivos especiales para definir comportamientos espec\u00edficos:</p> <ul> <li><code>page.js</code>: Define el contenido principal de una ruta.</li> <li><code>layout.js</code>: Define un dise\u00f1o que envuelve las p\u00e1ginas hijas.</li> <li><code>loading.js</code>: Muestra un estado de carga mientras se renderiza una p\u00e1gina.</li> <li><code>error.js</code>: Maneja errores en una ruta.</li> <li><code>not-found.js</code>: Muestra una p\u00e1gina personalizada para rutas no encontradas (404).</li> </ul> <p>Por ejemplo, para agregar un estado de carga a <code>/dashboard</code>:</p> <pre><code>app/\n\u2514\u2500\u2500 dashboard/\n    \u2514\u2500\u2500 loading.js\n    \u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/dashboard/loading.js</code>:</p> <pre><code>export default function Loading() {\n  return &lt;div&gt;Cargando...&lt;/div&gt;;\n}\n</code></pre> <ul> <li>Este componente se muestra autom\u00e1ticamente mientras se carga el contenido de <code>/dashboard</code>.</li> </ul>"},{"location":"content/p5/#navegacion-con-el-componente-link","title":"Navegaci\u00f3n con el Componente Link","text":"<p>El componente <code>Link</code> de <code>next/link</code> permite realizar navegaci\u00f3n del lado del cliente, mejorando la experiencia de usuario al evitar recargas completas.</p> <p>Ejemplo de uso:</p> <pre><code>import Link from 'next/link';\n\nexport default function Home() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Inicio&lt;/h1&gt;\n      &lt;Link href=\"/dashboard\"&gt;Ir al Dashboard&lt;/Link&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li><code>Link</code> precarga autom\u00e1ticamente las rutas visibles en la ventana gr\u00e1fica en modo producci\u00f3n, mejorando el rendimiento.</li> </ul>"},{"location":"content/p5/#enrutamiento-programatico","title":"Enrutamiento Program\u00e1tico","text":"<p>Para navegar program\u00e1ticamente, usa el hook <code>useRouter</code> de <code>next/router</code>:</p> <pre><code>'use client'; // Indica que es un componente del cliente\nimport { useRouter } from 'next/router';\n\nexport default function Button() {\n  const router = useRouter();\n\n  return (\n    &lt;button onClick={() =&gt; router.push('/dashboard')}&gt;\n      Ir al Dashboard\n    &lt;/button&gt;\n  );\n}\n</code></pre> <ul> <li>Aseg\u00farate de usar <code>'use client'</code> en componentes que utilicen hooks del lado del cliente.</li> </ul>"},{"location":"content/p5/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ol> <li>Organizaci\u00f3n de carpetas: Usa guiones bajos (<code>_</code>) para carpetas que no formen parte del enrutamiento (por ejemplo, <code>_components</code> o <code>_hooks</code>).</li> <li>Layouts compartidos: Aprovecha los layouts para mantener consistencia en la UI.</li> <li>Rutas din\u00e1micas: Usa nombres descriptivos para par\u00e1metros din\u00e1micos (por ejemplo, <code>[userId]</code> en lugar de <code>[id]</code>).</li> <li>Optimizaci\u00f3n: Habilita el precargado de rutas con <code>Link</code> y aprovecha la cach\u00e9 del App Router para mejorar el rendimiento.</li> </ol>"},{"location":"content/p6/","title":"Clase 7: Renderizado Din\u00e1mico de Arreglos Locales en React y Next.js","text":"<p>El renderizado din\u00e1mico de arreglos locales es una pr\u00e1ctica com\u00fan en React y Next.js para mostrar listas de datos en la interfaz de usuario. Esto se logra principalmente utilizando el m\u00e9todo <code>.map()</code> de JavaScript, fragmentos (<code>&lt;&gt;</code>) para agrupar elementos sin nodos adicionales en el DOM, y la prop <code>key</code> para optimizar el rendimiento y evitar problemas de reconciliaci\u00f3n en el DOM virtual. Este documento explica en detalle c\u00f3mo implementar el renderizado din\u00e1mico de arreglos locales en componentes de React dentro de un proyecto Next.js, incluyendo ejemplos pr\u00e1cticos, buenas pr\u00e1cticas y el uso de Tailwind CSS para estilos. Los ejemplos se basan en una aplicaci\u00f3n de tienda en l\u00ednea que muestra una lista de productos.</p>"},{"location":"content/p6/#conceptos-clave","title":"Conceptos clave","text":""},{"location":"content/p6/#1-renderizado-dinamico-con-map","title":"1. Renderizado din\u00e1mico con <code>.map()</code>","text":"<p>El m\u00e9todo <code>.map()</code> de JavaScript itera sobre un arreglo y devuelve un nuevo arreglo con los elementos transformados. En React, se usa para generar elementos JSX din\u00e1micamente a partir de un arreglo de datos.</p> <ul> <li>Uso: Transforma cada elemento del arreglo en un componente o elemento JSX.</li> <li>Ejemplo: <code>array.map(item =&gt; &lt;div&gt;{item}&lt;/div&gt;)</code></li> </ul>"},{"location":"content/p6/#2-fragmentos-o-reactfragment","title":"2. Fragmentos (<code>&lt;&gt;</code> o <code>&lt;React.Fragment&gt;</code>)","text":"<p>Los fragmentos permiten agrupar m\u00faltiples elementos JSX sin introducir un nodo adicional en el DOM (como un <code>&lt;div&gt;</code>).</p> <ul> <li>Uso: Envolver m\u00faltiples elementos devueltos por <code>.map()</code> para cumplir con la regla de React de devolver un solo elemento.</li> <li>Ventaja: Reduce el clutter en el DOM, mejorando el rendimiento y la sem\u00e1ntica.</li> <li>Ejemplo: <code>&lt;&gt;{array.map(item =&gt; &lt;div&gt;{item}&lt;/div&gt;)}</code></li> </ul>"},{"location":"content/p6/#3-prop-key","title":"3. Prop <code>key</code>","text":"<p>La prop <code>key</code> es un identificador \u00fanico que React usa para optimizar la reconciliaci\u00f3n del DOM virtual, evitando renders innecesarios y manteniendo el estado de los componentes.</p> <ul> <li>Uso: Se asigna a cada elemento generado por <code>.map()</code> usando un valor \u00fanico (como un ID).</li> <li>Regla: No uses \u00edndices del arreglo (<code>index</code>) como <code>key</code> si los datos pueden cambiar (ordenar, agregar, eliminar), ya que puede causar problemas de rendimiento o comportamiento inesperado.</li> <li>Ejemplo: <code>&lt;div key={item.id}&gt;{item.nombre}&lt;/div&gt;</code></li> </ul>"},{"location":"content/p6/#configuracion-del-proyecto-en-nextjs","title":"Configuraci\u00f3n del proyecto en Next.js","text":"<p>Antes de los ejemplos, configuraremos un proyecto Next.js con Tailwind CSS para estilizar los componentes.</p>"},{"location":"content/p6/#crear-un-proyecto-nextjs","title":"Crear un proyecto Next.js","text":"<ol> <li> <p>Crea un nuevo proyecto Next.js:    <pre><code>npx create-next-app@latest mi-tienda\ncd mi-tienda\n</code></pre></p> </li> <li> <p>Instala Tailwind CSS:    <pre><code>npm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n</code></pre></p> </li> <li> <p>Configura <code>tailwind.config.js</code>:    <pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./app/**/*.{js,ts,jsx,tsx}\",\n    \"./pages/**/*.{js,ts,jsx,tsx}\",\n    \"./components/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n</code></pre></p> </li> <li> <p>Agrega las directivas de Tailwind en <code>app/globals.css</code>:    <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre></p> </li> <li> <p>Aseg\u00farate de que <code>package.json</code> incluya las dependencias necesarias:    <pre><code>{\n  \"dependencies\": {\n    \"next\": \"14.2.14\",\n    \"react\": \"18.3.1\",\n    \"react-dom\": \"18.3.1\"\n  },\n  \"devDependencies\": {\n    \"tailwindcss\": \"^3.4.13\",\n    \"postcss\": \"^8.4.47\",\n    \"autoprefixer\": \"^10.4.20\"\n  }\n}\n</code></pre></p> </li> </ol>"},{"location":"content/p6/#ejemplo-practico-lista-de-productos","title":"Ejemplo pr\u00e1ctico: Lista de productos","text":"<p>Crearemos un componente que renderiza din\u00e1micamente una lista de productos almacenada en un arreglo local. Usaremos <code>.map()</code>, fragmentos, y la prop <code>key</code>, con estilos de Tailwind CSS.</p>"},{"location":"content/p6/#codigo-del-componente","title":"C\u00f3digo del componente","text":""},{"location":"content/p6/#archivo-componentsproductlistjsx","title":"Archivo: <code>components/ProductList.jsx</code>","text":"<pre><code>import React from 'react';\n\nconst products = [\n  { id: 1, name: 'Laptop', price: 999.99, category: 'Electr\u00f3nica' },\n  { id: 2, name: 'Smartphone', price: 699.99, category: 'Electr\u00f3nica' },\n  { id: 3, name: 'Zapatillas', price: 89.99, category: 'Moda' },\n  { id: 4, name: 'Libro', price: 19.99, category: 'Libros' },\n];\n\nconst ProductList = () =&gt; {\n  return (\n    &lt;div className=\"max-w-4xl mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-6 text-center\"&gt;Lista de Productos&lt;/h1&gt;\n      &lt;&gt;\n        {products.map((product) =&gt; (\n          &lt;div\n            key={product.id}\n            className=\"bg-white shadow-md rounded-lg p-4 mb-4 flex justify-between items-center\"\n          &gt;\n            &lt;div&gt;\n              &lt;h2 className=\"text-xl font-semibold\"&gt;{product.name}&lt;/h2&gt;\n              &lt;p className=\"text-gray-600\"&gt;Categor\u00eda: {product.category}&lt;/p&gt;\n            &lt;/div&gt;\n            &lt;p className=\"text-lg font-bold text-green-600\"&gt;${product.price.toFixed(2)}&lt;/p&gt;\n          &lt;/div&gt;\n        ))}\n      &lt;/&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductList;\n</code></pre>"},{"location":"content/p6/#archivo-apppagejsx","title":"Archivo: <code>app/page.jsx</code>","text":"<pre><code>import ProductList from '../components/ProductList';\n\nexport default function Home() {\n  return (\n    &lt;main&gt;\n      &lt;ProductList /&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre>"},{"location":"content/p6/#explicacion-del-ejemplo","title":"Explicaci\u00f3n del ejemplo","text":"<ul> <li>Arreglo local (<code>products</code>):</li> <li>Definimos un arreglo est\u00e1tico de objetos que representan productos, cada uno con <code>id</code>, <code>name</code>, <code>price</code> y <code>category</code>.</li> <li> <p>En un escenario real, este arreglo podr\u00eda provenir de una API o base de datos.</p> </li> <li> <p>Uso de <code>.map()</code>:</p> </li> <li>Iteramos sobre <code>products</code> con <code>.map()</code> para generar un <code>&lt;div&gt;</code> por cada producto.</li> <li> <p>Cada <code>&lt;div&gt;</code> muestra el nombre, categor\u00eda y precio del producto.</p> </li> <li> <p>Fragmentos (<code>&lt;&gt;</code>):</p> </li> <li>Envolvemos los elementos generados por <code>.map()</code> en un fragmento (<code>&lt;&gt;</code>) para cumplir con la regla de React de devolver un solo elemento ra\u00edz.</li> <li> <p>Esto evita agregar un <code>&lt;div&gt;</code> innecesario en el DOM.</p> </li> <li> <p>Prop <code>key</code>:</p> </li> <li>Usamos <code>key={product.id}</code> para asignar un identificador \u00fanico a cada <code>&lt;div&gt;</code>.</li> <li> <p>El <code>id</code> es \u00fanico y estable, lo que ayuda a React a rastrear los elementos y optimizar las actualizaciones.</p> </li> <li> <p>Estilos con Tailwind CSS:</p> </li> <li>Usamos clases de Tailwind como <code>max-w-4xl</code>, <code>mx-auto</code>, <code>p-4</code>, <code>shadow-md</code>, etc., para centrar el contenido, agregar sombras, bordes redondeados y estilos responsivos.</li> <li> <p>Los productos se muestran en tarjetas con un dise\u00f1o limpio y moderno.</p> </li> <li> <p>Estructura del DOM:</p> </li> <li>El componente genera una lista de tarjetas, cada una representando un producto, sin nodos adicionales gracias al fragmento.</li> </ul>"},{"location":"content/p6/#variaciones-y-casos-avanzados","title":"Variaciones y casos avanzados","text":""},{"location":"content/p6/#1-renderizado-condicional-dentro-de-map","title":"1. Renderizado condicional dentro de <code>.map()</code>","text":"<p>A veces, necesitas renderizar elementos solo si cumplen ciertas condiciones. Por ejemplo, mostrar solo productos de una categor\u00eda espec\u00edfica.</p>"},{"location":"content/p6/#codigo","title":"C\u00f3digo","text":"<pre><code>import React from 'react';\n\nconst products = [\n  { id: 1, name: 'Laptop', price: 999.99, category: 'Electr\u00f3nica' },\n  { id: 2, name: 'Smartphone', price: 699.99, category: 'Electr\u00f3nica' },\n  { id: 3, name: 'Zapatillas', price: 89.99, category: 'Moda' },\n  { id: 4, name: 'Libro', price: 19.99, category: 'Libros' },\n];\n\nconst ProductList = () =&gt; {\n  return (\n    &lt;div className=\"max-w-4xl mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-6 text-center\"&gt;Productos Electr\u00f3nicos&lt;/h1&gt;\n      &lt;&gt;\n        {products.map((product) =&gt;\n          product.category === 'Electr\u00f3nica' ? (\n            &lt;div\n              key={product.id}\n              className=\"bg-white shadow-md rounded-lg p-4 mb-4 flex justify-between items-center\"\n            &gt;\n              &lt;div&gt;\n                &lt;h2 className=\"text-xl font-semibold\"&gt;{product.name}&lt;/h2&gt;\n                &lt;p className=\"text-gray-600\"&gt;Categor\u00eda: {product.category}&lt;/p&gt;\n              &lt;/div&gt;\n              &lt;p className=\"text-lg font-bold text-green-600\"&gt;${product.price.toFixed(2)}&lt;/p&gt;\n            &lt;/div&gt;\n          ) : null\n        )}\n      &lt;/&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductList;\n</code></pre>"},{"location":"content/p6/#explicacion","title":"Explicaci\u00f3n","text":"<ul> <li>Condicional: Dentro de <code>.map()</code>, usamos un operador ternario (<code>?:</code>) para renderizar solo los productos de la categor\u00eda \"Electr\u00f3nica\". Si la condici\u00f3n no se cumple, devolvemos <code>null</code>, lo que no genera ning\u00fan elemento en el DOM.</li> <li>Fragmentos: Seguimos usando <code>&lt;&gt;</code> para envolver los elementos generados.</li> <li>Key: Cada elemento renderizado tiene un <code>key</code> basado en <code>product.id</code>.</li> </ul>"},{"location":"content/p6/#2-componente-reutilizable-para-cada-elemento","title":"2. Componente reutilizable para cada elemento","text":"<p>Para mejorar la modularidad, podemos extraer la l\u00f3gica de renderizado de cada producto a un componente separado.</p>"},{"location":"content/p6/#codigo_1","title":"C\u00f3digo","text":"<pre><code>// components/ProductItem.jsx\nimport React from 'react';\n\nconst ProductItem = ({ product }) =&gt; {\n  return (\n    &lt;div className=\"bg-white shadow-md rounded-lg p-4 mb-4 flex justify-between items-center\"&gt;\n      &lt;div&gt;\n        &lt;h2 className=\"text-xl font-semibold\"&gt;{product.name}&lt;/h2&gt;\n        &lt;p className=\"text-gray-600\"&gt;Categor\u00eda: {product.category}&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;p className=\"text-lg font-bold text-green-600\"&gt;${product.price.toFixed(2)}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductItem;\n\n// components/ProductList.jsx\nimport React from 'react';\nimport ProductItem from './ProductItem';\n\nconst products = [\n  { id: 1, name: 'Laptop', price: 999.99, category: 'Electr\u00f3nica' },\n  { id: 2, name: 'Smartphone', price: 699.99, category: 'Electr\u00f3nica' },\n  { id: 3, name: 'Zapatillas', price: 89.99, category: 'Moda' },\n  { id: 4, name: 'Libro', price: 19.99, category: 'Libros' },\n];\n\nconst ProductList = () =&gt; {\n  return (\n    &lt;div className=\"max-w-4xl mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-6 text-center\"&gt;Lista de Productos&lt;/h1&gt;\n      &lt;&gt;\n        {products.map((product) =&gt; (\n          &lt;ProductItem key={product.id} product={product} /&gt;\n        ))}\n      &lt;/&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductList;\n</code></pre>"},{"location":"content/p6/#explicacion_1","title":"Explicaci\u00f3n","text":"<ul> <li>Componente <code>ProductItem</code>: Encapsula la l\u00f3gica de renderizado de un solo producto, recibiendo <code>product</code> como prop.</li> <li>Reutilizaci\u00f3n: <code>ProductList</code> usa <code>ProductItem</code> dentro de <code>.map()</code>, pasando cada <code>product</code> como prop.</li> <li>Key: La prop <code>key</code> se asigna en el nivel de <code>ProductItem</code> para mantener la optimizaci\u00f3n.</li> <li>Ventajas: Mejora la mantenibilidad y permite reutilizar <code>ProductItem</code> en otros contextos.</li> </ul>"},{"location":"content/p6/#3-manejo-de-arreglos-vacios","title":"3. Manejo de arreglos vac\u00edos","text":"<p>Es importante manejar casos donde el arreglo est\u00e9 vac\u00edo para evitar mostrar una lista vac\u00eda sin retroalimentaci\u00f3n al usuario.</p>"},{"location":"content/p6/#codigo_2","title":"C\u00f3digo","text":"<pre><code>import React from 'react';\nimport ProductItem from './ProductItem';\n\nconst products = []; // Arreglo vac\u00edo para este ejemplo\n\nconst ProductList = () =&gt; {\n  return (\n    &lt;div className=\"max-w-4xl mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-6 text-center\"&gt;Lista de Productos&lt;/h1&gt;\n      {products.length === 0 ? (\n        &lt;p className=\"text-center text-gray-500\"&gt;No hay productos disponibles.&lt;/p&gt;\n      ) : (\n        &lt;&gt;\n          {products.map((product) =&gt; (\n            &lt;ProductItem key={product.id} product={product} /&gt;\n          ))}\n        &lt;/&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductList;\n</code></pre>"},{"location":"content/p6/#explicacion_2","title":"Explicaci\u00f3n","text":"<ul> <li>Condicional: Usamos un operador ternario para verificar si <code>products.length === 0</code>. Si est\u00e1 vac\u00edo, mostramos un mensaje; si no, renderizamos la lista.</li> <li>Fragmentos: Cuando hay productos, usamos <code>&lt;&gt;</code> para envolver los elementos generados por <code>.map()</code>.</li> <li>Buena pr\u00e1ctica: Siempre proporcionar retroalimentaci\u00f3n al usuario cuando no hay datos.</li> </ul>"},{"location":"content/p7/","title":"Clase 8: Hook useState - Gu\u00eda Simple y Detallada","text":""},{"location":"content/p7/#que-es-usestate","title":"\u00bfQu\u00e9 es useState?","text":"<p>El hook <code>useState</code> es la forma m\u00e1s simple de agregar estado a un componente funcional en React. Piensa en el estado como la \"memoria\" de tu componente - informaci\u00f3n que puede cambiar y que React necesita recordar.</p>"},{"location":"content/p7/#concepto-simple","title":"Concepto Simple","text":"<pre><code>const [valor, setValor] = useState(valorInicial);\n</code></pre> <ul> <li><code>valor</code>: Lo que queremos recordar</li> <li><code>setValor</code>: Funci\u00f3n para cambiar ese valor</li> <li><code>valorInicial</code>: El valor al inicio</li> </ul>"},{"location":"content/p7/#importacion","title":"Importaci\u00f3n","text":"<p>Siempre debemos importar useState antes de usarlo:</p> <pre><code>import { useState } from 'react';\n</code></pre>"},{"location":"content/p7/#ejemplo-1-mi-primer-estado","title":"Ejemplo 1: Mi Primer Estado","text":"<p>Comencemos con algo s\u00faper simple - un contador:</p> <pre><code>import { useState } from 'react';\n\nfunction MiContador() {\n  // Creamos un estado que empieza en 0\n  const [numero, setNumero] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;El n\u00famero es: {numero}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setNumero(numero + 1)}&gt;\n        Sumar 1\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>\u00bfQu\u00e9 pasa aqu\u00ed? 1. <code>useState(0)</code> crea un estado que empieza en 0 2. <code>numero</code> contiene el valor actual 3. <code>setNumero</code> es la funci\u00f3n para cambiarlo 4. Cuando hacemos clic, <code>setNumero(numero + 1)</code> aumenta el n\u00famero 5. React autom\u00e1ticamente actualiza la pantalla</p>"},{"location":"content/p7/#ejemplo-2-texto-que-cambia","title":"Ejemplo 2: Texto que Cambia","text":"<p>Ahora veamos c\u00f3mo manejar texto:</p> <pre><code>function SaludoPersonalizado() {\n  const [nombre, setNombre] = useState('');\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        type=\"text\"\n        value={nombre}\n        onChange={(e) =&gt; setNombre(e.target.value)}\n        placeholder=\"Escribe tu nombre\"\n      /&gt;\n      &lt;h2&gt;\u00a1Hola {nombre}!&lt;/h2&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n paso a paso: 1. <code>useState('')</code> crea un estado de texto vac\u00edo 2. <code>value={nombre}</code> conecta el input con nuestro estado 3. <code>onChange</code> se ejecuta cada vez que escribimos 4. <code>e.target.value</code> es lo que escribi\u00f3 el usuario 5. <code>setNombre(e.target.value)</code> actualiza nuestro estado</p>"},{"location":"content/p7/#tipos-de-estados-comunes","title":"Tipos de Estados Comunes","text":""},{"location":"content/p7/#1-numeros","title":"1. N\u00fameros","text":"<pre><code>function Calculadora() {\n  const [precio, setPrecio] = useState(0);\n  const [cantidad, setCantidad] = useState(1);\n\n  const total = precio * cantidad;\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        type=\"number\" \n        value={precio}\n        onChange={(e) =&gt; setPrecio(Number(e.target.value))}\n        placeholder=\"Precio\"\n      /&gt;\n      &lt;input \n        type=\"number\" \n        value={cantidad}\n        onChange={(e) =&gt; setCantidad(Number(e.target.value))}\n        placeholder=\"Cantidad\"\n      /&gt;\n      &lt;h3&gt;Total: ${total}&lt;/h3&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p7/#2-verdaderofalso-boolean","title":"2. Verdadero/Falso (Boolean)","text":"<pre><code>function Interruptor() {\n  const [encendido, setEncendido] = useState(false);\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; setEncendido(!encendido)}&gt;\n        {encendido ? 'Apagar' : 'Encender'}\n      &lt;/button&gt;\n      &lt;p&gt;La luz est\u00e1 {encendido ? 'encendida' : 'apagada'}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p7/#3-listas-arrays","title":"3. Listas (Arrays)","text":"<pre><code>function ListaTareas() {\n  const [tareas, setTareas] = useState([]);\n  const [nuevaTarea, setNuevaTarea] = useState('');\n\n  const agregarTarea = () =&gt; {\n    if (nuevaTarea.trim()) {\n      setTareas([...tareas, nuevaTarea]);\n      setNuevaTarea('');\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        value={nuevaTarea}\n        onChange={(e) =&gt; setNuevaTarea(e.target.value)}\n        placeholder=\"Nueva tarea\"\n      /&gt;\n      &lt;button onClick={agregarTarea}&gt;Agregar&lt;/button&gt;\n\n      &lt;ul&gt;\n        {tareas.map((tarea, index) =&gt; (\n          &lt;li key={index}&gt;{tarea}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Punto importante: <code>[...tareas, nuevaTarea]</code> crea una nueva lista con todos los elementos anteriores m\u00e1s el nuevo. \u00a1Nunca modifiques la lista directamente!</p>"},{"location":"content/p7/#4-objetos","title":"4. Objetos","text":"<pre><code>function PerfilUsuario() {\n  const [usuario, setUsuario] = useState({\n    nombre: '',\n    edad: 0,\n    email: ''\n  });\n\n  const actualizarNombre = (nuevoNombre) =&gt; {\n    setUsuario({\n      ...usuario,  // Mantener todo lo anterior\n      nombre: nuevoNombre  // Cambiar solo el nombre\n    });\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        value={usuario.nombre}\n        onChange={(e) =&gt; actualizarNombre(e.target.value)}\n        placeholder=\"Nombre\"\n      /&gt;\n      &lt;p&gt;Hola {usuario.nombre}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p7/#reglas-importantes","title":"Reglas Importantes","text":""},{"location":"content/p7/#no-hagas-esto","title":"\u274c NO hagas esto:","text":"<pre><code>// MAL - Modificar directamente\nconst [lista, setLista] = useState([1, 2, 3]);\nlista.push(4);  // \u00a1NO!\nsetLista(lista);\n\n// MAL - Modificar objeto directamente\nconst [persona, setPersona] = useState({nombre: 'Juan'});\npersona.nombre = 'Pedro';  // \u00a1NO!\nsetPersona(persona);\n</code></pre>"},{"location":"content/p7/#si-haz-esto","title":"\u2705 S\u00cd haz esto:","text":"<pre><code>// BIEN - Crear nueva lista\nconst [lista, setLista] = useState([1, 2, 3]);\nsetLista([...lista, 4]);\n\n// BIEN - Crear nuevo objeto\nconst [persona, setPersona] = useState({nombre: 'Juan'});\nsetPersona({...persona, nombre: 'Pedro'});\n</code></pre>"},{"location":"content/p7/#ejemplo-practico-formulario-simple","title":"Ejemplo Pr\u00e1ctico: Formulario Simple","text":"<pre><code>function FormularioContacto() {\n  const [datos, setDatos] = useState({\n    nombre: '',\n    email: '',\n    mensaje: ''\n  });\n  const [enviado, setEnviado] = useState(false);\n\n  const manejarCambio = (campo, valor) =&gt; {\n    setDatos({\n      ...datos,\n      [campo]: valor\n    });\n  };\n\n  const enviarFormulario = () =&gt; {\n    console.log('Datos enviados:', datos);\n    setEnviado(true);\n  };\n\n  if (enviado) {\n    return &lt;h2&gt;\u00a1Mensaje enviado! Gracias {datos.nombre}&lt;/h2&gt;;\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Cont\u00e1ctanos&lt;/h2&gt;\n\n      &lt;input \n        type=\"text\"\n        value={datos.nombre}\n        onChange={(e) =&gt; manejarCambio('nombre', e.target.value)}\n        placeholder=\"Tu nombre\"\n      /&gt;\n\n      &lt;input \n        type=\"email\"\n        value={datos.email}\n        onChange={(e) =&gt; manejarCambio('email', e.target.value)}\n        placeholder=\"Tu email\"\n      /&gt;\n\n      &lt;textarea \n        value={datos.mensaje}\n        onChange={(e) =&gt; manejarCambio('mensaje', e.target.value)}\n        placeholder=\"Tu mensaje\"\n      /&gt;\n\n      &lt;button onClick={enviarFormulario}&gt;\n        Enviar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p7/#consejos-practicos","title":"Consejos Pr\u00e1cticos","text":""},{"location":"content/p7/#1-multiples-estados","title":"1. M\u00faltiples Estados","text":"<p>Puedes tener varios estados en un componente:</p> <pre><code>function MiComponente() {\n  const [nombre, setNombre] = useState('');\n  const [edad, setEdad] = useState(0);\n  const [activo, setActivo] = useState(false);\n\n  // ... resto del componente\n}\n</code></pre>"},{"location":"content/p7/#2-estado-inicial-calculado","title":"2. Estado Inicial Calculado","text":"<p>Si el valor inicial requiere c\u00e1lculo, usa una funci\u00f3n:</p> <pre><code>const [datos, setDatos] = useState(() =&gt; {\n  // Esto solo se ejecuta una vez\n  return JSON.parse(localStorage.getItem('datos')) || [];\n});\n</code></pre>"},{"location":"content/p7/#3-actualizacion-basada-en-estado-anterior","title":"3. Actualizaci\u00f3n Basada en Estado Anterior","text":"<p>Cuando el nuevo valor depende del anterior, usa una funci\u00f3n:</p> <pre><code>const [contador, setContador] = useState(0);\n\n// Mejor pr\u00e1ctica\nconst incrementar = () =&gt; {\n  setContador(prevContador =&gt; prevContador + 1);\n};\n</code></pre>"},{"location":"content/p7/#ejercicios-para-practicar","title":"Ejercicios para Practicar","text":""},{"location":"content/p7/#ejercicio-1-contador-avanzado","title":"Ejercicio 1: Contador Avanzado","text":"<p>Crea un contador que: - Pueda sumar y restar - Tenga un bot\u00f3n de reset - Muestre si el n\u00famero es par o impar</p>"},{"location":"content/p7/#ejercicio-2-lista-de-compras","title":"Ejercicio 2: Lista de Compras","text":"<p>Crea una lista donde puedas: - Agregar productos - Eliminar productos - Marcar como comprado</p>"},{"location":"content/p7/#ejercicio-3-calculadora-de-propinas","title":"Ejercicio 3: Calculadora de Propinas","text":"<p>Crea una calculadora que: - Reciba el total de la cuenta - Permita elegir porcentaje de propina - Calcule el total final</p>"},{"location":"content/p8/","title":"Clase 9: Hook useEffect - Gu\u00eda Simple y Detallada","text":""},{"location":"content/p8/#que-es-useeffect","title":"\u00bfQu\u00e9 es useEffect?","text":"<p>El hook <code>useEffect</code> te permite realizar efectos secundarios en tus componentes funcionales. Piensa en los efectos como \"cosas que necesitas hacer\" adem\u00e1s de mostrar la interfaz:</p> <ul> <li>Obtener datos de una API</li> <li>Cambiar el t\u00edtulo de la p\u00e1gina</li> <li>Configurar temporizadores</li> <li>Limpiar recursos cuando el componente se desmonta</li> </ul>"},{"location":"content/p8/#concepto-simple","title":"Concepto Simple","text":"<pre><code>useEffect(() =&gt; {\n  // C\u00f3digo que se ejecuta despu\u00e9s del render\n});\n</code></pre>"},{"location":"content/p8/#importacion","title":"Importaci\u00f3n","text":"<p>Siempre debemos importar useEffect junto con useState:</p> <pre><code>import { useState, useEffect } from 'react';\n</code></pre>"},{"location":"content/p8/#ejemplo-1-mi-primer-efecto","title":"Ejemplo 1: Mi Primer Efecto","text":"<p>Comencemos con algo simple - cambiar el t\u00edtulo de la p\u00e1gina:</p> <pre><code>import { useState, useEffect } from 'react';\n\nfunction CambiadorTitulo() {\n  const [contador, setContador] = useState(0);\n\n  // Este efecto se ejecuta despu\u00e9s de cada render\n  useEffect(() =&gt; {\n    document.title = `Contador: ${contador}`;\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Contador: {contador}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;\n        Incrementar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>\u00bfQu\u00e9 pasa aqu\u00ed? 1. Cada vez que el componente se renderiza, <code>useEffect</code> se ejecuta 2. El efecto cambia el t\u00edtulo de la p\u00e1gina del navegador 3. Cuando incrementamos el contador, se actualiza el t\u00edtulo autom\u00e1ticamente</p>"},{"location":"content/p8/#ejemplo-2-efecto-que-se-ejecuta-solo-una-vez","title":"Ejemplo 2: Efecto que se Ejecuta Solo Una Vez","text":"<p>A veces queremos que algo pase solo cuando el componente aparece por primera vez:</p> <pre><code>function SaludoInicial() {\n  const [usuario, setUsuario] = useState('');\n\n  // Este efecto se ejecuta SOLO una vez, al montar el componente\n  useEffect(() =&gt; {\n    console.log('\u00a1El componente se mont\u00f3!');\n    alert('\u00a1Bienvenido a la aplicaci\u00f3n!');\n  }, []); // El array vac\u00edo [] es la clave\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        value={usuario}\n        onChange={(e) =&gt; setUsuario(e.target.value)}\n        placeholder=\"Tu nombre\"\n      /&gt;\n      &lt;p&gt;Hola {usuario}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Punto clave: El <code>[]</code> al final hace que el efecto se ejecute solo una vez.</p>"},{"location":"content/p8/#los-tres-tipos-de-useeffect","title":"Los Tres Tipos de useEffect","text":""},{"location":"content/p8/#1-sin-dependencias-se-ejecuta-siempre","title":"1. Sin Dependencias (se ejecuta siempre)","text":"<pre><code>useEffect(() =&gt; {\n  console.log('Me ejecuto despu\u00e9s de cada render');\n});\n</code></pre>"},{"location":"content/p8/#2-con-array-vacio-se-ejecuta-solo-una-vez","title":"2. Con Array Vac\u00edo (se ejecuta solo una vez)","text":"<pre><code>useEffect(() =&gt; {\n  console.log('Me ejecuto solo al montar el componente');\n}, []);\n</code></pre>"},{"location":"content/p8/#3-con-dependencias-se-ejecuta-cuando-cambian","title":"3. Con Dependencias (se ejecuta cuando cambian)","text":"<pre><code>useEffect(() =&gt; {\n  console.log('Me ejecuto cuando cambia el contador');\n}, [contador]);\n</code></pre>"},{"location":"content/p8/#ejemplo-3-obtener-datos-de-una-api","title":"Ejemplo 3: Obtener Datos de una API","text":"<p>Este es uno de los usos m\u00e1s comunes de useEffect:</p> <pre><code>function ListaUsuarios() {\n  const [usuarios, setUsuarios] = useState([]);\n  const [cargando, setCargando] = useState(true);\n\n  useEffect(() =&gt; {\n    // Simular llamada a API\n    const obtenerUsuarios = async () =&gt; {\n      setCargando(true);\n\n      // Simular delay de red\n      await new Promise(resolve =&gt; setTimeout(resolve, 2000));\n\n      // Datos simulados\n      const datosSimulados = [\n        { id: 1, nombre: 'Ana Garc\u00eda', email: 'ana@email.com' },\n        { id: 2, nombre: 'Carlos L\u00f3pez', email: 'carlos@email.com' },\n        { id: 3, nombre: 'Mar\u00eda Rodr\u00edguez', email: 'maria@email.com' }\n      ];\n\n      setUsuarios(datosSimulados);\n      setCargando(false);\n    };\n\n    obtenerUsuarios();\n  }, []); // Solo se ejecuta una vez al montar\n\n  if (cargando) {\n    return &lt;div&gt;Cargando usuarios...&lt;/div&gt;;\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Lista de Usuarios&lt;/h2&gt;\n      &lt;ul&gt;\n        {usuarios.map(usuario =&gt; (\n          &lt;li key={usuario.id}&gt;\n            {usuario.nombre} - {usuario.email}\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p8/#ejemplo-4-efecto-con-dependencias","title":"Ejemplo 4: Efecto con Dependencias","text":"<p>Veamos c\u00f3mo reaccionar a cambios espec\u00edficos:</p> <pre><code>function BuscadorProductos() {\n  const [busqueda, setBusqueda] = useState('');\n  const [productos, setProductos] = useState([]);\n  const [cargando, setCargando] = useState(false);\n\n  // Este efecto se ejecuta cada vez que cambia 'busqueda'\n  useEffect(() =&gt; {\n    if (busqueda.trim() === '') {\n      setProductos([]);\n      return;\n    }\n\n    const buscarProductos = async () =&gt; {\n      setCargando(true);\n\n      // Simular b\u00fasqueda\n      await new Promise(resolve =&gt; setTimeout(resolve, 1000));\n\n      const todosLosProductos = [\n        'Laptop', 'Mouse', 'Teclado', 'Monitor', 'Auriculares',\n        'C\u00e1mara', 'Tablet', 'Smartphone', 'Impresora', 'Router'\n      ];\n\n      const resultados = todosLosProductos.filter(producto =&gt; \n        producto.toLowerCase().includes(busqueda.toLowerCase())\n      );\n\n      setProductos(resultados);\n      setCargando(false);\n    };\n\n    buscarProductos();\n  }, [busqueda]); // Se ejecuta cuando cambia 'busqueda'\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Buscador de Productos&lt;/h2&gt;\n      &lt;input \n        type=\"text\"\n        value={busqueda}\n        onChange={(e) =&gt; setBusqueda(e.target.value)}\n        placeholder=\"Buscar productos...\"\n      /&gt;\n\n      {cargando &amp;&amp; &lt;p&gt;Buscando...&lt;/p&gt;}\n\n      &lt;ul&gt;\n        {productos.map((producto, index) =&gt; (\n          &lt;li key={index}&gt;{producto}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n\n      {busqueda &amp;&amp; !cargando &amp;&amp; productos.length === 0 &amp;&amp; (\n        &lt;p&gt;No se encontraron productos&lt;/p&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p8/#limpieza-de-efectos-cleanup","title":"Limpieza de Efectos (Cleanup)","text":"<p>Algunos efectos necesitan \"limpiarse\" cuando el componente se desmonta:</p> <pre><code>function Temporizador() {\n  const [segundos, setSegundos] = useState(0);\n  const [activo, setActivo] = useState(false);\n\n  useEffect(() =&gt; {\n    let intervalo = null;\n\n    if (activo) {\n      intervalo = setInterval(() =&gt; {\n        setSegundos(segundos =&gt; segundos + 1);\n      }, 1000);\n    }\n\n    // Funci\u00f3n de limpieza\n    return () =&gt; {\n      if (intervalo) {\n        clearInterval(intervalo);\n      }\n    };\n  }, [activo]); // Se ejecuta cuando cambia 'activo'\n\n  const reiniciar = () =&gt; {\n    setSegundos(0);\n    setActivo(false);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Temporizador: {segundos} segundos&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setActivo(!activo)}&gt;\n        {activo ? 'Pausar' : 'Iniciar'}\n      &lt;/button&gt;\n      &lt;button onClick={reiniciar}&gt;\n        Reiniciar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Punto importante: La funci\u00f3n que devuelves en useEffect se ejecuta para limpiar el efecto.</p>"},{"location":"content/p8/#ejemplo-practico-chat-en-tiempo-real-simulado","title":"Ejemplo Pr\u00e1ctico: Chat en Tiempo Real (Simulado)","text":"<pre><code>function ChatSimulado() {\n  const [mensajes, setMensajes] = useState([]);\n  const [nuevoMensaje, setNuevoMensaje] = useState('');\n  const [conectado, setConectado] = useState(false);\n\n  // Efecto para simular conexi\u00f3n al chat\n  useEffect(() =&gt; {\n    if (conectado) {\n      console.log('Conectando al chat...');\n\n      // Simular mensajes que llegan\n      const intervalo = setInterval(() =&gt; {\n        const mensajesAleatorios = [\n          'Hola, \u00bfc\u00f3mo est\u00e1n?',\n          '\u00bfAlguien sabe de React?',\n          'Estoy aprendiendo useEffect',\n          '\u00a1Este tutorial est\u00e1 genial!',\n          '\u00bfDudas sobre hooks?'\n        ];\n\n        const mensajeAleatorio = mensajesAleatorios[\n          Math.floor(Math.random() * mensajesAleatorios.length)\n        ];\n\n        setMensajes(prev =&gt; [...prev, {\n          id: Date.now(),\n          texto: mensajeAleatorio,\n          usuario: 'Usuario' + Math.floor(Math.random() * 100),\n          timestamp: new Date().toLocaleTimeString()\n        }]);\n      }, 3000);\n\n      // Limpieza: desconectar cuando el componente se desmonte\n      return () =&gt; {\n        console.log('Desconectando del chat...');\n        clearInterval(intervalo);\n      };\n    }\n  }, [conectado]);\n\n  const enviarMensaje = () =&gt; {\n    if (nuevoMensaje.trim()) {\n      setMensajes(prev =&gt; [...prev, {\n        id: Date.now(),\n        texto: nuevoMensaje,\n        usuario: 'T\u00fa',\n        timestamp: new Date().toLocaleTimeString()\n      }]);\n      setNuevoMensaje('');\n    }\n  };\n\n  return (\n    &lt;div style={{ maxWidth: '400px', margin: '0 auto', padding: '20px' }}&gt;\n      &lt;h2&gt;Chat Simulado&lt;/h2&gt;\n\n      &lt;button \n        onClick={() =&gt; setConectado(!conectado)}\n        style={{\n          backgroundColor: conectado ? '#dc3545' : '#28a745',\n          color: 'white',\n          border: 'none',\n          padding: '10px 20px',\n          borderRadius: '4px',\n          marginBottom: '20px'\n        }}\n      &gt;\n        {conectado ? 'Desconectar' : 'Conectar'}\n      &lt;/button&gt;\n\n      &lt;div style={{\n        height: '300px',\n        border: '1px solid #ddd',\n        borderRadius: '4px',\n        padding: '10px',\n        overflowY: 'scroll',\n        backgroundColor: '#f8f9fa',\n        marginBottom: '10px'\n      }}&gt;\n        {mensajes.map(mensaje =&gt; (\n          &lt;div key={mensaje.id} style={{ marginBottom: '10px' }}&gt;\n            &lt;strong&gt;{mensaje.usuario}&lt;/strong&gt; \n            &lt;small style={{ color: '#666' }}&gt; ({mensaje.timestamp})&lt;/small&gt;\n            &lt;br /&gt;\n            {mensaje.texto}\n          &lt;/div&gt;\n        ))}\n        {mensajes.length === 0 &amp;&amp; (\n          &lt;p style={{ color: '#666', textAlign: 'center' }}&gt;\n            {conectado ? 'Esperando mensajes...' : 'Desconectado'}\n          &lt;/p&gt;\n        )}\n      &lt;/div&gt;\n\n      {conectado &amp;&amp; (\n        &lt;div style={{ display: 'flex' }}&gt;\n          &lt;input \n            type=\"text\"\n            value={nuevoMensaje}\n            onChange={(e) =&gt; setNuevoMensaje(e.target.value)}\n            onKeyPress={(e) =&gt; e.key === 'Enter' &amp;&amp; enviarMensaje()}\n            placeholder=\"Escribe un mensaje...\"\n            style={{\n              flex: 1,\n              padding: '10px',\n              border: '1px solid #ddd',\n              borderRadius: '4px 0 0 4px'\n            }}\n          /&gt;\n          &lt;button \n            onClick={enviarMensaje}\n            style={{\n              backgroundColor: '#007bff',\n              color: 'white',\n              border: 'none',\n              padding: '10px 20px',\n              borderRadius: '0 4px 4px 0'\n            }}\n          &gt;\n            Enviar\n          &lt;/button&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p8/#reglas-importantes-de-useeffect","title":"Reglas Importantes de useEffect","text":""},{"location":"content/p8/#si-haz-esto","title":"\u2705 S\u00cd haz esto:","text":"<pre><code>// Especifica dependencias correctamente\nuseEffect(() =&gt; {\n  console.log(contador);\n}, [contador]);\n\n// Limpia efectos cuando sea necesario\nuseEffect(() =&gt; {\n  const timer = setInterval(() =&gt; {}, 1000);\n  return () =&gt; clearInterval(timer);\n}, []);\n</code></pre>"},{"location":"content/p8/#no-hagas-esto","title":"\u274c NO hagas esto:","text":"<pre><code>// MAL - Olvidar dependencias\nuseEffect(() =&gt; {\n  console.log(contador); // Usa 'contador' pero no est\u00e1 en dependencias\n}, []); // \u00a1Falta [contador]!\n\n// MAL - No limpiar efectos\nuseEffect(() =&gt; {\n  setInterval(() =&gt; {}, 1000); // \u00a1No se limpia!\n}, []);\n</code></pre>"},{"location":"content/p8/#casos-de-uso-comunes","title":"Casos de Uso Comunes","text":""},{"location":"content/p8/#1-obtener-datos-al-cargar","title":"1. Obtener Datos al Cargar","text":"<pre><code>useEffect(() =&gt; {\n  fetch('/api/datos')\n    .then(response =&gt; response.json())\n    .then(data =&gt; setDatos(data));\n}, []);\n</code></pre>"},{"location":"content/p8/#2-escuchar-eventos-del-navegador","title":"2. Escuchar Eventos del Navegador","text":"<pre><code>useEffect(() =&gt; {\n  const manejarResize = () =&gt; {\n    console.log('Ventana redimensionada');\n  };\n\n  window.addEventListener('resize', manejarResize);\n\n  return () =&gt; {\n    window.removeEventListener('resize', manejarResize);\n  };\n}, []);\n</code></pre>"},{"location":"content/p8/#3-actualizar-documento","title":"3. Actualizar Documento","text":"<pre><code>useEffect(() =&gt; {\n  document.title = `${nombre} - Mi App`;\n}, [nombre]);\n</code></pre>"},{"location":"content/p8/#ejercicios-para-practicar","title":"Ejercicios para Practicar","text":""},{"location":"content/p8/#ejercicio-1-reloj-digital","title":"Ejercicio 1: Reloj Digital","text":"<p>Crea un reloj que: - Muestre la hora actual - Se actualice cada segundo - Tenga bot\u00f3n para pausar/reanudar</p>"},{"location":"content/p8/#ejercicio-2-contador-de-clics","title":"Ejercicio 2: Contador de Clics","text":"<p>Crea un componente que: - Cuente clics en la p\u00e1gina - Guarde el conteo en localStorage - Cargue el conteo al iniciar</p>"},{"location":"content/p8/#ejercicio-3-buscador-con-debounce","title":"Ejercicio 3: Buscador con Debounce","text":"<p>Crea un buscador que: - Espere 500ms despu\u00e9s de escribir - Luego haga la b\u00fasqueda - Cancele b\u00fasquedas anteriores</p>"},{"location":"content/p8/#errores-comunes-y-soluciones","title":"Errores Comunes y Soluciones","text":""},{"location":"content/p8/#error-1-bucle-infinito","title":"Error 1: \"Bucle Infinito\"","text":"<pre><code>// MAL - Causa bucle infinito\nconst [datos, setDatos] = useState([]);\nuseEffect(() =&gt; {\n  setDatos([...datos, 'nuevo']); // \u00a1Cambia 'datos' sin dependencias!\n});\n\n// BIEN - Especifica dependencias\nuseEffect(() =&gt; {\n  // Solo ejecutar bajo ciertas condiciones\n}, []);\n</code></pre>"},{"location":"content/p8/#error-2-dependencias-faltantes","title":"Error 2: \"Dependencias Faltantes\"","text":"<pre><code>// MAL - Usa 'usuario' pero no est\u00e1 en dependencias\nuseEffect(() =&gt; {\n  console.log(usuario.nombre);\n}, []); // \u00a1Falta [usuario]!\n\n// BIEN - Incluye todas las dependencias\nuseEffect(() =&gt; {\n  console.log(usuario.nombre);\n}, [usuario]);\n</code></pre>"},{"location":"content/p8/#error-3-no-limpiar-efectos","title":"Error 3: \"No Limpiar Efectos\"","text":"<pre><code>// MAL - No limpia el temporizador\nuseEffect(() =&gt; {\n  const timer = setInterval(() =&gt; {}, 1000);\n}, []);\n\n// BIEN - Limpia el temporizador\nuseEffect(() =&gt; {\n  const timer = setInterval(() =&gt; {}, 1000);\n  return () =&gt; clearInterval(timer);\n}, []);\n</code></pre>"},{"location":"content/p8/#consejos-avanzados","title":"Consejos Avanzados","text":""},{"location":"content/p8/#1-multiples-useeffect","title":"1. M\u00faltiples useEffect","text":"<p>Puedes usar varios useEffect para diferentes prop\u00f3sitos:</p> <pre><code>function MiComponente() {\n  // Efecto para datos\n  useEffect(() =&gt; {\n    obtenerDatos();\n  }, []);\n\n  // Efecto para t\u00edtulo\n  useEffect(() =&gt; {\n    document.title = titulo;\n  }, [titulo]);\n\n  // Efecto para temporizador\n  useEffect(() =&gt; {\n    const timer = setInterval(() =&gt; {}, 1000);\n    return () =&gt; clearInterval(timer);\n  }, []);\n}\n</code></pre>"},{"location":"content/p8/#2-efecto-condicional","title":"2. Efecto Condicional","text":"<pre><code>useEffect(() =&gt; {\n  if (usuario &amp;&amp; usuario.id) {\n    obtenerPerfilUsuario(usuario.id);\n  }\n}, [usuario]);\n</code></pre>"},{"location":"content/p8/#3-evitar-efectos-innecesarios","title":"3. Evitar Efectos Innecesarios","text":"<pre><code>// En lugar de esto:\nuseEffect(() =&gt; {\n  setTotal(precio * cantidad);\n}, [precio, cantidad]);\n\n// Mejor hacer esto:\nconst total = precio * cantidad; // C\u00e1lculo directo\n</code></pre>"},{"location":"content/p8/#ejemplos-con-api-playground-y-typescript","title":"Ejemplos con API Playground y TypeScript","text":"<p>Vamos a ver ejemplos pr\u00e1cticos usando la API Playground de Mockoon con TypeScript para gestionar usuarios.</p>"},{"location":"content/p8/#tipos-typescript-para-usuarios","title":"Tipos TypeScript para Usuarios","text":"<p>Primero, definamos tipos simples para trabajar con usuarios:</p> <pre><code>// Tipos para el recurso users\ntype Usuario = {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  address: string;\n  birthdate: string;\n  isActive: boolean;\n};\n\n// Tipo para estado de carga\ntype EstadoCarga = {\n  cargando: boolean;\n  error: string | null;\n  completado: boolean;\n};\n</code></pre>"},{"location":"content/p8/#ejemplo-1-obtener-usuarios-con-useeffect","title":"Ejemplo 1: Obtener Usuarios con useEffect","text":"<p>Este ejemplo muestra c\u00f3mo obtener una lista de usuarios al cargar el componente:</p> <pre><code>import { useState, useEffect } from 'react';\n\nfunction ListaUsuarios() {\n  const [usuarios, setUsuarios] = useState&lt;Usuario[]&gt;([]);\n  const [estado, setEstado] = useState&lt;EstadoCarga&gt;({\n    cargando: false,\n    error: null,\n    completado: false\n  });\n\n  useEffect(() =&gt; {\n    // Funci\u00f3n para obtener usuarios\n    const obtenerUsuarios = async () =&gt; {\n      setEstado({ cargando: true, error: null, completado: false });\n\n      try {\n        const respuesta = await fetch('https://playground.mockoon.com/users');\n\n        if (!respuesta.ok) {\n          throw new Error(`Error: ${respuesta.status}`);\n        }\n\n        const datos = await respuesta.json();\n        setUsuarios(datos);\n        setEstado({ cargando: false, error: null, completado: true });\n      } catch (error) {\n        console.error('Error al obtener usuarios:', error);\n        setEstado({ \n          cargando: false, \n          error: error instanceof Error ? error.message : 'Error desconocido', \n          completado: true \n        });\n      }\n    };\n\n    obtenerUsuarios();\n  }, []); // Se ejecuta solo al montar el componente\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Lista de Usuarios&lt;/h2&gt;\n\n      {estado.cargando &amp;&amp; &lt;p&gt;Cargando usuarios...&lt;/p&gt;}\n\n      {estado.error &amp;&amp; (\n        &lt;div style={{ color: 'red', padding: '10px', backgroundColor: '#ffeeee' }}&gt;\n          Error: {estado.error}\n        &lt;/div&gt;\n      )}\n\n      {estado.completado &amp;&amp; !estado.error &amp;&amp; usuarios.length === 0 &amp;&amp; (\n        &lt;p&gt;No se encontraron usuarios&lt;/p&gt;\n      )}\n\n      &lt;ul&gt;\n        {usuarios.map(usuario =&gt; (\n          &lt;li key={usuario.id} style={{ \n            padding: '10px', \n            margin: '5px 0',\n            backgroundColor: usuario.isActive ? '#e6ffe6' : '#ffe6e6',\n            borderRadius: '4px'\n          }}&gt;\n            &lt;strong&gt;{usuario.name}&lt;/strong&gt; ({usuario.email})\n            &lt;br /&gt;\n            &lt;span&gt;Tel\u00e9fono: {usuario.phone}&lt;/span&gt;\n            &lt;span style={{ \n              marginLeft: '10px',\n              color: usuario.isActive ? 'green' : 'red'\n            }}&gt;\n              {usuario.isActive ? '\u25cf Activo' : '\u25cf Inactivo'}\n            &lt;/span&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p8/#ejemplo-2-useeffect-con-dependencias-para-busqueda","title":"Ejemplo 2: useEffect con Dependencias para B\u00fasqueda","text":"<p>Este ejemplo muestra c\u00f3mo buscar usuarios cuando cambia un t\u00e9rmino de b\u00fasqueda:</p> <pre><code>import { useState, useEffect } from 'react';\n\nfunction BuscadorUsuarios() {\n  const [termino, setTermino] = useState('');\n  const [usuarios, setUsuarios] = useState&lt;Usuario[]&gt;([]);\n  const [estado, setEstado] = useState&lt;EstadoCarga&gt;({\n    cargando: false,\n    error: null,\n    completado: false\n  });\n\n  // Este efecto se ejecuta cuando cambia el t\u00e9rmino de b\u00fasqueda\n  useEffect(() =&gt; {\n    // Si el t\u00e9rmino est\u00e1 vac\u00edo, no hacemos nada\n    if (termino.trim() === '') {\n      setUsuarios([]);\n      setEstado({ cargando: false, error: null, completado: false });\n      return;\n    }\n\n    // Funci\u00f3n para buscar usuarios\n    const buscarUsuarios = async () =&gt; {\n      setEstado({ cargando: true, error: null, completado: false });\n\n      try {\n        // URL con par\u00e1metro de b\u00fasqueda\n        const url = `https://playground.mockoon.com/users?q=${encodeURIComponent(termino)}`;\n        const respuesta = await fetch(url);\n\n        if (!respuesta.ok) {\n          throw new Error(`Error: ${respuesta.status}`);\n        }\n\n        const datos = await respuesta.json();\n        setUsuarios(datos);\n        setEstado({ cargando: false, error: null, completado: true });\n      } catch (error) {\n        console.error('Error al buscar usuarios:', error);\n        setEstado({ \n          cargando: false, \n          error: error instanceof Error ? error.message : 'Error desconocido', \n          completado: true \n        });\n      }\n    };\n\n    // Debounce: esperamos 500ms despu\u00e9s de escribir para buscar\n    const timeoutId = setTimeout(() =&gt; {\n      buscarUsuarios();\n    }, 500);\n\n    // Limpieza: cancelamos el timeout si el t\u00e9rmino cambia antes de los 500ms\n    return () =&gt; clearTimeout(timeoutId);\n  }, [termino]); // Se ejecuta cuando cambia el t\u00e9rmino\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Buscador de Usuarios&lt;/h2&gt;\n\n      &lt;input\n        type=\"text\"\n        value={termino}\n        onChange={(e) =&gt; setTermino(e.target.value)}\n        placeholder=\"Buscar por nombre o email...\"\n        style={{\n          padding: '10px',\n          width: '100%',\n          marginBottom: '20px',\n          borderRadius: '4px',\n          border: '1px solid #ccc'\n        }}\n      /&gt;\n\n      {estado.cargando &amp;&amp; &lt;p&gt;Buscando usuarios...&lt;/p&gt;}\n\n      {estado.error &amp;&amp; (\n        &lt;div style={{ color: 'red', padding: '10px', backgroundColor: '#ffeeee' }}&gt;\n          Error: {estado.error}\n        &lt;/div&gt;\n      )}\n\n      {estado.completado &amp;&amp; !estado.error &amp;&amp; usuarios.length === 0 &amp;&amp; (\n        &lt;p&gt;No se encontraron usuarios que coincidan con \"{termino}\"&lt;/p&gt;\n      )}\n\n      &lt;ul style={{ padding: 0, listStyle: 'none' }}&gt;\n        {usuarios.map(usuario =&gt; (\n          &lt;li key={usuario.id} style={{ \n            padding: '10px', \n            margin: '5px 0',\n            backgroundColor: '#f5f5f5',\n            borderRadius: '4px',\n            borderLeft: `4px solid ${usuario.isActive ? 'green' : 'red'}`\n          }}&gt;\n            &lt;strong&gt;{usuario.name}&lt;/strong&gt;\n            &lt;br /&gt;\n            &lt;span&gt;{usuario.email}&lt;/span&gt;\n            &lt;br /&gt;\n            &lt;span style={{ \n              display: 'inline-block',\n              padding: '2px 6px',\n              backgroundColor: '#f0f0f0',\n              borderRadius: '4px',\n              fontSize: '0.8em',\n              marginTop: '5px'\n            }}&gt;\n              {usuario.birthdate}\n            &lt;/span&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p8/#ejemplo-3-multiples-efectos-para-gestion-de-usuarios","title":"Ejemplo 3: M\u00faltiples Efectos para Gesti\u00f3n de Usuarios","text":"<p>Este ejemplo muestra c\u00f3mo usar m\u00faltiples efectos para diferentes aspectos de la gesti\u00f3n de usuarios:</p> <pre><code>import { useState, useEffect } from 'react';\n\nfunction GestorUsuarios() {\n  const [usuarios, setUsuarios] = useState&lt;Usuario[]&gt;([]);\n  const [usuarioSeleccionado, setUsuarioSeleccionado] = useState&lt;string | null&gt;(null);\n  const [detalleUsuario, setDetalleUsuario] = useState&lt;Usuario | null&gt;(null);\n  const [estadisticas, setEstadisticas] = useState({\n    total: 0,\n    activos: 0,\n    inactivos: 0\n  });\n  const [estado, setEstado] = useState&lt;EstadoCarga&gt;({\n    cargando: false,\n    error: null,\n    completado: false\n  });\n\n  // Efecto 1: Cargar lista de usuarios\n  useEffect(() =&gt; {\n    const cargarUsuarios = async () =&gt; {\n      setEstado({ cargando: true, error: null, completado: false });\n\n      try {\n        const respuesta = await fetch('https://playground.mockoon.com/users');\n\n        if (!respuesta.ok) {\n          throw new Error(`Error: ${respuesta.status}`);\n        }\n\n        const datos = await respuesta.json();\n        setUsuarios(datos);\n        setEstado({ cargando: false, error: null, completado: true });\n      } catch (error) {\n        setEstado({ \n          cargando: false, \n          error: error instanceof Error ? error.message : 'Error desconocido', \n          completado: true \n        });\n      }\n    };\n\n    cargarUsuarios();\n  }, []); // Solo al montar\n\n  // Efecto 2: Calcular estad\u00edsticas cuando cambia la lista de usuarios\n  useEffect(() =&gt; {\n    const activos = usuarios.filter(u =&gt; u.isActive).length;\n\n    setEstadisticas({\n      total: usuarios.length,\n      activos: activos,\n      inactivos: usuarios.length - activos\n    });\n  }, [usuarios]); // Se ejecuta cuando cambia la lista de usuarios\n\n  // Efecto 3: Cargar detalles cuando se selecciona un usuario\n  useEffect(() =&gt; {\n    if (usuarioSeleccionado === null) {\n      setDetalleUsuario(null);\n      return;\n    }\n\n    const cargarDetalleUsuario = async () =&gt; {\n      try {\n        const respuesta = await fetch(`https://playground.mockoon.com/users/${usuarioSeleccionado}`);\n\n        if (!respuesta.ok) {\n          throw new Error(`Error: ${respuesta.status}`);\n        }\n\n        const datos = await respuesta.json();\n        setDetalleUsuario(datos);\n      } catch (error) {\n        console.error('Error al cargar detalle:', error);\n        setDetalleUsuario(null);\n      }\n    };\n\n    cargarDetalleUsuario();\n  }, [usuarioSeleccionado]); // Se ejecuta cuando cambia el usuario seleccionado\n\n  return (\n    &lt;div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}&gt;\n      &lt;h2&gt;Gestor de Usuarios&lt;/h2&gt;\n\n      {/* Panel de estad\u00edsticas */}\n      &lt;div style={{ \n        display: 'flex', \n        justifyContent: 'space-around',\n        padding: '15px',\n        backgroundColor: '#f0f0f0',\n        borderRadius: '8px'\n      }}&gt;\n        &lt;div&gt;\n          &lt;strong&gt;Total:&lt;/strong&gt; {estadisticas.total}\n        &lt;/div&gt;\n        &lt;div style={{ color: 'green' }}&gt;\n          &lt;strong&gt;Activos:&lt;/strong&gt; {estadisticas.activos}\n        &lt;/div&gt;\n        &lt;div style={{ color: 'red' }}&gt;\n          &lt;strong&gt;Inactivos:&lt;/strong&gt; {estadisticas.inactivos}\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      {/* Lista de usuarios */}\n      &lt;div style={{ display: 'flex', gap: '20px' }}&gt;\n        &lt;div style={{ flex: 1 }}&gt;\n          &lt;h3&gt;Lista de Usuarios&lt;/h3&gt;\n\n          {estado.cargando &amp;&amp; &lt;p&gt;Cargando usuarios...&lt;/p&gt;}\n\n          {estado.error &amp;&amp; (\n            &lt;div style={{ color: 'red', padding: '10px', backgroundColor: '#ffeeee' }}&gt;\n              Error: {estado.error}\n            &lt;/div&gt;\n          )}\n\n          &lt;ul style={{ padding: 0, listStyle: 'none' }}&gt;\n            {usuarios.map(usuario =&gt; (\n              &lt;li \n                key={usuario.id} \n                onClick={() =&gt; setUsuarioSeleccionado(usuario.id)}\n                style={{ \n                  padding: '10px', \n                  margin: '5px 0',\n                  backgroundColor: usuarioSeleccionado === usuario.id ? '#e6f7ff' : '#f5f5f5',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                  borderLeft: `4px solid ${usuario.isActive ? 'green' : 'red'}`\n                }}\n              &gt;\n                &lt;strong&gt;{usuario.name}&lt;/strong&gt;\n                &lt;br /&gt;\n                &lt;small&gt;{usuario.email}&lt;/small&gt;\n              &lt;/li&gt;\n            ))}\n          &lt;/ul&gt;\n        &lt;/div&gt;\n\n        {/* Detalle de usuario */}\n        &lt;div style={{ \n          flex: 1, \n          padding: '15px', \n          backgroundColor: '#f9f9f9',\n          borderRadius: '8px',\n          minHeight: '200px'\n        }}&gt;\n          &lt;h3&gt;Detalle de Usuario&lt;/h3&gt;\n\n          {!usuarioSeleccionado &amp;&amp; (\n            &lt;p&gt;Selecciona un usuario para ver sus detalles&lt;/p&gt;\n          )}\n\n          {usuarioSeleccionado &amp;&amp; !detalleUsuario &amp;&amp; (\n            &lt;p&gt;Cargando detalles...&lt;/p&gt;\n          )}\n\n          {detalleUsuario &amp;&amp; (\n            &lt;div&gt;\n              &lt;h4&gt;{detalleUsuario.name}&lt;/h4&gt;\n              &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; {detalleUsuario.email}&lt;/p&gt;\n              &lt;p&gt;&lt;strong&gt;Tel\u00e9fono:&lt;/strong&gt; {detalleUsuario.phone}&lt;/p&gt;\n              &lt;p&gt;&lt;strong&gt;Direcci\u00f3n:&lt;/strong&gt; {detalleUsuario.address}&lt;/p&gt;\n              &lt;p&gt;&lt;strong&gt;Fecha de nacimiento:&lt;/strong&gt; {detalleUsuario.birthdate}&lt;/p&gt;\n              &lt;p&gt;\n                &lt;strong&gt;Estado:&lt;/strong&gt; \n                &lt;span style={{ \n                  color: detalleUsuario.isActive ? 'green' : 'red',\n                  marginLeft: '5px'\n                }}&gt;\n                  {detalleUsuario.isActive ? 'Activo' : 'Inactivo'}\n                &lt;/span&gt;\n              &lt;/p&gt;\n              &lt;button\n                onClick={() =&gt; setUsuarioSeleccionado(null)}\n                style={{\n                  padding: '8px 15px',\n                  backgroundColor: '#f0f0f0',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                  marginTop: '10px'\n                }}\n              &gt;\n                Cerrar detalle\n              &lt;/button&gt;\n            &lt;/div&gt;\n          )}\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p9/","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: <pre><code>https://seia-stalone.vercel.app/\n</code></pre></p>"},{"location":"content/p9/#codigo-dmaedkci","title":"C\u00f3digo: DMAEDKCI","text":""},{"location":"pi/p1/","title":"Proyecto Integrador - Aplicaci\u00f3n Web con React y Next.js","text":""},{"location":"pi/p1/#introduccion","title":"Introducci\u00f3n","text":"<p>Este proyecto integrador tiene como finalidad desarrollar una aplicaci\u00f3n web moderna utilizando React con Next.js versi\u00f3n 13 o superior, implementando la nueva arquitectura de carpeta <code>app</code>. Los estudiantes aplicar\u00e1n los conocimientos adquiridos durante el curso para crear una aplicaci\u00f3n web completa y funcional.</p>"},{"location":"pi/p1/#objetivos","title":"Objetivos","text":""},{"location":"pi/p1/#objetivo-general","title":"Objetivo General","text":"<p>Desarrollar una aplicaci\u00f3n web completa utilizando React con Next.js, aplicando las mejores pr\u00e1cticas de desarrollo frontend moderno.</p>"},{"location":"pi/p1/#objetivos-especificos","title":"Objetivos Espec\u00edficos","text":"<ul> <li>Implementar una aplicaci\u00f3n web utilizando Next.js 13+ con App Router</li> <li>Aplicar conceptos de componentes reutilizables y estado en React</li> <li>Implementar routing din\u00e1mico y navegaci\u00f3n</li> <li>Aplicar principios de dise\u00f1o responsivo</li> <li>Documentar el proyecto de manera profesional</li> <li>Utilizar control de versiones con Git y GitHub</li> </ul>"},{"location":"pi/p1/#instrucciones-para-fork-del-repositorio","title":"Instrucciones para Fork del Repositorio","text":""},{"location":"pi/p1/#estructura-de-fork-para-grupos","title":"Estructura de Fork para Grupos","text":"<p>IMPORTANTE: Solo el l\u00edder del grupo debe realizar fork del repositorio original del proyecto. Los dem\u00e1s integrantes del grupo deben realizar fork del repositorio del l\u00edder.</p>"},{"location":"pi/p1/#para-el-lider-del-grupo","title":"Para el L\u00edder del Grupo:","text":"<ul> <li>Realizar fork del repositorio base del proyecto</li> <li>Configurar el repositorio como repositorio principal del grupo</li> <li>Gestionar los pull requests de los integrantes del equipo</li> </ul>"},{"location":"pi/p1/#para-los-integrantes-del-grupo","title":"Para los Integrantes del Grupo:","text":"<ul> <li>Realizar fork del repositorio del l\u00edder del grupo</li> <li>Trabajar en ramas espec\u00edficas para cada funcionalidad</li> <li>Enviar pull requests al repositorio del l\u00edder</li> </ul>"},{"location":"pi/p1/#paso-1-realizar-fork-solo-lider","title":"Paso 1: Realizar Fork (Solo L\u00edder)","text":"<p><pre><code>https://github.com/jfinfosena/act_pi_react.git\n</code></pre> 1. Navega al repositorio base del proyecto en GitHub 2. Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha 3. Selecciona tu cuenta personal como destino del fork 4. Espera a que se complete el proceso de fork</p>"},{"location":"pi/p1/#paso-2-clonar-tu-fork","title":"Paso 2: Clonar tu Fork","text":"<pre><code>git clone https://github.com/TU_USUARIO/act_pi_react.git\ncd act_pi_react\n</code></pre>"},{"location":"pi/p1/#estructura-de-carpetas-sugerida-implementar-durante-el-desarrollo","title":"Estructura de Carpetas Sugerida (Implementar durante el desarrollo)","text":"<pre><code>proyecto-integrador/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 next.config.js\n\u251c\u2500\u2500 tailwind.config.js\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .env.local.example\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 images/\n\u2502   \u251c\u2500\u2500 icons/\n\u2502   \u2514\u2500\u2500 favicon.ico\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 app/\n\u2502   \u2502   \u251c\u2500\u2500 globals.css\n\u2502   \u2502   \u251c\u2500\u2500 layout.js\n\u2502   \u2502   \u251c\u2500\u2500 page.js\n\u2502   \u2502   \u251c\u2500\u2500 loading.js\n\u2502   \u2502   \u251c\u2500\u2500 error.js\n\u2502   \u2502   \u251c\u2500\u2500 not-found.js\n\u2502   \u2502   \u251c\u2500\u2500 about/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 page.js\n\u2502   \u2502   \u251c\u2500\u2500 products/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 page.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 [id]/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 page.js\n\u2502   \u2502   \u2514\u2500\u2500 api/\n\u2502   \u2502       \u2514\u2500\u2500 hello/\n\u2502   \u2502           \u2514\u2500\u2500 route.js\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 ui/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Button.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Card.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Modal.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Input.js\n\u2502   \u2502   \u251c\u2500\u2500 layout/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Header.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Footer.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Navbar.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Sidebar.js\n\u2502   \u2502   \u2514\u2500\u2500 features/\n\u2502   \u2502       \u251c\u2500\u2500 ProductCard.js\n\u2502   \u2502       \u251c\u2500\u2500 UserProfile.js\n\u2502   \u2502       \u2514\u2500\u2500 SearchBar.js\n\u2502   \u251c\u2500\u2500 hooks/\n\u2502   \u2502   \u251c\u2500\u2500 useLocalStorage.js\n\u2502   \u2502   \u251c\u2500\u2500 useFetch.js\n\u2502   \u2502   \u2514\u2500\u2500 useAuth.js\n\u2502   \u251c\u2500\u2500 lib/\n\u2502   \u2502   \u251c\u2500\u2500 utils.js\n\u2502   \u2502   \u251c\u2500\u2500 constants.js\n\u2502   \u2502   \u2514\u2500\u2500 api.js\n\u2502   \u251c\u2500\u2500 styles/\n\u2502   \u2502   \u251c\u2500\u2500 globals.css\n\u2502   \u2502   \u2514\u2500\u2500 components.css\n\u2502   \u2514\u2500\u2500 types/\n\u2502       \u2514\u2500\u2500 index.js\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 CONTRIBUTING.md\n\u2502   \u251c\u2500\u2500 DEPLOYMENT.md\n\u2502   \u2514\u2500\u2500 API.md\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 __mocks__/\n    \u251c\u2500\u2500 components/\n    \u2514\u2500\u2500 pages/\n</code></pre>"},{"location":"pi/p1/#conformacion-de-grupos","title":"Conformaci\u00f3n de Grupos","text":""},{"location":"pi/p1/#grupos-de-trabajo-asignados","title":"Grupos de Trabajo Asignados","text":"Grupo Integrante 1 Integrante 2 Integrante 3 1 STEFANNY ALEXANDRA RODRIGUEZ ZAPATA DARLY JOHANA ZAMBRANO ZAMBRANO SAUL STIVEN ESCOBAR GOMEZ 2 JHON ALEXANDER LENIS HOLGUIN MARIANA BASTIDAS QUINTERO MATEO USUGA ALVAREZ 3 JUAN ANDRES JARAMILLO GARCIA LUIS FELIPE MOLINA CORREA DIEGO ALEJANDRO PONCE MOJICA 4 MARIA FERNANDA CADAVID CANO JUAN ESTEBAN HENAO ECHAVARRIA VALENTINA CORREA HOYOS 5 ANA MARIA URREGO CARMONA SARA GARCIA URREGO EMANUEL GIRALDO CASTA\u00d1EDA 6 JOSE MANUEL RUIZ ZAPATA SIMON SIERRA LOPEZ JUAN JOSE GIRALDO MONSALVE 7 ANDRES DAVID NARVAEZ MEJIA BRAHIAN ESTIVEN CATA\u00d1O MU\u00d1ETON SAMUEL GUARIN OSORIO 8 SAMUEL MORENO CARMONA IVAN DARIO FLOREZ HERNANDEZ KERRY ALEJANDRO HERRERA GARCIA 9 ISABELLA BUITAGRO GALLEGO KAREN GALEANO TATIANA VANEGAS MU\u00d1OZ 10 MATEO BETANCUR ESCOBAR ANDRES FELIPE GONZALEZ NORE\u00d1A JOSHUA PARRA TAMAYO 11 SAMUEL ANDRES TORRES ZULETA BRAYAN NICOLAS GOMEZ TOVAR -"},{"location":"pi/p1/#estructura-del-readmemd","title":"Estructura del README.md","text":"<p>Instrucciones en al archivo README.md del repositorio.</p>"}]}